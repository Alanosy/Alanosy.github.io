<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Alan</title>
        <subtitle></subtitle>
        <icon>http://47.97.229.110/images/favicon.ico</icon>
        <link>http://47.97.229.110</link>
        <author>
          <name>John Doe</name>
        </author>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Mon, 15 Mar 2021 19:13:16 +0800</pubDate>
        <lastBuildDate>Mon, 15 Mar 2021 19:13:16 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">http://47.97.229.110/2021/03/15/103%E7%9A%84%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB/</guid>
            <title>103寝室的日常</title>
            <link>http://47.97.229.110/2021/03/15/103%E7%9A%84%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB/</link>
            <category term="日常" scheme="http://47.97.229.110/categories/%E6%97%A5%E5%B8%B8/" />
            <pubDate>Mon, 15 Mar 2021 19:13:16 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://47.97.229.110/2021/03/13/%E5%85%B3%E4%BA%8E/</guid>
            <title>关于</title>
            <link>http://47.97.229.110/2021/03/13/%E5%85%B3%E4%BA%8E/</link>
            <pubDate>Sat, 13 Mar 2021 11:01:52 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;#此站站主：Alan&lt;/p&gt;
&lt;p&gt;此站点目的，是作为朋友圈使用，和偶尔写写文章&lt;/p&gt;
&lt;p&gt;其他详情请看菜单栏的关于页&lt;/p&gt;
&lt;p&gt;此站为node和git制作的静态网站&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://47.97.229.110/2021/03/13/hello-world/</guid>
            <title>Hello Hexo</title>
            <link>http://47.97.229.110/2021/03/13/hello-world/</link>
            <category term="Hexo" scheme="http://47.97.229.110/categories/Hexo/" />
            <pubDate>Sat, 13 Mar 2021 11:01:52 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;Welcome to &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvLw==&#34;&gt;Hexo&lt;/span&gt;! This is your very first post. Check &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv&#34;&gt;documentation&lt;/span&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=&#34;&gt;troubleshooting&lt;/span&gt; or you can ask me on &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==&#34;&gt;GitHub&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id=&#34;Quick-Start&#34;&gt;&lt;a href=&#34;#Quick-Start&#34; class=&#34;headerlink&#34; title=&#34;Quick Start&#34;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&#34;Create-a-new-post&#34;&gt;&lt;a href=&#34;#Create-a-new-post&#34; class=&#34;headerlink&#34; title=&#34;Create a new post&#34;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ hexo new &amp;quot;My New Post&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s&#34;&gt;Writing&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;Run-server&#34;&gt;&lt;a href=&#34;#Run-server&#34; class=&#34;headerlink&#34; title=&#34;Run server&#34;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ hexo server&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=&#34;&gt;Server&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;Generate-static-files&#34;&gt;&lt;a href=&#34;#Generate-static-files&#34; class=&#34;headerlink&#34; title=&#34;Generate static files&#34;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ hexo generate&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s&#34;&gt;Generating&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;Deploy-to-remote-sites&#34;&gt;&lt;a href=&#34;#Deploy-to-remote-sites&#34; class=&#34;headerlink&#34; title=&#34;Deploy to remote sites&#34;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ hexo deploy&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s&#34;&gt;Deployment&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://47.97.229.110/2021/02/22/2021%E6%96%B0%E5%B9%B4%E7%A5%9D%E6%84%BF/</guid>
            <title>2021新年祝愿</title>
            <link>http://47.97.229.110/2021/02/22/2021%E6%96%B0%E5%B9%B4%E7%A5%9D%E6%84%BF/</link>
            <category term="日常" scheme="http://47.97.229.110/categories/%E6%97%A5%E5%B8%B8/" />
            <pubDate>Mon, 22 Feb 2021 19:24:26 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;2021新年祝愿&#34;&gt;&lt;a href=&#34;#2021新年祝愿&#34; class=&#34;headerlink&#34; title=&#34;2021新年祝愿&#34;&gt;&lt;/a&gt;2021新年祝愿&lt;/h1&gt;&lt;h2 id=&#34;我总吧我的生命想成只有一日，忙完一日，第二天清晨，一睁眼，一个又一个崭新的世界创造在面前，而在这一天里我又有许多不同的事不同的人待我去遇见，这让我看见这个世界原来是如此美好。很高兴的是，我还有许多个这样的一天等我去遇见，但很不幸的事，这些时间又太短了。希望在2021的往后的每一天里，都能完成已经有意义的事情&#34;&gt;&lt;a href=&#34;#我总吧我的生命想成只有一日，忙完一日，第二天清晨，一睁眼，一个又一个崭新的世界创造在面前，而在这一天里我又有许多不同的事不同的人待我去遇见，这让我看见这个世界原来是如此美好。很高兴的是，我还有许多个这样的一天等我去遇见，但很不幸的事，这些时间又太短了。希望在2021的往后的每一天里，都能完成已经有意义的事情&#34; class=&#34;headerlink&#34; title=&#34;我总吧我的生命想成只有一日，忙完一日，第二天清晨，一睁眼，一个又一个崭新的世界创造在面前，而在这一天里我又有许多不同的事不同的人待我去遇见，这让我看见这个世界原来是如此美好。很高兴的是，我还有许多个这样的一天等我去遇见，但很不幸的事，这些时间又太短了。希望在2021的往后的每一天里，都能完成已经有意义的事情&#34;&gt;&lt;/a&gt;我总吧我的生命想成只有一日，忙完一日，第二天清晨，一睁眼，一个又一个崭新的世界创造在面前，而在这一天里我又有许多不同的事不同的人待我去遇见，这让我看见这个世界原来是如此美好。很高兴的是，我还有许多个这样的一天等我去遇见，但很不幸的事，这些时间又太短了。希望在2021的往后的每一天里，都能完成已经有意义的事情&lt;/h2&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://47.97.229.110/2021/02/18/%E5%8F%AA%E8%A6%81%E4%BD%A0%E9%9C%80%E8%A6%81%E6%88%91%EF%BC%8C%E6%88%91%E6%B0%B8%E8%BF%9C%E5%9C%A8%E4%BD%A0%E7%9C%8B%E7%9A%84%E5%88%B0%E7%9A%84%E5%9C%B0%E6%96%B9/</guid>
            <title>只要你需要我，我永远在你看的到的地方</title>
            <link>http://47.97.229.110/2021/02/18/%E5%8F%AA%E8%A6%81%E4%BD%A0%E9%9C%80%E8%A6%81%E6%88%91%EF%BC%8C%E6%88%91%E6%B0%B8%E8%BF%9C%E5%9C%A8%E4%BD%A0%E7%9C%8B%E7%9A%84%E5%88%B0%E7%9A%84%E5%9C%B0%E6%96%B9/</link>
            <category term="日常" scheme="http://47.97.229.110/categories/%E6%97%A5%E5%B8%B8/" />
            <pubDate>Thu, 18 Feb 2021 19:13:16 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;和铁哥们一起出去浪&#34;&gt;&lt;a href=&#34;#和铁哥们一起出去浪&#34; class=&#34;headerlink&#34; title=&#34;和铁哥们一起出去浪&#34;&gt;&lt;/a&gt;和铁哥们一起出去浪&lt;/h1&gt;&lt;h2 id=&#34;图片加载可以有一点慢，请耐心等待&#34;&gt;&lt;a href=&#34;#图片加载可以有一点慢，请耐心等待&#34; class=&#34;headerlink&#34; title=&#34;图片加载可以有一点慢，请耐心等待&#34;&gt;&lt;/a&gt;图片加载可以有一点慢，请耐心等待&lt;/h2&gt;&lt;p&gt;来时&lt;br&gt;&lt;img data-src=&#34;https://tenadmin.oss-cn-chengdu.aliyuncs.com/myfriend/IMG_1346.JPG&#34; alt=&#34;来时的路上&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;https://tenadmin.oss-cn-chengdu.aliyuncs.com/myfriend/IMG_1348.JPG&#34; alt=&#34;来时&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;钓鱼&#34;&gt;&lt;a href=&#34;#钓鱼&#34; class=&#34;headerlink&#34; title=&#34;钓鱼&#34;&gt;&lt;/a&gt;钓鱼&lt;/h1&gt;&lt;p&gt;&lt;img data-src=&#34;https://tenadmin.oss-cn-chengdu.aliyuncs.com/myfriend/IMG_1356.JPG&#34; alt=&#34;钓鱼&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;https://tenadmin.oss-cn-chengdu.aliyuncs.com/myfriend/IMG_1361.JPG&#34; alt=&#34;My friend&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;去乐山的路上&#34;&gt;&lt;a href=&#34;#去乐山的路上&#34; class=&#34;headerlink&#34; title=&#34;去乐山的路上&#34;&gt;&lt;/a&gt;去乐山的路上&lt;/h1&gt;&lt;p&gt;&lt;img data-src=&#34;https://tenadmin.oss-cn-chengdu.aliyuncs.com/myfriend/IMG_1449.JPG&#34; alt=&#34;去乐山的路上&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;逛文庙&#34;&gt;&lt;a href=&#34;#逛文庙&#34; class=&#34;headerlink&#34; title=&#34;逛文庙&#34;&gt;&lt;/a&gt;逛文庙&lt;/h1&gt;&lt;p&gt;&lt;img data-src=&#34;https://tenadmin.oss-cn-chengdu.aliyuncs.com/myfriend/IMG_1535.JPG&#34; alt=&#34;文庙&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;https://tenadmin.oss-cn-chengdu.aliyuncs.com/myfriend/IMG_1540.JPG&#34; alt=&#34;文庙&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;https://tenadmin.oss-cn-chengdu.aliyuncs.com/myfriend/IMG_1539.JPG&#34; alt=&#34;文庙&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;https://tenadmin.oss-cn-chengdu.aliyuncs.com/myfriend/IMG_1538.JPG&#34; alt=&#34;文庙&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;https://tenadmin.oss-cn-chengdu.aliyuncs.com/myfriend/IMG_1541.JPG&#34; alt=&#34;文庙&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;https://tenadmin.oss-cn-chengdu.aliyuncs.com/myfriend/IMG_1543.JPG&#34; alt=&#34;文庙&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;https://tenadmin.oss-cn-chengdu.aliyuncs.com/myfriend/IMG_1546.JPG&#34; alt=&#34;文庙&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;https://tenadmin.oss-cn-chengdu.aliyuncs.com/myfriend/IMG_1544.JPG&#34; alt=&#34;文庙&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;老霄顶看乐山大佛&#34;&gt;&lt;a href=&#34;#老霄顶看乐山大佛&#34; class=&#34;headerlink&#34; title=&#34;老霄顶看乐山大佛&#34;&gt;&lt;/a&gt;老霄顶看乐山大佛&lt;/h1&gt;&lt;p&gt;&lt;img data-src=&#34;https://tenadmin.oss-cn-chengdu.aliyuncs.com/myfriend/IMG_1433.JPG&#34; alt=&#34;乐山大佛&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;嘉州长卷&#34;&gt;&lt;a href=&#34;#嘉州长卷&#34; class=&#34;headerlink&#34; title=&#34;嘉州长卷&#34;&gt;&lt;/a&gt;嘉州长卷&lt;/h1&gt;&lt;p&gt;&lt;img data-src=&#34;https://tenadmin.oss-cn-chengdu.aliyuncs.com/myfriend/IMG_1558.JPG&#34; alt=&#34;嘉州长卷&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;https://tenadmin.oss-cn-chengdu.aliyuncs.com/myfriend/IMG_1455.JPG&#34; alt=&#34;嘉州长卷&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;https://tenadmin.oss-cn-chengdu.aliyuncs.com/myfriend/IMG_1460.jpg&#34; alt=&#34;嘉州长卷&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;https://tenadmin.oss-cn-chengdu.aliyuncs.com/myfriend/IMG_1573.JPG&#34; alt=&#34;嘉州长卷&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;https://tenadmin.oss-cn-chengdu.aliyuncs.com/myfriend/IMG_1566.JPG&#34; alt=&#34;嘉州长卷&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;https://tenadmin.oss-cn-chengdu.aliyuncs.com/myfriend/IMG_1467.JPG&#34; alt=&#34;嘉州长卷&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;https://tenadmin.oss-cn-chengdu.aliyuncs.com/myfriend/IMG_1582.JPG&#34; alt=&#34;嘉州长卷&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;https://tenadmin.oss-cn-chengdu.aliyuncs.com/myfriend/IMG_1562.JPG&#34; alt=&#34;嘉州长卷&#34;&gt;&lt;br&gt;！&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90ZW5hZG1pbi5vc3MtY24tY2hlbmdkdS5hbGl5dW5jcy5jb20vbXlmcmllbmQvSU1HXzE0NjYuSlBH&#34;&gt;嘉州长卷&lt;/span&gt;&lt;br&gt;&lt;img data-src=&#34;https://tenadmin.oss-cn-chengdu.aliyuncs.com/myfriend/IMG_1472.JPG&#34; alt=&#34;嘉州长卷&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;https://tenadmin.oss-cn-chengdu.aliyuncs.com/myfriend/IMG_1464.JPG&#34; alt=&#34;嘉州长卷&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;回去的路上&#34;&gt;&lt;a href=&#34;#回去的路上&#34; class=&#34;headerlink&#34; title=&#34;回去的路上&#34;&gt;&lt;/a&gt;回去的路上&lt;/h1&gt;&lt;p&gt;&lt;img data-src=&#34;https://tenadmin.oss-cn-chengdu.aliyuncs.com/myfriend/IMG_1437.JPG&#34; alt=&#34;路上&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;放风筝&#34;&gt;&lt;a href=&#34;#放风筝&#34; class=&#34;headerlink&#34; title=&#34;放风筝&#34;&gt;&lt;/a&gt;放风筝&lt;/h1&gt;&lt;p&gt;第一次飞起来hhh&lt;br&gt;&lt;img data-src=&#34;https://tenadmin.oss-cn-chengdu.aliyuncs.com/myfriend/IMG_1523.JPG&#34; alt=&#34;放风筝&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;https://tenadmin.oss-cn-chengdu.aliyuncs.com/myfriend/IMG_1521.JPG&#34; alt=&#34;放风筝&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;https://tenadmin.oss-cn-chengdu.aliyuncs.com/myfriend/IMG_1511.JPG&#34; alt=&#34;放风筝&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;儿时回忆&#34;&gt;&lt;a href=&#34;#儿时回忆&#34; class=&#34;headerlink&#34; title=&#34;儿时回忆&#34;&gt;&lt;/a&gt;儿时回忆&lt;/h1&gt;&lt;p&gt;&lt;img data-src=&#34;https://tenadmin.oss-cn-chengdu.aliyuncs.com/myfriend/IMG_1447.JPG&#34; alt=&#34;回忆&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;https://tenadmin.oss-cn-chengdu.aliyuncs.com/myfriend/IMG_1551.JPG&#34; alt=&#34;回忆&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;回家最后一张&#34;&gt;&lt;a href=&#34;#回家最后一张&#34; class=&#34;headerlink&#34; title=&#34;回家最后一张&#34;&gt;&lt;/a&gt;回家最后一张&lt;/h1&gt;&lt;p&gt;&lt;img data-src=&#34;https://tenadmin.oss-cn-chengdu.aliyuncs.com/myfriend/IMG_1533.jpg&#34; alt=&#34;回忆&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;See-you&#34;&gt;&lt;a href=&#34;#See-you&#34; class=&#34;headerlink&#34; title=&#34;See you!&#34;&gt;&lt;/a&gt;See you!&lt;/h2&gt;&lt;p&gt;今日一别，又不知何时才能相见&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://47.97.229.110/2021/01/29/python-1-day/</guid>
            <title>python_1_day</title>
            <link>http://47.97.229.110/2021/01/29/python-1-day/</link>
            <category term="Python" scheme="http://47.97.229.110/categories/Python/" />
            <pubDate>Fri, 29 Jan 2021 21:39:15 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;Python入门(上)&lt;br&gt;简介&lt;/p&gt;
&lt;p&gt;变量、运算符与数据类型&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;注释&lt;/li&gt;
&lt;li&gt;运算符&lt;/li&gt;
&lt;li&gt;变量和赋值&lt;/li&gt;
&lt;li&gt;数据类型与转换&lt;/li&gt;
&lt;li&gt;print()函数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;位运算&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;原码、反码和补码&lt;/li&gt;
&lt;li&gt;按位运算&lt;/li&gt;
&lt;li&gt;利用位运算实现快速计算&lt;/li&gt;
&lt;li&gt;利用位运算实现整数集合&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;条件语句&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;if 语句&lt;/li&gt;
&lt;li&gt;if - else 语句&lt;/li&gt;
&lt;li&gt;if - elif - else 语句&lt;/li&gt;
&lt;li&gt;assert 关键词&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;循环语句&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;while 循环&lt;/li&gt;
&lt;li&gt;while - else 循环&lt;/li&gt;
&lt;li&gt;for 循环&lt;/li&gt;
&lt;li&gt;for - else 循环&lt;/li&gt;
&lt;li&gt;range() 函数&lt;/li&gt;
&lt;li&gt;enumerate()函数&lt;/li&gt;
&lt;li&gt;break 语句&lt;/li&gt;
&lt;li&gt;continue 语句&lt;/li&gt;
&lt;li&gt;pass 语句&lt;/li&gt;
&lt;li&gt;推导式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;异常处理&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Python 标准异常总结&lt;/li&gt;
&lt;li&gt;Python 标准警告总结&lt;/li&gt;
&lt;li&gt;try - except 语句&lt;/li&gt;
&lt;li&gt;try - except - finally 语句&lt;/li&gt;
&lt;li&gt;try - except - else 语句&lt;/li&gt;
&lt;li&gt;raise语句&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;简介&lt;br&gt;Python 是一种通用编程语言，其在科学计算和机器学习领域具有广泛的应用。如果我们打算利用 Python 来执行机器学习，那么对 Python 有一些基本的了解就是至关重要的。本 Python 入门系列体验就是为这样的初学者精心准备的。&lt;/p&gt;
&lt;p&gt;本实验包括以下内容：&lt;/p&gt;
&lt;p&gt;变量、运算符与数据类型&lt;br&gt;注释&lt;br&gt;运算符&lt;br&gt;变量和赋值&lt;br&gt;数据类型与转换&lt;br&gt;print() 函数&lt;br&gt;位运算&lt;br&gt;原码、反码和补码&lt;br&gt;按位非操作 ~&lt;br&gt;按位与操作 &amp;amp;&lt;br&gt;按位或操作 |&lt;br&gt;按位异或操作 ^&lt;br&gt;按位左移操作 &amp;lt;&amp;lt;&lt;br&gt;按位右移操作 &amp;gt;&amp;gt;&lt;br&gt;利用位运算实现快速计算&lt;br&gt;利用位运算实现整数集合&lt;br&gt;条件语句&lt;br&gt;if 语句&lt;br&gt;if - else 语句&lt;br&gt;if - elif - else 语句&lt;br&gt;assert 关键词&lt;br&gt;循环语句&lt;br&gt;while 循环&lt;br&gt;while - else 循环&lt;br&gt;for 循环&lt;br&gt;for - else 循环&lt;br&gt;range() 函数&lt;br&gt;enumerate()函数&lt;br&gt;break 语句&lt;br&gt;continue 语句&lt;br&gt;pass 语句&lt;br&gt;推导式&lt;br&gt;异常处理&lt;br&gt;Python 标准异常总结&lt;br&gt;Python 标准警告总结&lt;br&gt;try - except 语句&lt;br&gt;try - except - finally 语句&lt;br&gt;try - except - else 语句&lt;br&gt;raise语句&lt;br&gt;变量、运算符与数据类型&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;注释&lt;br&gt;在 Python 中，# 表示注释，作用于整行。&lt;br&gt;【例子】单行注释&lt;pre&gt;&lt;code class=&#34;pypthon&#34;&gt;# 这是一个注释
print(&amp;quot;Hello world&amp;quot;)
​
# Hello world&lt;/code&gt;&lt;/pre&gt;
Hello world&lt;br&gt;‘’’ ‘’’ 或者 “”” “”” 表示区间注释，在三引号之间的所有内容被注释&lt;br&gt;【例子】多行注释&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
这是多行注释，用三个单引号
这是多行注释，用三个单引号
这是多行注释，用三个单引号
&amp;#39;&amp;#39;&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;print(“Hello china”) &lt;/p&gt;
&lt;h1 id=&#34;Hello-china0&#34;&gt;&lt;a href=&#34;#Hello-china0&#34; class=&#34;headerlink&#34; title=&#34;Hello china0&#34;&gt;&lt;/a&gt;Hello china0&lt;/h1&gt;&lt;p&gt;​&lt;br&gt;“””&lt;br&gt;这是多行注释，用三个双引号&lt;br&gt;这是多行注释，用三个双引号&lt;br&gt;这是多行注释，用三个双引号&lt;br&gt;“””&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print(&amp;quot;hello china&amp;quot;) 
# hello china
Hello china
hello china
【我是测试题1】请在下方代码块中打印(print)出 hello+你的姓名
如：print(&amp;quot;hello 老表&amp;quot;)

# 写下你的答案
​
2. 运算符
算术运算符
``` python
操作符    名称    示例
+    加    1 + 1
-    减    2 - 1
*    乘    3 * 4
/    除    3 / 4
//    整除（地板除）    3 // 4
%    取余    3 % 4
**    幂    2 ** 3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;print(1 + 1)  # 2
print(2 - 1)  # 1
print(3 * 4)  # 12
print(3 / 4)  # 0.75
print(3 // 4)  # 0
print(3 % 4)  # 3
print(2 ** 3)  # 8&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2&lt;br&gt;1&lt;br&gt;12&lt;br&gt;0.75&lt;br&gt;0&lt;br&gt;3&lt;br&gt;8&lt;br&gt;比较运算符&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;操作符    名称    示例
&amp;gt;    大于    2 &amp;gt; 1
&amp;gt;=    大于等于    2 &amp;gt;= 4
&amp;lt;    小于    1 &amp;lt; 2
&amp;lt;=    小于等于    5 &amp;lt;= 2
==    等于    3 == 4
!=    不等于    3 != 5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;print(2 &amp;gt; 1)  # True
print(2 &amp;gt;= 4)  # False
print(1 &amp;lt; 2)  # True
print(5 &amp;lt;= 2)  # False
print(3 == 4)  # False
print(3 != 5)  # True&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;True&lt;br&gt;False&lt;br&gt;True&lt;br&gt;False&lt;br&gt;False&lt;br&gt;True&lt;br&gt;逻辑运算符&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;操作符    名称    示例
and    与    (3 &amp;gt; 2) and (3 &amp;lt; 5)
or    或    (1 &amp;gt; 3) or (9 &amp;lt; 2)
not    非    not (2 &amp;gt; 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;print((3 &amp;gt; 2) and (3 &amp;lt; 5))  # True
print((1 &amp;gt; 3) or (9 &amp;lt; 2))  # False
print(not (2 &amp;gt; 1))  # False&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;True&lt;br&gt;False&lt;br&gt;False&lt;br&gt;位运算符&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;操作符    名称    示例
~    按位取反    ~4
&amp;amp;    按位与    4 &amp;amp; 5
`    `    按位或
^    按位异或    4 ^ 5
&amp;lt;&amp;lt;    左移    4 &amp;lt;&amp;lt; 2
&amp;gt;&amp;gt;    右移    4 &amp;gt;&amp;gt; 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】有关二进制的运算，参见“位运算”部分的讲解。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;print(bin(4))  # 0b100
print(bin(5))  # 0b101
print(bin(~4), ~4)  # -0b101 -5
print(bin(4 &amp;amp; 5), 4 &amp;amp; 5)  # 0b100 4
print(bin(4 | 5), 4 | 5)  # 0b101 5
print(bin(4 ^ 5), 4 ^ 5)  # 0b1 1
print(bin(4 &amp;lt;&amp;lt; 2), 4 &amp;lt;&amp;lt; 2)  # 0b10000 16
print(bin(4 &amp;gt;&amp;gt; 2), 4 &amp;gt;&amp;gt; 2)  # 0b1 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;0b100&lt;br&gt;0b101&lt;br&gt;-0b101 -5&lt;br&gt;0b100 4&lt;br&gt;0b101 5&lt;br&gt;0b1 1&lt;br&gt;0b10000 16&lt;br&gt;0b1 1&lt;br&gt;三元运算符&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;x, y = 4, 5
if x &amp;lt; y:
    small = x
else:
    small = y
​
print(small)  # 4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4&lt;br&gt;有了这个三元操作符的条件表达式，你可以使用一条语句来完成以上的条件判断和赋值操作。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;x, y = 4, 5
small = x if x &amp;lt; y else y
print(small)  # 4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4&lt;br&gt;其他运算符&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;操作符    名称    示例
in    存在    &amp;#39;A&amp;#39; in [&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;]
not in    不存在    &amp;#39;h&amp;#39; not in [&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;]
is    是    &amp;quot;hello&amp;quot; is &amp;quot;hello&amp;quot;
not is    不是    &amp;quot;hello&amp;quot; is not &amp;quot;hello&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;letters = [&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;]
if &amp;#39;A&amp;#39; in letters:
    print(&amp;#39;A&amp;#39; + &amp;#39; exists&amp;#39;)
if &amp;#39;h&amp;#39; not in letters:
    print(&amp;#39;h&amp;#39; + &amp;#39; not exists&amp;#39;)
​
# A exists
# h not exists&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A exists&lt;br&gt;h not exists&lt;br&gt;【例子】比较的两个变量均指向不可变类型。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = &amp;quot;hello&amp;quot;
b = &amp;quot;hello&amp;quot;
print(a is b, a == b)  # True True
print(a is not b, a != b)  # False False&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;True True&lt;br&gt;False False&lt;br&gt;【例子】比较的两个变量均指向可变类型。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = [&amp;quot;hello&amp;quot;]
b = [&amp;quot;hello&amp;quot;]
print(a is b, a == b)  # False True
print(a is not b, a != b)  # True False&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;False True&lt;br&gt;True False&lt;br&gt;注意：&lt;/p&gt;
&lt;p&gt;is, is not 对比的是两个变量的内存地址&lt;br&gt;==, != 对比的是两个变量的值&lt;br&gt;比较的两个变量，指向的都是地址不可变的类型（str等），那么is，is not 和 ==，！= 是完全等价的。&lt;br&gt;对比的两个变量，指向的是地址可变的类型（list，dict，tuple等），则两者是有区别的。&lt;br&gt;运算符的优先级&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;运算符    描述
**    指数（最高优先级）
~+-    按位翻转，一元加号和减号
* / % //    乘，除，取模和取整除）
+ -    加法减法
&amp;gt;&amp;gt; &amp;lt;&amp;lt;    右移，左移运算符
&amp;amp;    位‘AND’
^|    位运算符
&amp;lt;=&amp;lt;&amp;gt;&amp;gt;=    比较运算符
&amp;lt;&amp;gt;==!=    等于运算符
=%=/=//=-=+==*=    赋值运算符
is is not    身份运算符
in not in    成员运算符
not and or    逻辑运算符&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;print(-3 ** 2)  # -9
print(3 ** -2)  # 0.1111111111111111
print(1 &amp;lt;&amp;lt; 3 + 2 &amp;amp; 7)  # 0
print(-3 * 2 + 5 / -2 - 4)  # -12.5
print(3 &amp;lt; 4 and 4 &amp;lt; 5)  # True&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;-9&lt;br&gt;0.1111111111111111&lt;br&gt;0&lt;br&gt;-12.5&lt;br&gt;True&lt;br&gt;【我是测试题2】下面这段代码的运行结果是什么？&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;# 运行一下结果就出来了
a = &amp;quot;hello&amp;quot;
b = &amp;quot;hello&amp;quot;
print(a is b, a == b)&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;变量和赋值&lt;br&gt;在使用变量之前，需要对其先赋值。&lt;br&gt;变量名可以包括字母、数字、下划线、但变量名不能以数字开头。&lt;br&gt;Python 变量名是大小写敏感的，foo != Foo。&lt;br&gt;【例子】&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;teacher = &amp;quot;老马的程序人生&amp;quot;
print(teacher)  # 老马的程序人生&lt;/code&gt;&lt;/pre&gt;
老马的程序人生&lt;br&gt;【例子】&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;first = 2
second = 3
third = first + second
print(third)  # 5&lt;/code&gt;&lt;/pre&gt;
5&lt;br&gt;【例子】&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;myTeacher = &amp;quot;老马的程序人生&amp;quot;
yourTeacher = &amp;quot;小马的程序人生&amp;quot;
ourTeacher = myTeacher + &amp;#39;,&amp;#39; + yourTeacher
print(ourTeacher)  # 老马的程序人生,小马的程序人生&lt;/code&gt;&lt;/pre&gt;
老马的程序人生,小马的程序人生&lt;br&gt;【我是测试题3】运行下面一段代码看看结果是什么？&lt;br&gt;``` python&lt;h1 id=&#34;运行一下就好啦&#34;&gt;&lt;a href=&#34;#运行一下就好啦&#34; class=&#34;headerlink&#34; title=&#34;运行一下就好啦&#34;&gt;&lt;/a&gt;运行一下就好啦&lt;/h1&gt;set_1 = {“欢迎”, “学习”,”Python”}&lt;br&gt;print(set_1.pop())&lt;/li&gt;
&lt;li&gt;数据类型与转换&lt;br&gt;类型    名称    示例&lt;br&gt;int    整型 &amp;lt;class ‘int’&amp;gt;    -876, 10&lt;br&gt;float    浮点型&amp;lt;class ‘float’&amp;gt;    3.149, 11.11&lt;br&gt;bool    布尔型&amp;lt;class ‘bool’&amp;gt;    True, False&lt;pre&gt;&lt;code&gt;整型
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;【例子】通过 print() 可看出 a 的值，以及类 (class) 是int。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = 1031
print(a, type(a))
# 1031 &amp;lt;class &amp;#39;int&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1031 &amp;lt;class ‘int’&amp;gt;&lt;/p&gt;
&lt;p&gt;Python 里面万物皆对象（object），整型也不例外，只要是对象，就有相应的属性 （attributes） 和方法（methods）。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;b = dir(int)
print(b)
​
# [&amp;#39;__abs__&amp;#39;, &amp;#39;__add__&amp;#39;, &amp;#39;__and__&amp;#39;, &amp;#39;__bool__&amp;#39;, &amp;#39;__ceil__&amp;#39;, &amp;#39;__class__&amp;#39;,
# &amp;#39;__delattr__&amp;#39;, &amp;#39;__dir__&amp;#39;, &amp;#39;__divmod__&amp;#39;, &amp;#39;__doc__&amp;#39;, &amp;#39;__eq__&amp;#39;,
# &amp;#39;__float__&amp;#39;, &amp;#39;__floor__&amp;#39;, &amp;#39;__floordiv__&amp;#39;, &amp;#39;__format__&amp;#39;, &amp;#39;__ge__&amp;#39;,
# &amp;#39;__getattribute__&amp;#39;, &amp;#39;__getnewargs__&amp;#39;, &amp;#39;__gt__&amp;#39;, &amp;#39;__hash__&amp;#39;,
# &amp;#39;__index__&amp;#39;, &amp;#39;__init__&amp;#39;, &amp;#39;__init_subclass__&amp;#39;, &amp;#39;__int__&amp;#39;, &amp;#39;__invert__&amp;#39;,
# &amp;#39;__le__&amp;#39;, &amp;#39;__lshift__&amp;#39;, &amp;#39;__lt__&amp;#39;, &amp;#39;__mod__&amp;#39;, &amp;#39;__mul__&amp;#39;, &amp;#39;__ne__&amp;#39;,
# &amp;#39;__neg__&amp;#39;, &amp;#39;__new__&amp;#39;, &amp;#39;__or__&amp;#39;, &amp;#39;__pos__&amp;#39;, &amp;#39;__pow__&amp;#39;, &amp;#39;__radd__&amp;#39;,
# &amp;#39;__rand__&amp;#39;, &amp;#39;__rdivmod__&amp;#39;, &amp;#39;__reduce__&amp;#39;, &amp;#39;__reduce_ex__&amp;#39;, &amp;#39;__repr__&amp;#39;,
# &amp;#39;__rfloordiv__&amp;#39;, &amp;#39;__rlshift__&amp;#39;, &amp;#39;__rmod__&amp;#39;, &amp;#39;__rmul__&amp;#39;, &amp;#39;__ror__&amp;#39;,
# &amp;#39;__round__&amp;#39;, &amp;#39;__rpow__&amp;#39;, &amp;#39;__rrshift__&amp;#39;, &amp;#39;__rshift__&amp;#39;, &amp;#39;__rsub__&amp;#39;,
# &amp;#39;__rtruediv__&amp;#39;, &amp;#39;__rxor__&amp;#39;, &amp;#39;__setattr__&amp;#39;, &amp;#39;__sizeof__&amp;#39;, &amp;#39;__str__&amp;#39;,
# &amp;#39;__sub__&amp;#39;, &amp;#39;__subclasshook__&amp;#39;, &amp;#39;__truediv__&amp;#39;, &amp;#39;__trunc__&amp;#39;, &amp;#39;__xor__&amp;#39;,
# &amp;#39;bit_length&amp;#39;, &amp;#39;conjugate&amp;#39;, &amp;#39;denominator&amp;#39;, &amp;#39;from_bytes&amp;#39;, &amp;#39;imag&amp;#39;,
# &amp;#39;numerator&amp;#39;, &amp;#39;real&amp;#39;, &amp;#39;to_bytes&amp;#39;]
[&amp;#39;__abs__&amp;#39;, &amp;#39;__add__&amp;#39;, &amp;#39;__and__&amp;#39;, &amp;#39;__bool__&amp;#39;, &amp;#39;__ceil__&amp;#39;, &amp;#39;__class__&amp;#39;, &amp;#39;__delattr__&amp;#39;, &amp;#39;__dir__&amp;#39;, &amp;#39;__divmod__&amp;#39;, &amp;#39;__doc__&amp;#39;, &amp;#39;__eq__&amp;#39;, &amp;#39;__float__&amp;#39;, &amp;#39;__floor__&amp;#39;, &amp;#39;__floordiv__&amp;#39;, &amp;#39;__format__&amp;#39;, &amp;#39;__ge__&amp;#39;, &amp;#39;__getattribute__&amp;#39;, &amp;#39;__getnewargs__&amp;#39;, &amp;#39;__gt__&amp;#39;, &amp;#39;__hash__&amp;#39;, &amp;#39;__index__&amp;#39;, &amp;#39;__init__&amp;#39;, &amp;#39;__init_subclass__&amp;#39;, &amp;#39;__int__&amp;#39;, &amp;#39;__invert__&amp;#39;, &amp;#39;__le__&amp;#39;, &amp;#39;__lshift__&amp;#39;, &amp;#39;__lt__&amp;#39;, &amp;#39;__mod__&amp;#39;, &amp;#39;__mul__&amp;#39;, &amp;#39;__ne__&amp;#39;, &amp;#39;__neg__&amp;#39;, &amp;#39;__new__&amp;#39;, &amp;#39;__or__&amp;#39;, &amp;#39;__pos__&amp;#39;, &amp;#39;__pow__&amp;#39;, &amp;#39;__radd__&amp;#39;, &amp;#39;__rand__&amp;#39;, &amp;#39;__rdivmod__&amp;#39;, &amp;#39;__reduce__&amp;#39;, &amp;#39;__reduce_ex__&amp;#39;, &amp;#39;__repr__&amp;#39;, &amp;#39;__rfloordiv__&amp;#39;, &amp;#39;__rlshift__&amp;#39;, &amp;#39;__rmod__&amp;#39;, &amp;#39;__rmul__&amp;#39;, &amp;#39;__ror__&amp;#39;, &amp;#39;__round__&amp;#39;, &amp;#39;__rpow__&amp;#39;, &amp;#39;__rrshift__&amp;#39;, &amp;#39;__rshift__&amp;#39;, &amp;#39;__rsub__&amp;#39;, &amp;#39;__rtruediv__&amp;#39;, &amp;#39;__rxor__&amp;#39;, &amp;#39;__setattr__&amp;#39;, &amp;#39;__sizeof__&amp;#39;, &amp;#39;__str__&amp;#39;, &amp;#39;__sub__&amp;#39;, &amp;#39;__subclasshook__&amp;#39;, &amp;#39;__truediv__&amp;#39;, &amp;#39;__trunc__&amp;#39;, &amp;#39;__xor__&amp;#39;, &amp;#39;bit_length&amp;#39;, &amp;#39;conjugate&amp;#39;, &amp;#39;denominator&amp;#39;, &amp;#39;from_bytes&amp;#39;, &amp;#39;imag&amp;#39;, &amp;#39;numerator&amp;#39;, &amp;#39;real&amp;#39;, &amp;#39;to_bytes&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对它们有个大概印象就可以了，具体怎么用，需要哪些参数 （argument），还需要查文档。看个bit_length()的例子。&lt;/p&gt;
&lt;p&gt;【例子】找到一个整数的二进制表示，再返回其长度。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = 1031
print(bin(a))  # 0b10000000111
print(a.bit_length())  # 11&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;0b10000000111&lt;br&gt;11&lt;br&gt;浮点型&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;print(1, type(1))
# 1 &amp;lt;class &amp;#39;int&amp;#39;&amp;gt;
​
print(1., type(1.))
# 1.0 &amp;lt;class &amp;#39;float&amp;#39;&amp;gt;
​
a = 0.00000023
b = 2.3e-7
print(a)  # 2.3e-07
print(b)  # 2.3e-07&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1 &amp;lt;class ‘int’&amp;gt;&lt;br&gt;1.0 &amp;lt;class ‘float’&amp;gt;&lt;br&gt;2.3e-07&lt;br&gt;2.3e-07&lt;br&gt;有时候我们想保留浮点型的小数点后 n 位。可以用 decimal 包里的 Decimal 对象和 getcontext() 方法来实现。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;import decimal
from decimal import Decimal&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Python 里面有很多用途广泛的包 (package)，用什么你就引进 (import) 什么。包也是对象，也可以用上面提到的dir(decimal) 来看其属性和方法。&lt;/p&gt;
&lt;p&gt;【例子】getcontext() 显示了 Decimal 对象的默认精度值是 28 位 (prec=28)。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = decimal.getcontext()
print(a)
​
# Context(prec=28, rounding=ROUND_HALF_EVEN, Emin=-999999, Emax=999999,
# capitals=1, clamp=0, flags=[], 
# traps=[InvalidOperation, DivisionByZero, Overflow])
Context(prec=28, rounding=ROUND_HALF_EVEN, Emin=-999999, Emax=999999, capitals=1, clamp=0, flags=[], traps=[InvalidOperation, DivisionByZero, Overflow])
b = Decimal(1) / Decimal(3)
print(b)
​
# 0.3333333333333333333333333333&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;0.3333333333333333333333333333&lt;br&gt;【例子】使 1/3 保留 4 位，用 getcontext().prec 来调整精度。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;decimal.getcontext().prec = 4
c = Decimal(1) / Decimal(3)
print(c)
​
# 0.3333&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;0.3333&lt;br&gt;布尔型&lt;/p&gt;
&lt;p&gt;布尔 (boolean) 型变量只能取两个值，True 和 False。当把布尔型变量用在数字运算中，用 1 和 0 代表 True 和 False。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;print(True + True)  # 2
print(True + False)  # 1
print(True * False)  # 0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2&lt;br&gt;1&lt;br&gt;0&lt;br&gt;除了直接给变量赋值 True 和 False，还可以用 bool(X) 来创建变量，其中 X 可以是&lt;/p&gt;
&lt;p&gt;基本类型：整型、浮点型、布尔型&lt;br&gt;容器类型：字符串、元组、列表、字典和集合&lt;br&gt;【例子】bool 作用在基本类型变量：X 只要不是整型 0、浮点型 0.0，bool(X) 就是 True，其余就是 False。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;print(type(0), bool(0), bool(1))
# &amp;lt;class &amp;#39;int&amp;#39;&amp;gt; False True
​
print(type(10.31), bool(0.00), bool(10.31))
# &amp;lt;class &amp;#39;float&amp;#39;&amp;gt; False True
​
print(type(True), bool(False), bool(True))
# &amp;lt;class &amp;#39;bool&amp;#39;&amp;gt; False True&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;class ‘int’&amp;gt; False True&lt;br&gt;&amp;lt;class ‘float’&amp;gt; False True&lt;br&gt;&amp;lt;class ‘bool’&amp;gt; False True&lt;/p&gt;
&lt;p&gt;【例子】bool 作用在容器类型变量：X 只要不是空的变量，bool(X) 就是 True，其余就是 False。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;print(type(&amp;#39;&amp;#39;), bool(&amp;#39;&amp;#39;), bool(&amp;#39;python&amp;#39;))
# &amp;lt;class &amp;#39;str&amp;#39;&amp;gt; False True
​
print(type(()), bool(()), bool((10,)))
# &amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt; False True
​
print(type([]), bool([]), bool([1, 2]))
# &amp;lt;class &amp;#39;list&amp;#39;&amp;gt; False True
​
print(type(&amp;#123;&amp;#125;), bool(&amp;#123;&amp;#125;), bool(&amp;#123;&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 2&amp;#125;))
# &amp;lt;class &amp;#39;dict&amp;#39;&amp;gt; False True
​
print(type(set()), bool(set()), bool(&amp;#123;1, 2&amp;#125;))
# &amp;lt;class &amp;#39;set&amp;#39;&amp;gt; False True&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;class ‘str’&amp;gt; False True&lt;br&gt;&amp;lt;class ‘tuple’&amp;gt; False True&lt;br&gt;&amp;lt;class ‘list’&amp;gt; False True&lt;br&gt;&amp;lt;class ‘dict’&amp;gt; False True&lt;br&gt;&amp;lt;class ‘set’&amp;gt; False True&lt;/p&gt;
&lt;p&gt;确定bool(X) 的值是 True 还是 False，就看 X 是不是空，空的话就是 False，不空的话就是 True。&lt;/p&gt;
&lt;p&gt;对于数值变量，0, 0.0 都可认为是空的。&lt;br&gt;对于容器变量，里面没元素就是空的。&lt;br&gt;获取类型信息&lt;/p&gt;
&lt;p&gt;获取类型信息 type(object)&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;print(isinstance(1, int))  # True
print(isinstance(5.2, float))  # True
print(isinstance(True, bool))  # True
print(isinstance(&amp;#39;5.2&amp;#39;, str))  # True&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;True&lt;br&gt;True&lt;br&gt;True&lt;br&gt;True&lt;br&gt;注：&lt;/p&gt;
&lt;p&gt;type() 不会认为子类是一种父类类型，不考虑继承关系。&lt;br&gt;isinstance() 会认为子类是一种父类类型，考虑继承关系。&lt;br&gt;如果要判断两个类型是否相同推荐使用 isinstance()。&lt;/p&gt;
&lt;p&gt;类型转换&lt;/p&gt;
&lt;p&gt;转换为整型 int(x, base=10)&lt;br&gt;转换为字符串 str(object=’’)&lt;br&gt;转换为浮点型 float(x)&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;print(int(&amp;#39;520&amp;#39;))  # 520
print(int(520.52))  # 520
print(float(&amp;#39;520.52&amp;#39;))  # 520.52
print(float(520))  # 520.0
print(str(10 + 10))  # 20
print(str(10.1 + 5.2))  # 15.3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;520&lt;br&gt;520&lt;br&gt;520.52&lt;br&gt;520.0&lt;br&gt;20&lt;br&gt;15.3&lt;br&gt;5. print() 函数&lt;br&gt;print(*objects, sep=’ ‘, end=’\n’, file=sys.stdout, flush=False)&lt;br&gt;将对象以字符串表示的方式格式化输出到流文件对象file里。其中所有非关键字参数都按str()方式进行转换为字符串输出；&lt;br&gt;关键字参数sep是实现分隔符，比如多个参数输出时想要输出中间的分隔字符；&lt;br&gt;关键字参数end是输出结束时的字符，默认是换行符\n；&lt;br&gt;关键字参数file是定义流输出的文件，可以是标准的系统输出sys.stdout，也可以重定义为别的文件；&lt;br&gt;关键字参数flush是立即把内容输出到流文件，不作缓存。&lt;br&gt;【例子】没有参数时，每次输出后都会换行。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;shoplist = [&amp;#39;apple&amp;#39;, &amp;#39;mango&amp;#39;, &amp;#39;carrot&amp;#39;, &amp;#39;banana&amp;#39;]
print(&amp;quot;This is printed without &amp;#39;end&amp;#39;and &amp;#39;sep&amp;#39;.&amp;quot;)
for item in shoplist:
    print(item)
​
# This is printed without &amp;#39;end&amp;#39;and &amp;#39;sep&amp;#39;.
# apple
# mango
# carrot
# banana&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is printed without ‘end’and ‘sep’.&lt;br&gt;apple&lt;br&gt;mango&lt;br&gt;carrot&lt;br&gt;banana&lt;br&gt;【例子】每次输出结束都用end设置的参数&amp;amp;结尾，并没有默认换行。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;shoplist = [&amp;#39;apple&amp;#39;, &amp;#39;mango&amp;#39;, &amp;#39;carrot&amp;#39;, &amp;#39;banana&amp;#39;]
print(&amp;quot;This is printed with &amp;#39;end=&amp;#39;&amp;amp;&amp;#39;&amp;#39;.&amp;quot;)
for item in shoplist:
    print(item, end=&amp;#39;&amp;amp;&amp;#39;)
print(&amp;#39;hello world&amp;#39;)
​
# This is printed with &amp;#39;end=&amp;#39;&amp;amp;&amp;#39;&amp;#39;.
# apple&amp;amp;mango&amp;amp;carrot&amp;amp;banana&amp;amp;hello world&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is printed with ‘end=’&amp;amp;’’.&lt;br&gt;apple&amp;amp;mango&amp;amp;carrot&amp;amp;banana&amp;amp;hello world&lt;br&gt;【例子】item值与’another string’两个值之间用sep设置的参数&amp;amp;分割。由于end参数没有设置，因此默认是输出解释后换行，即end参数的默认值为\n。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;shoplist = [&amp;#39;apple&amp;#39;, &amp;#39;mango&amp;#39;, &amp;#39;carrot&amp;#39;, &amp;#39;banana&amp;#39;]
print(&amp;quot;This is printed with &amp;#39;sep=&amp;#39;&amp;amp;&amp;#39;&amp;#39;.&amp;quot;)
for item in shoplist:
    print(item, &amp;#39;another string&amp;#39;, sep=&amp;#39;&amp;amp;&amp;#39;)
​
# This is printed with &amp;#39;sep=&amp;#39;&amp;amp;&amp;#39;&amp;#39;.
# apple&amp;amp;another string
# mango&amp;amp;another string
# carrot&amp;amp;another string
# banana&amp;amp;another string&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is printed with ‘sep=’&amp;amp;’’.&lt;br&gt;apple&amp;amp;another string&lt;br&gt;mango&amp;amp;another string&lt;br&gt;carrot&amp;amp;another string&lt;br&gt;banana&amp;amp;another string&lt;br&gt;位运算&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;原码、反码和补码&lt;br&gt;二进制有三种不同的表示形式：原码、反码和补码，计算机内部使用补码来表示。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;原码：就是其二进制表示（注意，有一位符号位）。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;00 00 00 11 -&amp;gt; 3
10 00 00 11 -&amp;gt; -3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;反码：正数的反码就是原码，负数的反码是符号位不变，其余位取反（对应正数按位取反）。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;00 00 00 11 -&amp;gt; 3
11 11 11 00 -&amp;gt; -3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;补码：正数的补码就是原码，负数的补码是反码+1。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;00 00 00 11 -&amp;gt; 3
11 11 11 01 -&amp;gt; -3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;符号位：最高位为符号位，0表示正数，1表示负数。在位运算中符号位也参与运算。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;按位运算&lt;br&gt;按位非操作 ~&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;~ 1 = 0
~ 0 = 1&lt;/code&gt;&lt;/pre&gt;
~ 把num的补码中的 0 和 1 全部取反（0 变为 1，1 变为 0）有符号整数的符号位在 ~ 运算中同样会取反。&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;00 00 01 01 -&amp;gt; 5
~&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;11 11 10 10 -&amp;gt; -6&lt;/p&gt;
&lt;p&gt;11 11 10 11 -&amp;gt; -5&lt;br&gt;~&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;00 00 01 00 -&amp;gt; 4&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;按位与操作 &amp;amp;
``` python
1 &amp;amp; 1 = 1
1 &amp;amp; 0 = 0
0 &amp;amp; 1 = 0
0 &amp;amp; 0 = 0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;只有两个对应位都为 1 时才为 1&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;00 00 01 01 -&amp;gt; 5
&amp;amp;
00 00 01 10 -&amp;gt; 6
---
00 00 01 00 -&amp;gt; 4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;按位或操作 |&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;1 | 1 = 1
1 | 0 = 1
0 | 1 = 1
0 | 0 = 0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;只要两个对应位中有一个 1 时就为 1&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;00 00 01 01 -&amp;gt; 5
|
00 00 01 10 -&amp;gt; 6
---
00 00 01 11 -&amp;gt; 7&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;按位异或操作 ^&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;1 ^ 1 = 0
1 ^ 0 = 1
0 ^ 1 = 1
0 ^ 0 = 0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;只有两个对应位不同时才为 1&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;00 00 01 01 -&amp;gt; 5
^
00 00 01 10 -&amp;gt; 6
---
00 00 00 11 -&amp;gt; 3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异或操作的性质：满足交换律和结合律&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;A: 00 00 11 00
B: 00 00 01 11

A^B: 00 00 10 11
B^A: 00 00 10 11

A^A: 00 00 00 00
A^0: 00 00 11 00&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A^B^A: = A^A^B = B = 00 00 01 11&lt;br&gt;按位左移操作 &amp;lt;&amp;lt;&lt;br&gt;num &amp;lt;&amp;lt; i 将num的二进制表示向左移动i位所得的值。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;00 00 10 11 -&amp;gt; 11
11 &amp;lt;&amp;lt; 3
---
01 01 10 00 -&amp;gt; 88 &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;按位右移操作 &amp;gt;&amp;gt;&lt;br&gt;num &amp;gt;&amp;gt; i 将num的二进制表示向右移动i位所得的值。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;00 00 10 11 -&amp;gt; 11
11 &amp;gt;&amp;gt; 2
---
00 00 00 10 -&amp;gt; 2 &lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;利用位运算实现快速计算&lt;br&gt;通过 &amp;lt;&amp;lt;，&amp;gt;&amp;gt; 快速计算2的倍数问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;n &amp;lt;&amp;lt; 1 -&amp;gt; 计算 n&lt;em&gt;2&lt;br&gt;n &amp;gt;&amp;gt; 1 -&amp;gt; 计算 n/2，负奇数的运算不可用&lt;br&gt;n &amp;lt;&amp;lt; m -&amp;gt; 计算 n&lt;/em&gt;(2^m)，即乘以 2 的 m 次方&lt;br&gt;n &amp;gt;&amp;gt; m -&amp;gt; 计算 n/(2^m)，即除以 2 的 m 次方&lt;br&gt;1 &amp;lt;&amp;lt; n -&amp;gt; 2^n&lt;br&gt;通过 ^ 快速交换两个整数。 通过 ^ 快速交换两个整数。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a ^= b
b ^= a
a ^= b&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过 a &amp;amp; (-a) 快速获取a的最后为 1 位置的整数。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;00 00 01 01 -&amp;gt; 5
&amp;amp;
11 11 10 11 -&amp;gt; -5
---
00 00 00 01 -&amp;gt; 1

00 00 11 10 -&amp;gt; 14
&amp;amp;
11 11 00 10 -&amp;gt; -14
---
00 00 00 10 -&amp;gt; 2&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;利用位运算实现整数集合&lt;br&gt;一个数的二进制表示可以看作是一个集合（0 表示不在集合中，1 表示在集合中）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;比如集合 {1, 3, 4, 8}，可以表示成 01 00 01 10 10 而对应的位运算也就可以看作是对集合进行的操作。&lt;/p&gt;
&lt;p&gt;元素与集合的操作：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a | (1&amp;lt;&amp;lt;i)  -&amp;gt; 把 i 插入到集合中
a &amp;amp; ~(1&amp;lt;&amp;lt;i) -&amp;gt; 把 i 从集合中删除
a &amp;amp; (1&amp;lt;&amp;lt;i)  -&amp;gt; 判断 i 是否属于该集合（零不属于，非零属于）&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;集合之间的操作：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a 补   -&amp;gt; ~a
a 交 b -&amp;gt; a &amp;amp; b
a 并 b -&amp;gt; a | b
a 差 b -&amp;gt; a &amp;amp; (~b)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意：整数在内存中是以补码的形式存在的，输出自然也是按照补码输出。&lt;/p&gt;
&lt;p&gt;【例子】C#语言输出负数。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class Program
&amp;#123;
    static void Main(string[] args)
    &amp;#123;
        string s1 = Convert.ToString(-3, 2);
        Console.WriteLine(s1); 
        // 11111111111111111111111111111101

        string s2 = Convert.ToString(-3, 16);
        Console.WriteLine(s2); 
        // fffffffd
    &amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】 Python 的bin() 输出。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;print(bin(3))  # 0b11
print(bin(-3))  # -0b11
​
print(bin(-3 &amp;amp; 0xffffffff))  
# 0b11111111111111111111111111111101
​
print(bin(0xfffffffd))       
# 0b11111111111111111111111111111101
​
print(0xfffffffd)  # 4294967293&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;0b11&lt;br&gt;-0b11&lt;br&gt;0b11111111111111111111111111111101&lt;br&gt;0b11111111111111111111111111111101&lt;br&gt;4294967293&lt;br&gt;是不是很颠覆认知，我们从结果可以看出：&lt;/p&gt;
&lt;p&gt;Python中bin一个负数（十进制表示），输出的是它的原码的二进制表示加上个负号，巨坑。&lt;br&gt;Python中的整型是补码形式存储的。&lt;br&gt;Python中整型是不限制长度的不会超范围溢出。&lt;br&gt;所以为了获得负数（十进制表示）的补码，需要手动将其和十六进制数0xffffffff进行按位与操作，再交给bin()进行输出，得到的才是负数的补码表示。&lt;/p&gt;
&lt;p&gt;条件语句&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;if 语句&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;if expression:
 expr_true_suite&lt;/code&gt;&lt;/pre&gt;
if 语句的 expr_true_suite 代码块只有当条件表达式 expression 结果为真时才执行，否则将继续执行紧跟在该代码块后面的语句。&lt;br&gt;单个 if 语句中的 expression 条件表达式可以通过布尔操作符 and，or和not 实现多重条件判断。&lt;br&gt;【例子】&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;if 2 &amp;gt; 1 and not 2 &amp;gt; 3:
 print(&amp;#39;Correct Judgement!&amp;#39;)
​
# Correct Judgement!&lt;/code&gt;&lt;/pre&gt;
Correct Judgement!&lt;/li&gt;
&lt;li&gt;if - else 语句&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;if expression:
 expr_true_suite
else:
 expr_false_suite&lt;/code&gt;&lt;/pre&gt;
Python 提供与 if 搭配使用的 else，如果 if 语句的条件表达式结果布尔值为假，那么程序将执行 else 语句后的代码。&lt;br&gt;【例子】&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;temp = input(&amp;quot;猜一猜小姐姐想的是哪个数字？&amp;quot;)
guess = int(temp) # input 函数将接收的任何数据类型都默认为 str。
if guess == 666:
 print(&amp;quot;你太了解小姐姐的心思了！&amp;quot;)
 print(&amp;quot;哼，猜对也没有奖励！&amp;quot;)
else:
 print(&amp;quot;猜错了，小姐姐现在心里想的是666！&amp;quot;)
print(&amp;quot;游戏结束，不玩儿啦！&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
猜一猜小姐姐想的是哪个数字？666&lt;br&gt;你太了解小姐姐的心思了！&lt;br&gt;哼，猜对也没有奖励！&lt;br&gt;游戏结束，不玩儿啦！&lt;br&gt;if语句支持嵌套，即在一个if语句中嵌入另一个if语句，从而构成不同层次的选择结构。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;【例子】Python 使用缩进而不是大括号来标记代码块边界，因此要特别注意else的悬挂问题。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;hi = 6
if hi &amp;gt; 2:
    if hi &amp;gt; 7:
        print(&amp;#39;好棒!好棒!&amp;#39;)
else:
    print(&amp;#39;切~&amp;#39;)
​
# 无输出&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;temp = input(&amp;quot;猜一猜小姐姐想的是哪个数字？&amp;quot;)
guess = int(temp)
if guess &amp;gt; 8:
    print(&amp;quot;大了，大了&amp;quot;)
else:
    if guess == 8:
        print(&amp;quot;你太了解小姐姐的心思了！&amp;quot;)
        print(&amp;quot;哼，猜对也没有奖励！&amp;quot;)
    else:
        print(&amp;quot;小了，小了&amp;quot;)
print(&amp;quot;游戏结束，不玩儿啦！&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;猜一猜小姐姐想的是哪个数字？8&lt;br&gt;你太了解小姐姐的心思了！&lt;br&gt;哼，猜对也没有奖励！&lt;br&gt;游戏结束，不玩儿啦！&lt;br&gt;3. if - elif - else 语句&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;if expression1:
    expr1_true_suite
elif expression2:
    expr2_true_suite
    .
    .
elif expressionN:
    exprN_true_suite
else:
    expr_false_suite
    ```
elif 语句即为 else if，用来检查多个表达式是否为真，并在为真时执行特定代码块中的代码。
【例子】
``` python
temp = input(&amp;#39;请输入成绩:&amp;#39;)
source = int(temp)
if 100 &amp;gt;= source &amp;gt;= 90:
    print(&amp;#39;A&amp;#39;)
elif 90 &amp;gt; source &amp;gt;= 80:
    print(&amp;#39;B&amp;#39;)
elif 80 &amp;gt; source &amp;gt;= 60:
    print(&amp;#39;C&amp;#39;)
elif 60 &amp;gt; source &amp;gt;= 0:
    print(&amp;#39;D&amp;#39;)
else:
    print(&amp;#39;输入错误！&amp;#39;)
    ```
请输入成绩:99
A
4. assert 关键词
assert这个关键词我们称之为“断言”，当这个关键词后边的条件为 False 时，程序自动崩溃并抛出AssertionError的异常。
【例子】
``` python
my_list = [&amp;#39;lsgogroup&amp;#39;]
my_list.pop(0)
assert len(my_list) &amp;gt; 0
​
# AssertionError&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】在进行单元测试时，可以用来在程序中置入检查点，只有条件为 True 才能让程序正常工作。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;assert 3 &amp;gt; 7
​
# AssertionError&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;循环语句&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;while 循环&lt;br&gt;while语句最基本的形式包括一个位于顶部的布尔表达式，一个或多个属于while代码块的缩进语句。&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;while 布尔表达式:
 代码块&lt;/code&gt;&lt;/pre&gt;
while循环的代码块会一直循环执行，直到布尔表达式的值为布尔假。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果布尔表达式不带有&amp;lt;、&amp;gt;、==、！=、in、not in等运算符，仅仅给出数值之类的条件，也是可以的。当while后写入一个非零整数时，视为真值，执行循环体；写入0时，视为假值，不执行循环体。也可以写入str、list或任何序列，长度非零则视为真值，执行循环体；否则视为假值，不执行循环体。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;count = 0
while count &amp;lt; 3:
    temp = input(&amp;quot;猜一猜小姐姐想的是哪个数字？&amp;quot;)
    guess = int(temp)
    if guess &amp;gt; 8:
        print(&amp;quot;大了，大了&amp;quot;)
    else:
        if guess == 8:
            print(&amp;quot;你太了解小姐姐的心思了！&amp;quot;)
            print(&amp;quot;哼，猜对也没有奖励！&amp;quot;)
            count = 3
        else:
            print(&amp;quot;小了，小了&amp;quot;)
    count = count + 1
print(&amp;quot;游戏结束，不玩儿啦！&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;猜一猜小姐姐想的是哪个数字？8&lt;br&gt;你太了解小姐姐的心思了！&lt;br&gt;哼，猜对也没有奖励！&lt;br&gt;游戏结束，不玩儿啦！&lt;br&gt;【例子】布尔表达式返回0，循环终止。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;string = &amp;#39;abcd&amp;#39;
while string:
    print(string)
    string = string[1:]

​
# abcd
# bcd
# cd
# d&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;abcd&lt;br&gt;bcd&lt;br&gt;cd&lt;br&gt;d&lt;br&gt;2. while - else 循环&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;while 布尔表达式:
    代码块
else:
    代码块&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当while循环正常执行完的情况下，执行else输出，如果while循环中执行了跳出循环的语句，比如 break，将不执行else代码块的内容。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;count = 0
while count &amp;lt; 5:
    print(&amp;quot;%d is  less than 5&amp;quot; % count)
    count = count + 1
else:
    print(&amp;quot;%d is not less than 5&amp;quot; % count)

# 0 is  less than 5
# 1 is  less than 5
# 2 is  less than 5
# 3 is  less than 5
# 4 is  less than 5
# 5 is not less than 5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;0 is  less than 5&lt;br&gt;1 is  less than 5&lt;br&gt;2 is  less than 5&lt;br&gt;3 is  less than 5&lt;br&gt;4 is  less than 5&lt;br&gt;5 is not less than 5&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;count = 0
while count &amp;lt; 5:
    print(&amp;quot;%d is  less than 5&amp;quot; % count)
    count = 6
    break
else:
    print(&amp;quot;%d is not less than 5&amp;quot; % count)
​
# 0 is  less than 5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;0 is  less than 5&lt;br&gt;3. for 循环&lt;br&gt;for循环是迭代循环，在Python中相当于一个通用的序列迭代器，可以遍历任何有序序列，如str、list、tuple等，也可以遍历任何可迭代对象，如dict。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;for 迭代变量 in 可迭代对象:
    代码块
    ```
每次循环，迭代变量被设置为可迭代对象的当前元素，提供给代码块使用。

【例子】
``` python
for i in &amp;#39;ILoveLSGO&amp;#39;:
    print(i, end=&amp;#39; &amp;#39;)  # 不换行输出
​
# I L o v e L S G O&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I L o v e L S G O&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;member = [&amp;#39;张三&amp;#39;, &amp;#39;李四&amp;#39;, &amp;#39;刘德华&amp;#39;, &amp;#39;刘六&amp;#39;, &amp;#39;周润发&amp;#39;]
for each in member:
    print(each)
​
# 张三
# 李四
# 刘德华
# 刘六
# 周润发
​
for i in range(len(member)):
    print(member[i])
​
# 张三
# 李四
# 刘德华
# 刘六
# 周润发&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;张三&lt;br&gt;李四&lt;br&gt;刘德华&lt;br&gt;刘六&lt;br&gt;周润发&lt;br&gt;张三&lt;br&gt;李四&lt;br&gt;刘德华&lt;br&gt;刘六&lt;br&gt;周润发&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;dic = &amp;#123;&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 2, &amp;#39;c&amp;#39;: 3, &amp;#39;d&amp;#39;: 4&amp;#125;
​
for key, value in dic.items():
    print(key, value, sep=&amp;#39;:&amp;#39;, end=&amp;#39; &amp;#39;)

# a:1 b:2 c:3 d:4 &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;a:1 b:2 c:3 d:4&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;dic = &amp;#123;&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 2, &amp;#39;c&amp;#39;: 3, &amp;#39;d&amp;#39;: 4&amp;#125;
​
for key in dic.keys():
    print(key, end=&amp;#39; &amp;#39;)

# a b c d &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;a b c d&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;dic = &amp;#123;&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 2, &amp;#39;c&amp;#39;: 3, &amp;#39;d&amp;#39;: 4&amp;#125;
​
for value in dic.values():
    print(value, end=&amp;#39; &amp;#39;)

# 1 2 3 4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1 2 3 4&lt;br&gt;4. for - else 循环&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;for 迭代变量 in 可迭代对象:
    代码块
else:
    代码块
    ```
当for循环正常执行完的情况下，执行else输出，如果for循环中执行了跳出循环的语句，比如 break，将不执行else代码块的内容，与while - else语句一样。

【例子】
``` python
for num in range(10, 20):  # 迭代 10 到 20 之间的数字
    for i in range(2, num):  # 根据因子迭代
        if num % i == 0:  # 确定第一个因子
            j = num / i  # 计算第二个因子
            print(&amp;#39;%d 等于 %d * %d&amp;#39; % (num, i, j))
            break  # 跳出当前循环
    else:  # 循环的 else 部分
        print(num, &amp;#39;是一个质数&amp;#39;)
​
# 10 等于 2 * 5
# 11 是一个质数
# 12 等于 2 * 6
# 13 是一个质数
# 14 等于 2 * 7
# 15 等于 3 * 5
# 16 等于 2 * 8
# 17 是一个质数
# 18 等于 2 * 9
# 19 是一个质数&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;10 等于 2 * 5&lt;br&gt;11 是一个质数&lt;br&gt;12 等于 2 * 6&lt;br&gt;13 是一个质数&lt;br&gt;14 等于 2 * 7&lt;br&gt;15 等于 3 * 5&lt;br&gt;16 等于 2 * 8&lt;br&gt;17 是一个质数&lt;br&gt;18 等于 2 * 9&lt;br&gt;19 是一个质数&lt;br&gt;5. range() 函数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;range([start,] stop[, step=1])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个BIF（Built-in functions）有三个参数，其中用中括号括起来的两个表示这两个参数是可选的。&lt;br&gt;step=1 表示第三个参数的默认值是1。&lt;br&gt;range 这个BIF的作用是生成一个从start参数的值开始到stop参数的值结束的数字序列，该序列包含start的值但不包含stop的值。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;for i in range(2, 9):  # 不包含9
    print(i)
​
# 2
# 3
# 4
# 5
# 6
# 7
# 8&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;5&lt;br&gt;6&lt;br&gt;7&lt;br&gt;8&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;for i in range(1, 10, 2):
    print(i)
​
# 1
# 3
# 5
# 7
# 9&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1&lt;br&gt;3&lt;br&gt;5&lt;br&gt;7&lt;br&gt;9&lt;br&gt;6. enumerate()函数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;enumerate(sequence, [start=0])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sequence：一个序列、迭代器或其他支持迭代对象。&lt;br&gt;start：下标起始位置。&lt;br&gt;返回 enumerate(枚举) 对象&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;seasons = [&amp;#39;Spring&amp;#39;, &amp;#39;Summer&amp;#39;, &amp;#39;Fall&amp;#39;, &amp;#39;Winter&amp;#39;]
lst = list(enumerate(seasons))
print(lst)
# [(0, &amp;#39;Spring&amp;#39;), (1, &amp;#39;Summer&amp;#39;), (2, &amp;#39;Fall&amp;#39;), (3, &amp;#39;Winter&amp;#39;)]
lst = list(enumerate(seasons, start=1))  # 下标从 1 开始
print(lst)
# [(1, &amp;#39;Spring&amp;#39;), (2, &amp;#39;Summer&amp;#39;), (3, &amp;#39;Fall&amp;#39;), (4, &amp;#39;Winter&amp;#39;)]
[(0, &amp;#39;Spring&amp;#39;), (1, &amp;#39;Summer&amp;#39;), (2, &amp;#39;Fall&amp;#39;), (3, &amp;#39;Winter&amp;#39;)]
[(1, &amp;#39;Spring&amp;#39;), (2, &amp;#39;Summer&amp;#39;), (3, &amp;#39;Fall&amp;#39;), (4, &amp;#39;Winter&amp;#39;)]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;enumerate()与 for 循环的结合使用。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;for i, a in enumerate(A)
    do something with a  
    ```
用 enumerate(A) 不仅返回了 A 中的元素，还顺便给该元素一个索引值 (默认从 0 开始)。此外，用 enumerate(A, j) 还可以确定索引起始值为 j。

【例子】
``` python
languages = [&amp;#39;Python&amp;#39;, &amp;#39;R&amp;#39;, &amp;#39;Matlab&amp;#39;, &amp;#39;C++&amp;#39;]
for language in languages:
    print(&amp;#39;I love&amp;#39;, language)
print(&amp;#39;Done!&amp;#39;)
# I love Python
# I love R
# I love Matlab
# I love C++
# Done!
​
​
for i, language in enumerate(languages, 2):
    print(i, &amp;#39;I love&amp;#39;, language)
print(&amp;#39;Done!&amp;#39;)
# 2 I love Python
# 3 I love R
# 4 I love Matlab
# 5 I love C++
# Done!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I love Python&lt;br&gt;I love R&lt;br&gt;I love Matlab&lt;br&gt;I love C++&lt;br&gt;Done!&lt;br&gt;2 I love Python&lt;br&gt;3 I love R&lt;br&gt;4 I love Matlab&lt;br&gt;5 I love C++&lt;br&gt;Done!&lt;br&gt;7. break 语句&lt;br&gt;break语句可以跳出当前所在层的循环。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;import random
secret = random.randint(1, 10) #[1,10]之间的随机数
​
while True:
    temp = input(&amp;quot;猜一猜小姐姐想的是哪个数字？&amp;quot;)
    guess = int(temp)
    if guess &amp;gt; secret:
        print(&amp;quot;大了，大了&amp;quot;)
    else:
        if guess == secret:
            print(&amp;quot;你太了解小姐姐的心思了！&amp;quot;)
            print(&amp;quot;哼，猜对也没有奖励！&amp;quot;)
            break
        else:
            print(&amp;quot;小了，小了&amp;quot;)
print(&amp;quot;游戏结束，不玩儿啦！&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;猜一猜小姐姐想的是哪个数字？8&lt;br&gt;你太了解小姐姐的心思了！&lt;br&gt;哼，猜对也没有奖励！&lt;br&gt;游戏结束，不玩儿啦！&lt;br&gt;8. continue 语句&lt;br&gt;continue终止本轮循环并开始下一轮循环。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;for i in range(10):
    if i % 2 != 0:
        print(i)
        continue
    i += 2
    print(i)
​
# 2
# 1
# 4
# 3
# 6
# 5
# 8
# 7
# 10
# 9&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2&lt;br&gt;1&lt;br&gt;4&lt;br&gt;3&lt;br&gt;6&lt;br&gt;5&lt;br&gt;8&lt;br&gt;7&lt;br&gt;10&lt;br&gt;9&lt;br&gt;9. pass 语句&lt;br&gt;pass 语句的意思是“不做任何事”，如果你在需要有语句的地方不写任何语句，那么解释器会提示出错，而 pass 语句就是用来解决这些问题的。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;def a_func():

# SyntaxError: unexpected EOF while parsing&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;def a_func():
    pass
    ```
pass是空语句，不做任何操作，只起到占位的作用，其作用是为了保持程序结构的完整性。尽管pass语句不做任何操作，但如果暂时不确定要在一个位置放上什么样的代码，可以先放置一个pass语句，让代码可以正常运行。

10. 推导式
列表推导式

[ expr for value in collection [if condition] ]
【例子】
``` python
x = [-4, -2, 0, 2, 4]
y = [a * 2 for a in x]
print(y)
# [-8, -4, 0, 4, 8]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[-8, -4, 0, 4, 8]&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;x = [i ** 2 for i in range(1, 10)]
print(x)
# [1, 4, 9, 16, 25, 36, 49, 64, 81]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[1, 4, 9, 16, 25, 36, 49, 64, 81]&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;x = [(i, i ** 2) for i in range(6)]
print(x)
​
# [(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;x = [i for i in range(100) if (i % 2) != 0 and (i % 3) == 0]
print(x)
​
# [3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93, 99]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93, 99]&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = [(i, j) for i in range(0, 3) for j in range(0, 3)]
print(a)
​
# [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;x = [[i, j] for i in range(0, 3) for j in range(0, 3)]
print(x)
# [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]

x[0][0] = 10
print(x)
# [[10, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]&lt;br&gt;[[10, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = [(i, j) for i in range(0, 3) if i &amp;lt; 1 for j in range(0, 3) if j &amp;gt; 1]
print(a)
​
# [(0, 2)]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[(0, 2)]&lt;br&gt;元组推导式&lt;br&gt;` python&lt;br&gt;( expr for value in collection [if condition] )&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = (x for x in range(10))
print(a)
​
# &amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x0000025BE511CC48&amp;gt;
​
print(tuple(a))

​
# (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
&amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x0000014CEC2E28B8&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)&lt;br&gt;字典推导式&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;#123; key_expr: value_expr for value in collection [if condition] &amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;b = &amp;#123;i: i % 2 == 0 for i in range(10) if i % 3 == 0&amp;#125;
print(b)
# &amp;#123;0: True, 3: False, 6: True, 9: False&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;{0: True, 3: False, 6: True, 9: False}&lt;br&gt;集合推导式&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&amp;#123; expr for value in collection [if condition] &amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;c = &amp;#123;i for i in [1, 2, 3, 4, 5, 5, 6, 4, 3, 2, 1]&amp;#125;
print(c)
# &amp;#123;1, 2, 3, 4, 5, 6&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;{1, 2, 3, 4, 5, 6}&lt;br&gt;其它&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;next(iterator[, default]) Return the next item from the iterator. If default is given and the iterator is exhausted, it is returned instead of raising StopIteration.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;e = (i for i in range(10))
print(e)
# &amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x0000007A0B8D01B0&amp;gt;
​
print(next(e))  # 0
print(next(e))  # 1
​
for each in e:
    print(each, end=&amp;#39; &amp;#39;)
​
# 2 3 4 5 6 7 8 9
&amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x0000014CEC389C78&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;0&lt;br&gt;1&lt;br&gt;2 3 4 5 6 7 8 9&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;s = sum([i for i in range(101)])
print(s)  # 5050
s = sum((i for i in range(101)))
print(s)  # 5050&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;5050&lt;br&gt;5050&lt;br&gt;异常处理&lt;br&gt;异常就是运行期检测到的错误。计算机语言针对可能出现的错误定义了异常类型，某种错误引发对应的异常时，异常处理程序将被启动，从而恢复程序的正常运行。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Python 标准异常总结&lt;br&gt;BaseException：所有异常的 基类&lt;br&gt;Exception：常规异常的 基类&lt;br&gt;StandardError：所有的内建标准异常的基类&lt;br&gt;ArithmeticError：所有数值计算异常的基类&lt;br&gt;FloatingPointError：浮点计算异常&lt;br&gt;OverflowError：数值运算超出最大限制&lt;br&gt;ZeroDivisionError：除数为零&lt;br&gt;AssertionError：断言语句（assert）失败&lt;br&gt;AttributeError：尝试访问未知的对象属性&lt;br&gt;EOFError：没有内建输入，到达EOF标记&lt;br&gt;EnvironmentError：操作系统异常的基类&lt;br&gt;IOError：输入/输出操作失败&lt;br&gt;OSError：操作系统产生的异常（例如打开一个不存在的文件）&lt;br&gt;WindowsError：系统调用失败&lt;br&gt;ImportError：导入模块失败的时候&lt;br&gt;KeyboardInterrupt：用户中断执行&lt;br&gt;LookupError：无效数据查询的基类&lt;br&gt;IndexError：索引超出序列的范围&lt;br&gt;KeyError：字典中查找一个不存在的关键字&lt;br&gt;MemoryError：内存溢出（可通过删除对象释放内存）&lt;br&gt;NameError：尝试访问一个不存在的变量&lt;br&gt;UnboundLocalError：访问未初始化的本地变量&lt;br&gt;ReferenceError：弱引用试图访问已经垃圾回收了的对象&lt;br&gt;RuntimeError：一般的运行时异常&lt;br&gt;NotImplementedError：尚未实现的方法&lt;br&gt;SyntaxError：语法错误导致的异常&lt;br&gt;IndentationError：缩进错误导致的异常&lt;br&gt;TabError：Tab和空格混用&lt;br&gt;SystemError：一般的解释器系统异常&lt;br&gt;TypeError：不同类型间的无效操作&lt;br&gt;ValueError：传入无效的参数&lt;br&gt;UnicodeError：Unicode相关的异常&lt;br&gt;UnicodeDecodeError：Unicode解码时的异常&lt;br&gt;UnicodeEncodeError：Unicode编码错误导致的异常&lt;br&gt;UnicodeTranslateError：Unicode转换错误导致的异常&lt;br&gt;异常体系内部有层次关系，Python异常体系中的部分关系如下所示：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Image&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Python标准警告总结&lt;br&gt;Warning：警告的基类&lt;br&gt;DeprecationWarning：关于被弃用的特征的警告&lt;br&gt;FutureWarning：关于构造将来语义会有改变的警告&lt;br&gt;UserWarning：用户代码生成的警告&lt;br&gt;PendingDeprecationWarning：关于特性将会被废弃的警告&lt;br&gt;RuntimeWarning：可疑的运行时行为(runtime behavior)的警告&lt;br&gt;SyntaxWarning：可疑语法的警告&lt;br&gt;ImportWarning：用于在导入模块过程中触发的警告&lt;br&gt;UnicodeWarning：与Unicode相关的警告&lt;br&gt;BytesWarning：与字节或字节码相关的警告&lt;br&gt;ResourceWarning：与资源使用相关的警告&lt;/li&gt;
&lt;li&gt;try - except 语句&lt;br&gt;try:&lt;br&gt; 检测范围&lt;br&gt;except Exception[as reason]:&lt;br&gt; 出现异常后的处理代码&lt;br&gt;try 语句按照如下方式工作：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先，执行try子句（在关键字try和关键字except之间的语句）&lt;br&gt;如果没有异常发生，忽略except子句，try子句执行后结束。&lt;br&gt;如果在执行try子句的过程中发生了异常，那么try子句余下的部分将被忽略。如果异常的类型和except之后的名称相符，那么对应的except子句将被执行。最后执行try - except语句之后的代码。&lt;br&gt;如果一个异常没有与任何的except匹配，那么这个异常将会传递给上层的try中。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;try:
    f = open(&amp;#39;test.txt&amp;#39;)
    print(f.read())
    f.close()
except OSError:
    print(&amp;#39;打开文件出错&amp;#39;)
​
# 打开文件出错&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;打开文件出错&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;try:
    f = open(&amp;#39;test.txt&amp;#39;)
    print(f.read())
    f.close()
except OSError as error:
    print(&amp;#39;打开文件出错\n原因是：&amp;#39; + str(error))
​
# 打开文件出错
# 原因是：[Errno 2] No such file or directory: &amp;#39;test.txt&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;打开文件出错&lt;br&gt;原因是：[Errno 2] No such file or directory: ‘test.txt’&lt;br&gt;一个try语句可能包含多个except子句，分别来处理不同的特定的异常。最多只有一个分支会被执行。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;try:
    int(&amp;quot;abc&amp;quot;)
    s = 1 + &amp;#39;1&amp;#39;
    f = open(&amp;#39;test.txt&amp;#39;)
    print(f.read())
    f.close()
except OSError as error:
    print(&amp;#39;打开文件出错\n原因是：&amp;#39; + str(error))
except TypeError as error:
    print(&amp;#39;类型出错\n原因是：&amp;#39; + str(error))
except ValueError as error:
    print(&amp;#39;数值出错\n原因是：&amp;#39; + str(error))
​
# 数值出错
# 原因是：invalid literal for int() with base 10: &amp;#39;abc&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;数值出错&lt;br&gt;原因是：invalid literal for int() with base 10: ‘abc’&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;dict1 = &amp;#123;&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 2, &amp;#39;v&amp;#39;: 22&amp;#125;
try:
    x = dict1[&amp;#39;y&amp;#39;]
except LookupError:
    print(&amp;#39;查询错误&amp;#39;)
except KeyError:
    print(&amp;#39;键错误&amp;#39;)
else:
    print(x)
​
# 查询错误&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查询错误&lt;br&gt;try-except-else语句尝试查询不在dict中的键值对，从而引发了异常。这一异常准确地说应属于KeyError，但由于KeyError是LookupError的子类，且将LookupError置于KeyError之前，因此程序优先执行该except代码块。所以，使用多个except代码块时，必须坚持对其规范排序，要从最具针对性的异常到最通用的异常。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;dict1 = &amp;#123;&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 2, &amp;#39;v&amp;#39;: 22&amp;#125;
try:
    x = dict1[&amp;#39;y&amp;#39;]
except KeyError:
    print(&amp;#39;键错误&amp;#39;)
except LookupError:
    print(&amp;#39;查询错误&amp;#39;)
else:
    print(x)
​
# 键错误&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;键错误&lt;br&gt;【例子】一个 except 子句可以同时处理多个异常，这些异常将被放在一个括号里成为一个元组。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;try:
    s = 1 + &amp;#39;1&amp;#39;
    int(&amp;quot;abc&amp;quot;)
    f = open(&amp;#39;test.txt&amp;#39;)
    print(f.read())
    f.close()
except (OSError, TypeError, ValueError) as error:
    print(&amp;#39;出错了！\n原因是：&amp;#39; + str(error))
​
# 出错了！
# 原因是：unsupported operand type(s) for +: &amp;#39;int&amp;#39; and &amp;#39;str&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;出错了！&lt;br&gt;原因是：unsupported operand type(s) for +: ‘int’ and ‘str’&lt;br&gt;4. try - except - finally 语句&lt;br&gt;try: 检测范围 except Exception[as reason]: 出现异常后的处理代码 finally: 无论如何都会被执行的代码&lt;/p&gt;
&lt;p&gt;不管try子句里面有没有发生异常，finally子句都会执行。&lt;/p&gt;
&lt;p&gt;【例子】如果一个异常在try子句里被抛出，而又没有任何的except把它截住，那么这个异常会在finally子句执行后被抛出。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;def divide(x, y):
    try:
        result = x / y
        print(&amp;quot;result is&amp;quot;, result)
    except ZeroDivisionError:
        print(&amp;quot;division by zero!&amp;quot;)
    finally:
        print(&amp;quot;executing finally clause&amp;quot;)
​
​
divide(2, 1)
# result is 2.0
# executing finally clause
divide(2, 0)
# division by zero!
# executing finally clause
divide(&amp;quot;2&amp;quot;, &amp;quot;1&amp;quot;)
# executing finally clause
# TypeError: unsupported operand type(s) for /: &amp;#39;str&amp;#39; and &amp;#39;str&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;result is 2.0&lt;br&gt;executing finally clause&lt;br&gt;division by zero!&lt;br&gt;executing finally clause&lt;br&gt;5. try - except - else 语句&lt;br&gt;如果在try子句执行时没有发生异常，Python将执行else语句后的语句。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;try:
    检测范围
except:
    出现异常后的处理代码
else:
    如果没有异常执行这块代码
    ```
使用except而不带任何异常类型，这不是一个很好的方式，我们不能通过该程序识别出具体的异常信息，因为它捕获所有的异常。

try: 检测范围 except(Exception1[, Exception2[,...ExceptionN]]]): 发生以上多个异常中的一个，执行这块代码 else: 如果没有异常执行这块代码

【例子】
``` python
try:
    fh = open(&amp;quot;testfile.txt&amp;quot;, &amp;quot;w&amp;quot;)
    fh.write(&amp;quot;这是一个测试文件，用于测试异常!!&amp;quot;)
except IOError:
    print(&amp;quot;Error: 没有找到文件或读取文件失败&amp;quot;)
else:
    print(&amp;quot;内容写入文件成功&amp;quot;)
    fh.close()
​
# 内容写入文件成功&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;内容写入文件成功&lt;br&gt;注意：else语句的存在必须以except语句的存在为前提，在没有except语句的try语句中使用else语句，会引发语法错误。&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;raise语句&lt;br&gt;Python 使用raise语句抛出一个指定的异常。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;try:
    raise NameError(&amp;#39;HiThere&amp;#39;)
except NameError:
    print(&amp;#39;An exception flew by!&amp;#39;)

# An exception flew by!
try:
    raise NameError(&amp;#39;HiThere&amp;#39;)
except NameError:
    print(&amp;#39;An exception flew by!&amp;#39;)

# An exception flew by!&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://47.97.229.110/2021/01/29/C++_1_day/</guid>
            <title>C++_1_day</title>
            <link>http://47.97.229.110/2021/01/29/C++_1_day/</link>
            <category term="C++" scheme="http://47.97.229.110/categories/C/" />
            <pubDate>Fri, 29 Jan 2021 21:39:01 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;C-基本框架&#34;&gt;&lt;a href=&#34;#C-基本框架&#34; class=&#34;headerlink&#34; title=&#34;C++基本框架&#34;&gt;&lt;/a&gt;C++基本框架&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;C++&#34;&gt;#included &amp;lt;iostream&amp;gt;
using namespace std;
int main()
&amp;#123;

  return 0;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;include-这个是C-的头文件，里面包含了许多C-的函数&#34;&gt;&lt;a href=&#34;#include-这个是C-的头文件，里面包含了许多C-的函数&#34; class=&#34;headerlink&#34; title=&#34;#include  //这个是C++的头文件，里面包含了许多C++的函数&#34;&gt;&lt;/a&gt;#include &lt;iostream&gt; //这个是C++的头文件，里面包含了许多C++的函数&lt;/h3&gt;&lt;h3 id=&#34;using-namespace-std-声明std变量空间&#34;&gt;&lt;a href=&#34;#using-namespace-std-声明std变量空间&#34; class=&#34;headerlink&#34; title=&#34;using namespace std; //声明std变量空间&#34;&gt;&lt;/a&gt;using namespace std; //声明std变量空间&lt;/h3&gt;&lt;h3 id=&#34;int-main-main是一个函数，是windows会从里面读取要运行的内容&#34;&gt;&lt;a href=&#34;#int-main-main是一个函数，是windows会从里面读取要运行的内容&#34; class=&#34;headerlink&#34; title=&#34;int main() //main是一个函数，是windows会从里面读取要运行的内容&#34;&gt;&lt;/a&gt;int main() //main是一个函数，是windows会从里面读取要运行的内容&lt;/h3&gt;&lt;h3 id=&#34;return-0-这是一个反回值语句，用于标识返回值&#34;&gt;&lt;a href=&#34;#return-0-这是一个反回值语句，用于标识返回值&#34; class=&#34;headerlink&#34; title=&#34;return 0; //这是一个反回值语句，用于标识返回值&#34;&gt;&lt;/a&gt;return 0; //这是一个反回值语句，用于标识返回值&lt;/h3&gt;&lt;h1 id=&#34;常用语句&#34;&gt;&lt;a href=&#34;#常用语句&#34; class=&#34;headerlink&#34; title=&#34;常用语句&#34;&gt;&lt;/a&gt;常用语句&lt;/h1&gt;&lt;p&gt;##for语句&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;C++&#34;&gt;for(内容;条件;不符合执行内容)
&amp;#123;
  //内容为假时执行内容;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;while&#34;&gt;&lt;a href=&#34;#while&#34; class=&#34;headerlink&#34; title=&#34;while&#34;&gt;&lt;/a&gt;while&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;C++&#34;&gt;while(条件)
&amp;#123;
  //条件为真是执行内容;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;if-条件语句&#34;&gt;&lt;a href=&#34;#if-条件语句&#34; class=&#34;headerlink&#34; title=&#34;if 条件语句&#34;&gt;&lt;/a&gt;if 条件语句&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;if (/* condition */)
&amp;#123;
  /* code */
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;头文件&#34;&gt;&lt;a href=&#34;#头文件&#34; class=&#34;headerlink&#34; title=&#34;头文件&#34;&gt;&lt;/a&gt;头文件&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;C++&#34;&gt;#included &amp;lt;iostream&amp;gt;
#included &amp;lt;stdio.h&amp;gt;&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://47.97.229.110/2021/01/29/html_2day%20/</guid>
            <title>html_2_day</title>
            <link>http://47.97.229.110/2021/01/29/html_2day%20/</link>
            <category term="Html" scheme="http://47.97.229.110/categories/Html/" />
            <pubDate>Fri, 29 Jan 2021 21:39:01 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;列表&#34;&gt;&lt;a href=&#34;#列表&#34; class=&#34;headerlink&#34; title=&#34;列表&#34;&gt;&lt;/a&gt;列表&lt;/h1&gt;&lt;h1 id=&#34;列表的分类&#34;&gt;&lt;a href=&#34;#列表的分类&#34; class=&#34;headerlink&#34; title=&#34;列表的分类&#34;&gt;&lt;/a&gt;列表的分类&lt;/h1&gt;&lt;h2 id=&#34;列表可以分为有序列表、无序列表、定义列表、菜单、目录&#34;&gt;&lt;a href=&#34;#列表可以分为有序列表、无序列表、定义列表、菜单、目录&#34; class=&#34;headerlink&#34; title=&#34;列表可以分为有序列表、无序列表、定义列表、菜单、目录&#34;&gt;&lt;/a&gt;列表可以分为有序列表、无序列表、定义列表、菜单、目录&lt;/h2&gt;&lt;h3 id=&#34;有序列表基本结构&#34;&gt;&lt;a href=&#34;#有序列表基本结构&#34; class=&#34;headerlink&#34; title=&#34;有序列表基本结构&#34;&gt;&lt;/a&gt;有序列表基本结构&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;Html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;标题&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;ol&amp;gt;
  &amp;lt;li&amp;gt;...&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;...&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;...&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ol是有序列表的标签，li 一个一个的列表&lt;br&gt;有序列表可以有些许自定义用type属性标记,还有起始值属性start放在ol后面&lt;br&gt;type值有：A、a、I、i   默认是1&lt;/p&gt;
&lt;h3 id=&#34;无序列表基本结构&#34;&gt;&lt;a href=&#34;#无序列表基本结构&#34; class=&#34;headerlink&#34; title=&#34;无序列表基本结构&#34;&gt;&lt;/a&gt;无序列表基本结构&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;Html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;标题&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;ul&amp;gt;
  &amp;lt;li&amp;gt;...&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;...&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;...&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ul是有序列表的标签，li一个一个的列表&lt;br&gt;有序列表和有序列表一样可以设置type值&lt;br&gt;type值有：disc（实心圆）、circle（空心圆）、square（实心方块）&lt;/p&gt;
&lt;h3 id=&#34;定义列表基本结构&#34;&gt;&lt;a href=&#34;#定义列表基本结构&#34; class=&#34;headerlink&#34; title=&#34;定义列表基本结构&#34;&gt;&lt;/a&gt;定义列表基本结构&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;Html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;标题&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;dl&amp;gt;
  &amp;lt;dt&amp;gt;概念一&amp;lt;dt&amp;gt;
  &amp;lt;dd&amp;gt;概念一的定义&amp;lt;/dd&amp;gt;
  &amp;lt;dt&amp;gt;概念二&amp;lt;dt&amp;gt;
  &amp;lt;dd&amp;gt;概念二的定义&amp;lt;/dd&amp;gt;
  &amp;lt;dt&amp;gt;概念三&amp;lt;dt&amp;gt;
  &amp;lt;dd&amp;gt;概念三的定义&amp;lt;/dd&amp;gt;
&amp;lt;/dl&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;dl是标记定义列表的标签，dt是一级标题，dd是二级标题&lt;/p&gt;
&lt;h3 id=&#34;目录基本结构&#34;&gt;&lt;a href=&#34;#目录基本结构&#34; class=&#34;headerlink&#34; title=&#34;目录基本结构&#34;&gt;&lt;/a&gt;目录基本结构&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;Html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;标题&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;dir&amp;gt;
  &amp;lt;li&amp;gt;...&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;...&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;...&amp;lt;/li&amp;gt;
&amp;lt;/dir&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;dir是标记目录的标签&lt;/p&gt;
&lt;h3 id=&#34;菜单基本结构&#34;&gt;&lt;a href=&#34;#菜单基本结构&#34; class=&#34;headerlink&#34; title=&#34;菜单基本结构&#34;&gt;&lt;/a&gt;菜单基本结构&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;Html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;标题&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;menu&amp;gt;
  &amp;lt;li&amp;gt;...&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;...&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;...&amp;lt;/li&amp;gt;
&amp;lt;/menu&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;menu是标记菜单的标签&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://47.97.229.110/2021/01/29/html_3day/</guid>
            <title>html_2_day</title>
            <link>http://47.97.229.110/2021/01/29/html_3day/</link>
            <category term="Html" scheme="http://47.97.229.110/categories/Html/" />
            <pubDate>Fri, 29 Jan 2021 21:39:01 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;超链接标记&#34;&gt;&lt;a href=&#34;#超链接标记&#34; class=&#34;headerlink&#34; title=&#34;超链接标记&#34;&gt;&lt;/a&gt;超链接标记&lt;/h1&gt;&lt;h2 id=&#34;超链接标记基本结构&#34;&gt;&lt;a href=&#34;#超链接标记基本结构&#34; class=&#34;headerlink&#34; title=&#34;超链接标记基本结构&#34;&gt;&lt;/a&gt;超链接标记基本结构&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;a href=&amp;quot;url&amp;quot; titile=标题 target=参数&amp;gt;name&amp;lt;/a&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;a是标记超链接的标签，href一般填url或标签，target为超链接的属性，name为标签名或图片&lt;br&gt;HTML 链接&lt;br&gt;HTML 链接是通过标签 a&amp;gt; 来定义的.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;a href=&amp;quot;https://www.runoob.com&amp;quot;&amp;gt;这是一个链接&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;1&#34;&gt;&lt;a href=&#34;#1&#34; class=&#34;headerlink&#34; title=&#34;1&#34;&gt;&lt;/a&gt;1&lt;/h3&gt;&lt;p&gt;HTML 链接 - target 属性&lt;br&gt;使用 target 属性，你可以定义被链接的文档在何处显示。&lt;/p&gt;
&lt;p&gt;下面的这行会在新窗口打开文档：&lt;/p&gt;
&lt;p&gt;实例&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;a href=&amp;quot;https://www.runoob.com/&amp;quot; target=&amp;quot;_blank&amp;quot; rel=&amp;quot;noopener noreferrer&amp;quot;&amp;gt;访问菜鸟教程!&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1&lt;br&gt;HTML 链接- id 属性&lt;br&gt;id属性可用于创建在一个HTML文档书签标记。&lt;/p&gt;
&lt;p&gt;提示: 书签是不以任何特殊的方式显示，在HTML文档中是不显示的，所以对于读者来说是隐藏的。&lt;/p&gt;
&lt;p&gt;HTML 图像&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;img src=&amp;quot;/images/logo.png&amp;quot; width=&amp;quot;258&amp;quot; height=&amp;quot;39&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1&lt;br&gt;HTML 图像- 图像标签（ img）和源属性src&lt;br&gt;在 HTML 中，图像由 标签定义。&lt;/p&gt;
&lt;p&gt;img 是空标签，意思是说，它只包含属性，并且没有闭合标签。&lt;/p&gt;
&lt;p&gt;要在页面上显示图像，你需要使用源属性（src）。src 指 “source”。源属性的值是图像的 URL 地址。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;img src=&amp;quot;url&amp;quot; alt=&amp;quot;some_text&amp;quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1&lt;br&gt;HTML 图像- Alt属性&lt;br&gt;alt 属性用来为图像定义一串预备的可替换的文本。&lt;/p&gt;
&lt;p&gt;替换文本属性的值是用户定义的。&lt;br&gt;在浏览器无法载入图像时，替换文本属性告诉读者她们失去的信息。此时，浏览器将显示这个替代性的文本而不是图像。为页面上的图像都加上替换文本属性是个好习惯，这样有助于更好的显示信息，并且对于那些使用纯文本浏览器的人来说是非常有用的。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;img src=&amp;quot;boat.gif&amp;quot; alt=&amp;quot;Big Boat&amp;quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1&lt;br&gt;HTML 图像- 设置图像的高度与宽度&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;img src=&amp;quot;pulpit.jpg&amp;quot; alt=&amp;quot;Pulpit rock&amp;quot; width=&amp;quot;304&amp;quot; height=&amp;quot;228&amp;quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1&lt;br&gt;假如某个 HTML 文件包含十个图像，那么为了正确显示这个页面，需要加载 11 个文件。加载图片是需要时间的，所以我们的建议是：慎用图片。&lt;br&gt;注意: 加载页面时，要注意插入页面图像的路径，如果不能正确设置图像的位置，浏览器无法加载图片，图像标签就会显示一个破碎的图片。&lt;/p&gt;
&lt;h1 id=&#34;表格&#34;&gt;&lt;a href=&#34;#表格&#34; class=&#34;headerlink&#34; title=&#34;表格&#34;&gt;&lt;/a&gt;表格&lt;/h1&gt;&lt;h3 id=&#34;表格的基本结构&#34;&gt;&lt;a href=&#34;#表格的基本结构&#34; class=&#34;headerlink&#34; title=&#34;表格的基本结构&#34;&gt;&lt;/a&gt;表格的基本结构&lt;/h3&gt;&lt;p&gt;栗子:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;myweb&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;table border=&amp;quot;1&amp;quot; align=&amp;quot;center&amp;quot;&amp;gt;
  &amp;lt;tr&amp;gt;
    &amp;lt;td&amp;gt;节次&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;星期一&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;星期二&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;星期三&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;星期四&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;星期五&amp;lt;/td&amp;gt;
  &amp;lt;/tr&amp;gt;
  &amp;lt;tr&amp;gt;
    &amp;lt;td&amp;gt;语文&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;语文&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;数学&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;数学&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;英语&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;英语&amp;lt;/td&amp;gt;
  &amp;lt;/tr&amp;gt;
    &amp;lt;tr&amp;gt;
    &amp;lt;td&amp;gt;体育&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;体育&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;计算机&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;计算机&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;德语&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;法语&amp;lt;/td&amp;gt;

&amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;table标记表格，td标记列，tr标记行&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://47.97.229.110/2021/01/29/html_1day/</guid>
            <title>html_1_day</title>
            <link>http://47.97.229.110/2021/01/29/html_1day/</link>
            <category term="Html" scheme="http://47.97.229.110/categories/Html/" />
            <pubDate>Fri, 29 Jan 2021 21:39:01 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Html&#34;&gt;&lt;a href=&#34;#Html&#34; class=&#34;headerlink&#34; title=&#34;Html&#34;&gt;&lt;/a&gt;Html&lt;/h1&gt;&lt;p&gt;Html 称为超文本标记语言，是一种编写超文本文档的简单标记语言。但这并不是编程语言&lt;/p&gt;
&lt;h1 id=&#34;Html两种常用风格&#34;&gt;&lt;a href=&#34;#Html两种常用风格&#34; class=&#34;headerlink&#34; title=&#34;Html两种常用风格&#34;&gt;&lt;/a&gt;Html两种常用风格&lt;/h1&gt;&lt;h3 id=&#34;容器型标签&#34;&gt;&lt;a href=&#34;#容器型标签&#34; class=&#34;headerlink&#34; title=&#34;容器型标签&#34;&gt;&lt;/a&gt;容器型标签&lt;/h3&gt;&lt;p&gt;大概意思就是前面一个标签标记开始，后面一个标签标记结束，内容放中间就叫容器型&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;Html&amp;gt;...&amp;lt;html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;单标签&#34;&gt;&lt;a href=&#34;#单标签&#34; class=&#34;headerlink&#34; title=&#34;单标签&#34;&gt;&lt;/a&gt;单标签&lt;/h3&gt;&lt;p&gt;单标签就是可以不用标记开始，可以直接放在需要使用的地方&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;p&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;Html-基本结构&#34;&gt;&lt;a href=&#34;#Html-基本结构&#34; class=&#34;headerlink&#34; title=&#34;Html 基本结构&#34;&gt;&lt;/a&gt;Html 基本结构&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;Html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;标题&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;html是标记这是一个html静态网页，head标签是用来标记一些需要引用的基本配置，里面包含的title是网页的名字，body里为网页的内容&lt;/p&gt;
&lt;h1 id=&#34;字体常用标签&#34;&gt;&lt;a href=&#34;#字体常用标签&#34; class=&#34;headerlink&#34; title=&#34;字体常用标签&#34;&gt;&lt;/a&gt;字体常用标签&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;!注释内容&amp;gt;   //注释标签
&amp;lt;br&amp;gt;         //换行标签
&amp;lt;p&amp;gt;...&amp;lt;/p&amp;gt;   //换段标记
&amp;lt;hr&amp;gt;         //水平线
&amp;lt;center&amp;gt;...&amp;lt;/center&amp;gt; //居中标记&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;字体标记&#34;&gt;&lt;a href=&#34;#字体标记&#34; class=&#34;headerlink&#34; title=&#34;字体标记&#34;&gt;&lt;/a&gt;字体标记&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;Html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;标题&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;font face=&amp;quot;宋体&amp;quot; size=1 color=&amp;quot;red&amp;quot;&amp;gt;文字&amp;lt;/font&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;font为字体标记用来修饰文字，face为font的属性用来修改字体，size用来修改大小，color用来修改文字的颜色&lt;/p&gt;
&lt;h3 id=&#34;修饰标签&#34;&gt;&lt;a href=&#34;#修饰标签&#34; class=&#34;headerlink&#34; title=&#34;修饰标签&#34;&gt;&lt;/a&gt;修饰标签&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;b&amp;gt;...&amp;lt;/b&amp;gt;  //字体加粗
&amp;lt;i&amp;gt;...&amp;lt;/i&amp;gt;  //字体倾斜
&amp;lt;u&amp;gt;...&amp;lt;/u&amp;gt;  //字体下划线
&amp;lt;s&amp;gt;...&amp;lt;/s&amp;gt;  //字体删除线
&amp;lt;pre&amp;gt;...&amp;lt;/pre&amp;gt; //原样显示文本&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;特殊字符表&#34;&gt;&lt;a href=&#34;#特殊字符表&#34; class=&#34;headerlink&#34; title=&#34;特殊字符表&#34;&gt;&lt;/a&gt;特殊字符表&lt;/h1&gt;&lt;p&gt;&amp;lt; || &amp;lt; || &amp;amp; || &amp;amp; || || &amp;amp;copy&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;|| &amp;gt; ||空格|| &amp;nbsp; || || &amp;reg;&lt;/p&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://47.97.229.110/2021/01/29/SQL_1day/</guid>
            <title>SQL_1day</title>
            <link>http://47.97.229.110/2021/01/29/SQL_1day/</link>
            <category term="SQL" scheme="http://47.97.229.110/categories/SQL/" />
            <pubDate>Fri, 29 Jan 2021 21:39:01 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://47.97.229.110/2021/01/29/SQL/</guid>
            <title>SQL_1day</title>
            <link>http://47.97.229.110/2021/01/29/SQL/</link>
            <category term="数据库" scheme="http://47.97.229.110/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/" />
            <pubDate>Fri, 29 Jan 2021 21:39:01 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;SQL&#34;&gt;&lt;a href=&#34;#SQL&#34; class=&#34;headerlink&#34; title=&#34;SQL&#34;&gt;&lt;/a&gt;SQL&lt;/h1&gt;&lt;p&gt;SQL是数据库查询的终极模式，以代码的形式输入参数，是目前所有数据库的通用语言&lt;br&gt;常用的SQL查询有操作查询&lt;/p&gt;
&lt;h1 id=&#34;操作查询&#34;&gt;&lt;a href=&#34;#操作查询&#34; class=&#34;headerlink&#34; title=&#34;操作查询&#34;&gt;&lt;/a&gt;操作查询&lt;/h1&gt;&lt;p&gt;操作查询有四的分别为：生成表查询，追加查询，更新查询，删除查询&lt;/p&gt;
&lt;h1 id=&#34;SQL的基本结构&#34;&gt;&lt;a href=&#34;#SQL的基本结构&#34; class=&#34;headerlink&#34; title=&#34;SQL的基本结构&#34;&gt;&lt;/a&gt;SQL的基本结构&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;SQL&#34;&gt;select &amp;lt;字段名&amp;gt;
from &amp;lt;表名&amp;gt;
where &amp;lt;条件表达式&amp;gt;
group by &amp;lt;分组条件&amp;gt;
order by &amp;lt;排序字段&amp;gt; ASC||DESC&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;order 为排序关键字，默认升序，升序为ASC ,降序为DESC &lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://47.97.229.110/2021/01/29/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0_2-day/</guid>
            <title>深度学习_2_day</title>
            <link>http://47.97.229.110/2021/01/29/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0_2-day/</link>
            <category term="人工智能" scheme="http://47.97.229.110/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/" />
            <pubDate>Fri, 29 Jan 2021 21:39:01 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;基于人脸的常见表情识别(1)——深度学习基础知识&lt;br&gt;神经网络&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;感知机&lt;/li&gt;
&lt;li&gt;多层感知机与反向传播&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;卷积神经网络&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;全连接神经网络的2大缺陷&lt;/li&gt;
&lt;li&gt;卷积神经网络的崛起&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;卷积神经网络的基本网络层&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;什么是卷积？&lt;/li&gt;
&lt;li&gt;填充（Padding）&lt;/li&gt;
&lt;li&gt;步长（Stride）&lt;/li&gt;
&lt;li&gt;池化&lt;/li&gt;
&lt;li&gt;卷积和池化输出尺寸计算&lt;/li&gt;
&lt;li&gt;为什么要用卷积来学习呢？&lt;/li&gt;
&lt;li&gt;卷积神经网络的优势在哪？&lt;br&gt;本训练营以理论结合实战的方式，帮助大家从 0 完成一个人脸常见表情的识别，接下来是本训练营的理论部分。不要觉得理论枯燥哦，万丈高楼平地起，基础打牢了，后面学什么都容易，让我们开始吧~&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;神经网络&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;感知机&lt;br&gt;感知机（Perceptron）是 Frank Rosenblatt 在1957年提出的概念，其结构与MP模型类似，一般被视为最简单的人工神经网络，也作为二元线性分类器被广泛使用。通常情况下指单层的人工神经网络，以区别于多层感知机（Multilayer Perceptron）。尽管感知机结构简单，但能够学习并解决较复杂问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Image&lt;/p&gt;
&lt;p&gt;假设我们有一个n维输入的单层感知机，$x_1$ 至 $x_n$ 为 n 维输入向量的各个分量，$w_{1j}$ 至 $w_{nj}$为各个输入分量连接到感知机的权量（或称权值），theta 为阈值，f 为激活函数（又称为激励函数或传递函数），o 为标量输出。理想的激活函数通常为阶跃函数或者sigmoid函数。感知机的输出是输入向量x与权重向量w求得内积后，经激活函数f所得到的标量。&lt;/p&gt;
&lt;p&gt;单层感知器类似一个逻辑回归模型，可以做线性分类任务，但是不能做更复杂的任务。第二次AI浪潮中马文·明斯基在其著作中证明了感知机本质上是一种线性模型，只能处理线性分类问题，就连最简单的 XOR（异或）问题都无法正确解决。作为人工智能领域的开创者之一，这一声明也直接或间接促使神经网络的研究陷入了近 20 年的停滞。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;多层感知机与反向传播&lt;br&gt;不过就算在低谷期，1974 年哈佛大学的 Paul Werbos 仍然证明增加一个网络层，利用反向传播算法可以搞定 XOR 问题。到了后来 Rummelhart，McClelland 以及 Hinton 在 1986 年正式在多层感知器 (MLP) 中使用 BP 算法，采用 Sigmoid 进行非线性映射，有效解决了非线性分类和学习的问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Image&lt;/p&gt;
&lt;p&gt;多层感知机（Multi-Layer Perceptron）是由单层感知机推广而来，最主要的特点是有多个神经元层。一般将 MLP 的第一层称为输入层，中间的层为隐藏层，最后一层为输出层。MLP 并没有规定隐藏层的数量，因此可以根据实际处理需求选择合适的隐藏层层数，且对于隐藏层和输出层中每层神经元的个数也没有限制。&lt;/p&gt;
&lt;p&gt;多层感知机的关键问题在于如何训练其中各层间的连接权值，方法有一些不过大家最熟知的就是反向传播BP算法了。&lt;/p&gt;
&lt;p&gt;反向传播算法的具体推导涉及大量的公式，因此我们就不写了，大家随便找一本书都能找到资料，勤快的可以自己推导一遍。&lt;/p&gt;
&lt;p&gt;这里给大家一个实际的案例来体会：&lt;/p&gt;
&lt;p&gt;Image&lt;/p&gt;
&lt;p&gt;输出为y，损失函数为E。&lt;/p&gt;
&lt;p&gt;$$ \begin{array}{l} y=h_{1} w_{h 1}+h_{2} w_{h 2}=x_{1} w_{11}+x_{2} w_{12}+x_{2} w_{21}+x_{2} w_{22} \ E=\frac{1}{2}(y-t)^{2} \end{array} $$&lt;/p&gt;
&lt;p&gt;假如某一时刻值如下：&lt;/p&gt;
&lt;p&gt;$$ \begin{array}{l} \mathrm{x}&lt;em&gt;{1}=1, \mathrm{x}&lt;/em&gt;{2}=-1, \mathrm{w}&lt;em&gt;{11}=0.1, \mathrm{w}&lt;/em&gt;{21}=-0.1, \mathrm{w}&lt;em&gt;{12}=-0.1 \ \mathrm{w}&lt;/em&gt;{22}=0.1, \mathrm{w}&lt;em&gt;{\mathrm{h} 1}=0.8, \mathrm{w}&lt;/em&gt;{\mathrm{h} 2}=0.9, \mathrm{t}=0 \end{array} $$&lt;/p&gt;
&lt;p&gt;$$ \begin{array}{l} h_{1}=w_{11} x_{1}+w_{12} x_{2}=0.2 \ h_{2}=w_{21} x_{1}+w_{22} x_{2}=-0.2 \ y=h_{1} w_{h 1}+h_{2} w_{h 2}=-0.02 \end{array} $$&lt;/p&gt;
&lt;p&gt;那么我们可以计算E对$W_{h1}$的误差传播值为：&lt;/p&gt;
&lt;p&gt;$$ \frac{\partial \mathrm{E}}{\partial w_{h 1}}=\frac{\partial \mathrm{E}}{\partial \mathrm{y}} \frac{\partial y}{\partial w_{h 1}}=(y-t) h_{1}=-0.004 $$&lt;/p&gt;
&lt;p&gt;下次更新$W_{h1}$这个参数的时候就可以采用：&lt;/p&gt;
&lt;p&gt;$$ w_{h 1}=w_{h 1}-\eta \frac{\partial E}{\partial w_{h 1}} $$&lt;/p&gt;
&lt;p&gt;η就是学习率了，原理就是这样，一层一层推导下去就行了。&lt;/p&gt;
&lt;p&gt;反向传播算法让多层感知机，或者说传统的全连接神经网络有了训练的手段，引发了神经网络的第二次热潮，虽然为期不长，毕竟当时算力和数据都很有限，但是全连接神经网络总算是正式起来了。&lt;/p&gt;
&lt;p&gt;卷积神经网络&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;全连接神经网络的2大缺陷&lt;br&gt;传统的BP神经网络在20世纪80年代左右流行，但是很快因为SVM等核方法的诞生而黯然失色。这是因为传统的BP神经网络有几个重大的缺陷。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先是原理上的缺陷：BP神经网络仍然是有监督的传统机器学习方法，遵循着以下思路。&lt;/p&gt;
&lt;p&gt;Image&lt;/p&gt;
&lt;p&gt;也就是说，不过是在最后面将SVM或者其他分类器换成神经网络，在大部分情况下其实没有什么优势，甚至增加了问题的复杂度。&lt;/p&gt;
&lt;p&gt;提取的特征虽然是研究者们经过反复实验证明有效的特征，但仍然会一定程度上丢失了图像中的结构信息，从而丢失了一些对旋转扭曲等的不变性。而且要求输入的大小是固定的。为了学习到如偏移等微小的变化，需要有足够多的参数和足够多丰富的样本，最终学习到的权重，很可能在不同的位置处还会有非常相似的权重。&lt;/p&gt;
&lt;p&gt;有人可能会说，直接把图像作为输入而不提取特征行不行？请接着往下看。&lt;/p&gt;
&lt;p&gt;再一个就是结构上的缺陷：参数巨多，丢失空间信息。&lt;br&gt;全连接神经网络从BP算法提出开始，发展于90年代，那时候的计算机属于CPU时代，根本就无法撑起海量参数的计算。&lt;/p&gt;
&lt;p&gt;如果一个隐藏层特征图像大小为100×100，输入层的特征图像大小为100×100，这意味着学习这一层需要100×100×100×100=$10^8$的参数。如果以32位的浮点数进行存储，就需要$4×10^8$的字节的存储量，约等于400MB的参数量。仅仅这样的一个网络层，其模型参数量已经超过了AlexNet网络的参数量，而100×100的特征图像分辨率，已经低于很多任务能够成功解决的下限。除了计算过程中需要存储的海量的参数，还有海量的计算，这些都超过了当时硬件的能力，因此大大限制了网络的大小，尤其是对于一些大的图像输入。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;卷积神经网络的崛起&lt;br&gt;不管是历史局限性也好，还是神经网络有种种毛病，总之80年代后的20年间它不是主流。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不过在上个世纪90年代研究神经网络的学者们没有停止，经典的诸如LeNet5这样的网络被提出。&lt;/p&gt;
&lt;p&gt;Image&lt;/p&gt;
&lt;p&gt;LeNet5，1999年由深度学习三巨头中LeCun， Bengi的提出，成功用于银行支票上的手写数字识别，最重要的两个概念（局部连接+池化）&lt;/p&gt;
&lt;p&gt;下面这个视频记录了1993年Yann LeCun展示的，用于文本识别的世界上第一个卷积网络，所有人都可以通过当时的视频，亲自深刻感受到，当今经典又伟大的CNN，是如何诞生的。&lt;/p&gt;
&lt;p&gt;为什么是卷积神经网络呢？首先自然是要知道什么是卷积神经网络。&lt;/p&gt;
&lt;p&gt;卷积神经网络的基本网络层&lt;br&gt;卷积神经网络：英文全称：Convolutional Neural Networks、简称：CNN&lt;/p&gt;
&lt;p&gt;CNN 主要包含卷积层、池化层和全连接层&lt;/p&gt;
&lt;p&gt;卷积层：用于对图像进行特征提取操作，其卷积核权重是共享权值的，对应的相关概念还包括步长，填充。&lt;br&gt;池化层：用于降低特征图大小，降低后续操作的计算量和参数量&lt;br&gt;全连接层：最终进行分类输出使用，本质就是多层感知机&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;什么是卷积？&lt;br&gt;卷积在工程和数学上有非常多的应用，在信号处理领域中，任意一个线性系统的输出，就是输入信号和系统激励函数的卷积。放到数字图像处理领域，卷积操作一般指图像领域的二维卷积。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Image&lt;/p&gt;
&lt;p&gt;一个二维卷积的案例如上，在图像上滑动，取与卷积核大小相等的区域，逐像素做乘法然后相加。 例如原始图像大小是5×5，卷积核大小是3×3。首先卷积核与原始图像左上角3×3对应位置的元素相乘求和，得到的数值作为结果矩阵第一行第一列的元素值，然后卷积核向右移动一个单位（即步长stride为1），与原始图像前三行第2、3、4列所对应位置的元素分别相乘并求和，得到的数值作为结果矩阵第一行第二列的元素值，以此类推。&lt;/p&gt;
&lt;p&gt;故卷积就是：一个核矩阵在一个原始矩阵上从上往下、从左往右扫描，每次扫描都得到一个结果，将所有结果组合到一起得到一个新的结果矩阵。 注意这里我们不区分卷积和互相关，它们的区别只在于权重算子是否进行了翻转。之所以不重视，是因为在机器学习中，卷积核是否翻转，并不影响算法学习。&lt;/p&gt;
&lt;p&gt;以下的代码可以帮助理解：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;import torch 
from torch import nn
​
def corr2d(X, K):  # X 是输入，K是卷积核
    h, w = K.shape  # 获取卷积核的大小
    Y = torch.zeros((X.shape[0] - h + 1, X.shape[1] - w + 1))
    for i in range(Y.shape[0]):
        for j in range(Y.shape[1]):
            Y[i, j] = (X[i: i + h, j: j + w] * K).sum()  # 累加
    return Y
​
X = torch.tensor([[0, 1, 2], [3, 4, 5], [6, 7, 8]]) # 模拟一个输入
K = torch.tensor([[0, 1], [2, 3]])                  # 模拟一个卷积核
corr2d(X, K)
tensor([[19., 25.],
        [37., 43.]])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下图就是上面程序的模拟图 Image&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;填充（Padding）&lt;br&gt;使卷积后图像分辨率不变，方便计算特征图尺寸的变化&lt;br&gt;弥补边界信息“丢失”&lt;br&gt;填充（padding）是指在输入高和宽的两侧填充元素（通常是0元素）。下图我们在原输入高和宽的两侧分别添加了值为0的元素，使得输入高和宽从3变成了5，并导致输出高和宽由2增加到4。下图阴影部分为第一个输出元素及其计算所使用的输入和核数组元素：0×0+0×1+0×2+0×3=0。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Image&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;步长（Stride）&lt;br&gt;卷积窗口从输入数组的最左上方开始，按从左往右、从上往下的顺序，依次在输入数组上滑动。我们将每次滑动的行数和列数称为步幅或步长（stride）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下图展示了在高上步幅为3、在宽上步幅为2的卷积运算。可以看到，输出第一列第二个元素时，卷积窗口向下滑动了3行，而在输出第一行第二个元素时卷积窗口向右滑动了2列。当卷积窗口在输入上再向右滑动2列时，由于输入元素无法填满窗口，无结果输出。下图阴影部分为输出元素及其计算所使用的输入和核数组元素：0×0+0×1+1×2+2×3=8、0×0+6×1+0×2+0×3=6。&lt;/p&gt;
&lt;p&gt;Image&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;池化&lt;br&gt;对图像进行下采样，降低图像分辨率。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;池化层的作用：使特征图变小，简化网络计算复杂度；压缩特征，提取主要特征&lt;/p&gt;
&lt;p&gt;常见的池化操作可以分为：最大池化（Max Pool）、平均池化（Avg Pool），示意图如下：&lt;/p&gt;
&lt;p&gt;Image&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;卷积和池化输出尺寸计算&lt;br&gt;假设输入图片的高和宽一致，卷积核的宽和高一致，那么输入图像的尺寸与输出图像的尺寸有如下关系：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其中，$F_{in}$ 是输入图像、k 是卷积核的大小、p 是图像填充的大小、s 是卷积核的步幅、$F_o$ 是输出、$\lfloor 6.6 \rfloor$ 是向下取整的意思，比如结果是 6.6，那么向下取整就是 6&lt;/p&gt;
&lt;p&gt;$$F_{o}=\left\lfloor\frac{F_{\text {in }}-k+2 p}{s}\right\rfloor+1$$&lt;/p&gt;
&lt;p&gt;Image&lt;/p&gt;
&lt;p&gt;除此之外，卷积神经网络还包括许多优化技术，大家可以参考相关资料。&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;为什么要用卷积来学习呢？&lt;br&gt;图像都是用方形矩阵来表达的，学习的本质就是要抽象出特征，以边缘检测为例。它就是识别数字图像中亮度变化明显的点，这些点连接起来往往是物体的边缘。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;传统的边缘检测常用的方法包括一阶和二阶导数法，本质上都是利用一个卷积核在原图上进行滑动，只是其中各个位置的系数不同，比如3×3的sobel算子计算x方向的梯度幅度，使用的就是下面的卷积核算子。&lt;/p&gt;
&lt;p&gt;Image&lt;/p&gt;
&lt;p&gt;如果要用sobel算子完成一次完整的边缘检测，就要同时检测x方向和y方向，然后进行融合。这就是两个通道的卷积，先用两个卷积核进行通道内的信息提取，再进行通道间的信息融合。 这就是卷积提取特征的本质，而所有基于卷积神经网络来学习的图像算法，都是通过不断的卷积来进行特征的抽象，直到实现网络的目标。&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;卷积神经网络的优势在哪？&lt;br&gt;前面说了全连接神经网络的原理和结构上的缺陷，而这正好是卷积的优势。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;学习原理上的改进。&lt;br&gt;卷积神经网络不再是有监督学习了，不需要从图像中提取特征，而是直接从原始图像数据进行学习，这样可以最大程度的防止信息在还没有进入网络之前就丢失。&lt;/p&gt;
&lt;p&gt;学习方式的改进。&lt;br&gt;前面说了全连接神经网络一层的结果是与上一层的节点全部连接的，100×100的图像，如果隐藏层也是同样大小（100×100个）的神经元，光是一层网络，就已经有 10^8 个参数。要优化和存储这样的参数量，是无法想象的，所以经典的神经网络，基本上隐藏层在一两层左右。而卷积神经网络某一层的结点，只与上一层的一个图像块相连。&lt;/p&gt;
&lt;p&gt;用于产生同一个图像中各个空间位置像素的卷积核是同一个，这就是所谓的权值共享。对于与全连接层同样多的隐藏层，假如每个神经元只和输入10×10的局部patch相连接，且卷积核移动步长为10，则参数为：100×100×10×10，降低了2个数量级。 又能更好的学习，参数又低，卷积神经网络当然是可以成功了。&lt;/p&gt;
&lt;p&gt;以上就是本训练营所有理论知识了，接下来将是项目实战部分，是不是迫不及待想要敲代码了&lt;/p&gt;
&lt;p&gt;– By：有三AI 团队&lt;/p&gt;
&lt;p&gt;聚焦于让大家能够系统性地完成AI各个领域所需的专业知识的学习，实现三人行必有AI，三人行必有我师的愿景。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://47.97.229.110/2021/01/29/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0_3-day/</guid>
            <title>深度学习_3_day</title>
            <link>http://47.97.229.110/2021/01/29/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0_3-day/</link>
            <category term="人工智能" scheme="http://47.97.229.110/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/" />
            <pubDate>Fri, 29 Jan 2021 21:39:01 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;基于人脸的常见表情识别——数据获取与整理&lt;br&gt;项目背景&lt;/p&gt;
&lt;p&gt;数据获取&lt;br&gt;2.1 数据爬取&lt;/p&gt;
&lt;p&gt;数据整理&lt;br&gt;3.1 图片格式统一&lt;br&gt;3.2 数据清洗&lt;br&gt;3.3 提取嘴唇区域&lt;/p&gt;
&lt;p&gt;该 Task 就是本训练营的实战部分了，这一部分我们会讲解如何获取数据集，并对数据集进行整理。&lt;/p&gt;
&lt;p&gt;这个 Task 会涉及到数据集等文件的下载，请运行以下代码下载相关文件，由于需要对下载的文件进行解压，所以速度会比较慢，请耐心等候。（大概需要 8 分钟左右）&lt;/p&gt;
&lt;p&gt;如果你不是第一次运行这个项目，那么就跳过以下代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;print(&amp;quot;****************下载文件中。。。&amp;quot;)
!wget http://tianchi-media.oss-cn-beijing.aliyuncs.com/dragonball/DL/other/data/Emotion_Recognition_File.zip
print(&amp;quot;****************下载完成。。。&amp;quot;)
print(&amp;quot;****************解压文件中。。。&amp;quot;)
!unzip -q -o ./Emotion_Recognition_File.zip -d Emotion_Recognition_File/
print(&amp;quot;****************解压完毕***************&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;为了帮助大家理解所下载的文件，这里将会做一个简单的说明&lt;/p&gt;
&lt;p&gt;所有下载的文件均在 Emotion_Recognition_File （表情识别的英文名称）文件夹下，以下对各个文件进行说明&lt;/p&gt;
&lt;p&gt;img_type_test：放置了不同后缀名的图片，在 3.1 图片格式统一 将会使用到&lt;br&gt;face_detect_model：放置了人脸检测所需要的模型，在 3.2 数据清洗、3.3 提取嘴唇区域 将会使用到&lt;br&gt;face_det_img：放置了一些包含人脸的图片和不包含人人脸的图片，在 3.2 数据清洗 将会使用到&lt;br&gt;mouth_det_img：放置了一些包含人脸的图片，在 3.3 提取嘴唇区域 将会使用到&lt;br&gt;train_val_data：放置了本训练营为各位读者准备的数据集，将会在下一个 Task 用到&lt;br&gt;test_img：放置了包含 4 种表情的图片各一张，将会在下一个 Task 用到，我们就是使用这个文件夹里的图片来展示我们的成果&lt;br&gt;项目背景&lt;br&gt;对于很多初⼊深度学习计算机视觉领域的朋友来说，当前开源资料⾮常多，但有时候难以适从，其中很多资料都没有包含完整的项⽬流程，⽽只是对某个流程的部分截取，对能⼒的锻炼不够。图像分类是整个计算机视觉领域中最基础的任务，也是最重要的任务之⼀，最适合拿来进⾏学习实践。为了让新⼿们能够⼀次性体验⼀个⼯业级别的图像分类任务的完整流程，本次我们选择带领⼤家完成⼀个对图片中⼈脸进⾏表情识别的任务。&lt;/p&gt;
&lt;p&gt;⼈脸表情识别(facial expression recognition, FER)作为⼈脸识别技术中的⼀个重要组成部分，近年来在⼈机交互、安全、机器⼈制造、⾃动化、医疗、通信和驾驶领域得到了⼴泛的关注，成为学术界和⼯业界的研究热点，是⼈脸属性分析的重点。&lt;/p&gt;
&lt;p&gt;数据获取&lt;br&gt;很多实际项⽬我们不会有现成的数据集，虽然可以通过开源数据集获取，但是我们还是要学会⾃⼰从零开始获取和整理。下⾯讲述如何准备好本次项⽬所需要的数据集，包括以下部分:&lt;/p&gt;
&lt;p&gt;学会使⽤爬⾍爬取图像。&lt;br&gt;对获得的图⽚数据进⾏整理，包括重命名，格式统⼀。&lt;br&gt;利⽤⼈脸检测算法删选出有⽤的样本，利⽤关键点检测算法裁剪出⽤于算法训练的嘴唇区域。&lt;br&gt;2.1 数据爬取&lt;br&gt;由于没有直接对应的开源数据集，或者开源数据集中的数据⽐较少，尤其是对于嘟嘴，⼤笑等类的数据。搜索引擎上有海量数据，所以我们可以从中爬取。下⾯开始讲述具体的步骤，我们的任务是⼀个表情分类任务，因此需要爬取相关图⽚，包括嘟嘴（pout），微笑（smile），⼤笑（openmouth）、无表情（none）等表情。&lt;/p&gt;
&lt;p&gt;当前有很多开源的爬虫项目，即使你不懂爬虫的知识，也能够很容易的爬取互联网的资源，下文整理了一些常见的爬虫项目，可以参考进行学习。 【杂谈】深度学习必备，各路免费爬虫一举拿下&lt;/p&gt;
&lt;p&gt;本项目使用的爬虫项目是：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3Njemhlbmd5YWJpbi9JbWFnZS1Eb3dubG9hZGVy&#34;&gt;https://github.com/sczhengyabin/Image-Downloader&lt;/span&gt; ，可以按要求爬取百度、Bing、Google 上的图片，提供了非常人性化的 GUI 方便操作，使用方法如下：&lt;/p&gt;
&lt;p&gt;下载爬虫工具&lt;/p&gt;
&lt;p&gt;图片无法加载时显示的文字&lt;br&gt;使用 python image_downloader_gui.py 调用GUI界面，配置好参数(关键词，路径，爬取数目等)，关键词可以直接在这里输入也可以选择从txt文件中选择。&lt;/p&gt;
&lt;p&gt;可以配置需要爬取的样本数目，这里一次爬了2000张，妥妥的3分钟搞定。&lt;/p&gt;
&lt;p&gt;该项目的 GUI 界面如下，我们尝试爬取“嘟嘴”的相关表情：&lt;/p&gt;
&lt;p&gt;图片无法加载时显示的文字&lt;br&gt;爬取图⽚结果如下：&lt;/p&gt;
&lt;p&gt;图片无法加载时显示的文字&lt;br&gt;⾃此就可以获得数千张图像，然后进⾏第⼆步，数据整理。&lt;/p&gt;
&lt;p&gt;TIPS：读者可以下载 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3Njemhlbmd5YWJpbi9JbWFnZS1Eb3dubG9hZGVy&#34;&gt;https://github.com/sczhengyabin/Image-Downloader&lt;/span&gt; 这个项目中的爬虫工具，在自己的电脑尝试一下数据爬取，相信通过操作，会加深你的印象&lt;/p&gt;
&lt;p&gt;数据整理&lt;br&gt;爬取得到的数据是⽐较脏的，需要进⾏整理，主要包括统⼀图⽚后缀和重命名。统⼀后缀格式可以减少以后写数据 API 时的压⼒，也可以测试图⽚是不是可以正常的读取，及时防⽌未知问题的出现，这很重要。&lt;/p&gt;
&lt;p&gt;3.1 图片格式统一&lt;br&gt;以下代码可以实现对图片格式的统一，我们在 img_type_test 文件下放置了几张测试图片，读者可以运行尝试。『读者也可以上传不同格式（如 jpg、jpeg、png 等）的图片到 img_type_test 文件下，然后运行下面的代码，下面的代码读取每种图片，然后将其转为 jpg 格式，同时会将原始的图片删除』&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;import os
import sys
import cv2
import numpy as np
​
​
def listfiles(rootDir):
    list_dirs = os.walk(rootDir) 
    for root, dirs, files in list_dirs:  # 遍历文件夹下的图片
        for d in dirs:
            print((os.path.join(root, d)))
        for f in files:
            fileid = f.split(&amp;#39;.&amp;#39;)[0]  # 获得图片的名字，不含后缀
            filepath = os.path.join(root, f) 
            print(filepath)
            try:
                src = cv2.imread(filepath, 1)  # 读取原始图片，数据会加载到内存中
                print(&amp;quot;src=&amp;quot;, filepath, src.shape)
                os.remove(filepath) # 移除原来的图片
                cv2.imwrite(os.path.join(root, fileid + &amp;quot;.jpg&amp;quot;), src)  # 保存经过格式转换的图片
            except:
                os.remove(filepath)
                continue
​
path = &amp;quot;./Emotion_Recognition_File/img_type_test/&amp;quot;  # 输入图片路径即可，可以在这个文件夹下放置各种后缀名的图片，代码会将所有图片统一成 jpg 格式
listfiles(path)
./Emotion_Recognition_File/img_type_test/000012.jpg
src= ./Emotion_Recognition_File/img_type_test/000012.jpg (218, 178, 3)
./Emotion_Recognition_File/img_type_test/000039.jpg
src= ./Emotion_Recognition_File/img_type_test/000039.jpg (218, 178, 3)
./Emotion_Recognition_File/img_type_test/000063.jpg
src= ./Emotion_Recognition_File/img_type_test/000063.jpg (218, 178, 3)
./Emotion_Recognition_File/img_type_test/000104.jpg
src= ./Emotion_Recognition_File/img_type_test/000104.jpg (218, 178, 3)
./Emotion_Recognition_File/img_type_test/000112.jpg
src= ./Emotion_Recognition_File/img_type_test/000112.jpg (218, 178, 3)
统⼀格式为jpg之后预览如下：

图片无法加载时显示的文字
3.2 数据清洗
利⽤搜索引擎爬取得到的图⽚肯定有不符合要求的，数据清洗主要是删除不合适的图⽚，即⾮⼈脸的照⽚。

图片无法加载时显示的文字
可以采⽤⾁眼观察的⽅式，也可以利⽤程序进⾏筛选，我们调⽤ OpenCV 的⼈脸检测算法进⾏筛选，代码如下：

# coding:utf8
import cv2
import dlib
import numpy as np
import sys
import os
import matplotlib.pyplot as plt
​
# 人脸检测的接口，这个是 OpenCV 中自带的
cascade_path = &amp;#39;./Emotion_Recognition_File/face_detect_model/haarcascade_frontalface_default.xml&amp;#39;
cascade = cv2.CascadeClassifier(cascade_path)
​
img_path = &amp;quot;./Emotion_Recognition_File/face_det_img/&amp;quot; # 测试图片路径
images = os.listdir(img_path)
for image in images:
    im = cv2.imread(os.path.join(img_path, image), 1) # 读取图片
    rects = cascade.detectMultiScale(im, 1.3, 5)  # 人脸检测函数
    print(&amp;quot;检测到人脸的数量&amp;quot;, len(rects))
    if len(rects) == 0:  # len(rects) 是检测人脸的数量，如果没有检测到人脸的话，会显示出图片，适合本地调试使用，在服务器上可能不会显示
#         cv2.namedWindow(&amp;#39;Result&amp;#39;, 0)
#         cv2.imshow(&amp;#39;Result&amp;#39;, im)
#         print(&amp;quot;没有检测到人脸&amp;quot;)
        pass
    plt.imshow(im[:, :, ::-1])  # 显示
    plt.show()
#         os.remove(os.path.join(img_path, image)) # 
#         k = cv2.waitKey(0)
#         if k == ord(&amp;#39;q&amp;#39;): # 在英文状态下，按下按键 q 会关闭显示窗口    
#             break
#     print()
# cv2.destroyAllWindows()   &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;检测到人脸的数量 1&lt;/p&gt;
&lt;p&gt;检测到人脸的数量 1&lt;/p&gt;
&lt;p&gt;检测到人脸的数量 0&lt;/p&gt;
&lt;p&gt;如果上面的代码运行结果与下面类似，可以重新运行代码&lt;/p&gt;
&lt;p&gt;图片无法加载时显示的文字&lt;br&gt;这个⼈脸检测算法是传统算法，召回率不⾼，因此会有⼀些好样本被删除。经过处理后，可以看到都是⽐较好的样本了，后⾯提取⼈脸关键点也会简单很多。&lt;/p&gt;
&lt;p&gt;图片无法加载时显示的文字&lt;br&gt;如果利⽤⼈脸检测算法仍然⽆法清除⼲净样本，则需要⼿动筛选。当然如果你使⽤多个关键词或者使⽤不同的搜索引擎同样的关键词，或者从视频中提取图⽚，那么爬取回来的图⽚很可能有重复或者⾮常的相似，这样的数据集需要去重。&lt;/p&gt;
&lt;p&gt;3.3 提取嘴唇区域&lt;br&gt;接下来我们要将样本处理成我们真正训练所需要的图像，本任务只对嘴唇部分的表情进⾏识别，所以我们的目标就是获取人脸嘴唇区域的图像，然后进行分类。我们利⽤ Opencv+Dlib 算法提取嘴唇区域， Dlib 算法会得到⾯部的 68 个关键点，我们从中得到嘴唇区域，并适当扩⼤。&lt;/p&gt;
&lt;p&gt;人脸 68 点位置图如下：&lt;/p&gt;
&lt;p&gt;图片无法加载时显示的文字&lt;br&gt;下面的代码可以对图片进行人脸检测，检测到人脸后，会将嘴巴区域分割出来，形成数据集！&lt;/p&gt;
&lt;p&gt;读者可以尝试运行代码，便可以理解这样做的意义&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;# coding:utf8
​
import cv2
import dlib
import numpy as np
import sys
import os
import matplotlib.pyplot as plt
​
# 配置 Dlib 关键点检测路径
# 文件可以从 http://dlib.net/files/ 下载
PREDICTOR_PATH = &amp;quot;./Emotion_Recognition_File/face_detect_model/shape_predictor_68_face_landmarks.dat&amp;quot;
predictor = dlib.shape_predictor(PREDICTOR_PATH)
# 配置人脸检测器路径
cascade_path = &amp;#39;./Emotion_Recognition_File/face_detect_model/haarcascade_frontalface_default.xml&amp;#39;
cascade = cv2.CascadeClassifier(cascade_path)
​
# 调用 cascade.detectMultiScale 人脸检测器和 Dlib 的关键点检测算法 predictor 获得关键点结果
def get_landmarks(im):
    rects = cascade.detectMultiScale(im, 1.3, 5) # 人脸检测
    x, y, w, h = rects[0]  # 获取人脸的四个属性值，左上角坐标 x,y 、高宽 w、h
#     print(x, y, w, h)
    rect = dlib.rectangle(int(x), int(y), int(x + w), int(y + h)) 
    return np.matrix([[p.x, p.y] for p in predictor(im, rect).parts()])
​
​
def annotate_landmarks(im, landmarks):
    im = im.copy()
    for idx, point in enumerate(landmarks):
        pos = (point[0, 0], point[0, 1])
        cv2.putText(im,
                    str(idx),
                    pos,
                    fontFace=cv2.FONT_HERSHEY_SCRIPT_SIMPLEX,
                    fontScale=0.4,
                    color=(0, 0, 255))
        cv2.circle(im, pos, 5, color=(0, 255, 255))
    return im
​
​
def getlipfromimage(im, landmarks):
    xmin = 10000
    xmax = 0
    ymin = 10000
    ymax = 0
    # 根据最外围的关键点获取包围嘴唇的最小矩形框
    # 68 个关键点是从
    # 左耳朵0 -下巴-右耳朵16-左眉毛（17-21）-右眉毛（22-26）-左眼睛（36-41）
    # 右眼睛（42-47）-鼻子从上到下（27-30）-鼻孔（31-35）
    # 嘴巴外轮廓（48-59）嘴巴内轮廓（60-67）
    for i in range(48, 67):
        x = landmarks[i, 0]
        y = landmarks[i, 1]
        if x &amp;lt; xmin:
            xmin = x
        if x &amp;gt; xmax:
            xmax = x
        if y &amp;lt; ymin:
            ymin = y
        if y &amp;gt; ymax:
            ymax = y
​
    print(&amp;quot;xmin=&amp;quot;, xmin)
    print(&amp;quot;xmax=&amp;quot;, xmax)
    print(&amp;quot;ymin=&amp;quot;, ymin)
    print(&amp;quot;ymax=&amp;quot;, ymax)
​
    roiwidth = xmax - xmin
    roiheight = ymax - ymin
​
    roi = im[ymin:ymax, xmin:xmax, 0:3]
​
    if roiwidth &amp;gt; roiheight:
        dstlen = 1.5 * roiwidth
    else:
        dstlen = 1.5 * roiheight
​
    diff_xlen = dstlen - roiwidth
    diff_ylen = dstlen - roiheight
​
    newx = xmin
    newy = ymin
​
    imagerows, imagecols, channel = im.shape
    if newx &amp;gt;= diff_xlen / 2 and newx + roiwidth + diff_xlen / 2 &amp;lt; imagecols:
        newx = newx - diff_xlen / 2
    elif newx &amp;lt; diff_xlen / 2:
        newx = 0
    else:
        newx = imagecols - dstlen
​
    if newy &amp;gt;= diff_ylen / 2 and newy + roiheight + diff_ylen / 2 &amp;lt; imagerows:
        newy = newy - diff_ylen / 2
    elif newy &amp;lt; diff_ylen / 2:
        newy = 0
    else:
        newy = imagerows - dstlen
​
    roi = im[int(newy):int(newy + dstlen), int(newx):int(newx + dstlen), 0:3]
    return roi
​
​
def listfiles(rootDir):
    list_dirs = os.walk(rootDir)
    for root, dirs, files in list_dirs:
        for d in dirs:
            print(os.path.join(root, d))
        for f in files:
            fileid = f.split(&amp;#39;.&amp;#39;)[0]
​
            filepath = os.path.join(root, f)
            try:
                im = cv2.imread(filepath, 1)
                landmarks = get_landmarks(im)
                roi = getlipfromimage(im, landmarks)
                roipath = filepath.replace(&amp;#39;.jpg&amp;#39;, &amp;#39;_mouth.png&amp;#39;)
#                 cv2.imwrite(roipath, roi)
                plt.imshow(roi[:, :, ::-1])
                plt.show()
            except:
#                 print(&amp;quot;error&amp;quot;)
                continue
​
​
listfiles(&amp;quot;./Emotion_Recognition_File/mouth_det_img/&amp;quot;)
xmin= 65
xmax= 114
ymin= 150
ymax= 168

xmin= 67
xmax= 111
ymin= 151
ymax= 169

xmin= 73
xmax= 105
ymin= 149
ymax= 161

xmin= 513
xmax= 652
ymin= 406
ymax= 515

xmin= 211
xmax= 259
ymin= 287
ymax= 322&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行上面的代码会显示嘴巴区域图，如果看不到，重新运行一下即可&lt;/p&gt;
&lt;p&gt;（xmin，ymin） （xmax，ymax） 分别代表嘴唇区域在原始图像的位置，即左上角坐标和右下角坐标&lt;/p&gt;
&lt;p&gt;结果如下，⾃此就完成了⾃建数据集操作&lt;/p&gt;
&lt;p&gt;图片无法加载时显示的文字&lt;br&gt;每种表情放置在各自的文件夹下并命名&lt;/p&gt;
&lt;p&gt;图片无法加载时显示的文字&lt;br&gt;上面就是本训练营『数据获取与整理』部分的内容，有了数据，接下来的任务就可以训练我们的表情分类模型吧。&lt;/p&gt;
&lt;p&gt;加油！这也许是你的第一个深度学习模型了。&lt;/p&gt;
&lt;p&gt;– By：有三AI 团队&lt;/p&gt;
&lt;p&gt;聚焦于让大家能够系统性地完成AI各个领域所需的专业知识的学习，实现三人行必有AI，三人行必有我师的愿景。&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://47.97.229.110/2021/01/29/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0_1_day/</guid>
            <title>深度学习_1_day</title>
            <link>http://47.97.229.110/2021/01/29/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0_1_day/</link>
            <category term="人工智能" scheme="http://47.97.229.110/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/" />
            <pubDate>Fri, 29 Jan 2021 21:39:01 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;基于人脸的常见表情识别——模型搭建、训练与测试&lt;br&gt;模型搭建与训练&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据接口准备&lt;/li&gt;
&lt;li&gt;模型定义&lt;/li&gt;
&lt;li&gt;模型训练&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;模型测试&lt;/p&gt;
&lt;p&gt;本 Task 是『基于人脸的常见表情识别』训练营的第 3 课，如果你未学习前面的课程，请从 Task1 开始学习，本 Task 需要使用到数据集，在 Task2 中提供下载的渠道。&lt;/p&gt;
&lt;p&gt;在完成了数据准备后，接下来就是卷积神经网络一展身手的时候了，通过本次任务，您将学到如何使用 PyTorch 深度学习框架，实现卷积神经网络的定义、训练和预测。&lt;/p&gt;
&lt;p&gt;模型搭建与训练&lt;br&gt;得到了数据之后，接下来咱们使用 PyTorch 这个框架来进行模型的训练。整个训练流程包括数据接口准备、模型定义、结果保存与分析。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据接口准备&lt;br&gt;PyTorch 图像分类直接利用文件夹作为输入，只需要把不同类的数据放到不同的文件夹中。数据读取的完整代码如下：&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;data_transforms = &amp;#123;
 &amp;#39;train&amp;#39;: transforms.Compose([
     transforms.RandomSizedCrop(48),
     transforms.RandomHorizontalFlip(),
     transforms.ToTensor(),
     transforms.Normalize([0.5,0.5,0.5], [0.5,0.5,0.5])
 ]),
 &amp;#39;val&amp;#39;: transforms.Compose([
     transforms.Scale(64),
     transforms.CenterCrop(48),
     transforms.ToTensor(),
     transforms.Normalize([0.5,0.5,0.5], [0.5,0.5,0.5])
 ]),
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;data_dir = ‘./train_val_data/‘&lt;br&gt;image_datasets = {x: datasets.ImageFolder(os.path.join(data_dir, x),&lt;br&gt;                                          data_transforms[x]) for x in [‘train’, ‘val’]}&lt;br&gt;dataloders = {x: torch.utils.data.DataLoader(image_datasets[x],&lt;br&gt;                                             batch_size=16,&lt;br&gt;                                             shuffle=True,&lt;br&gt;                                             num_workers=4) for x in [‘train’, ‘val’]}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;上面脚本中的函数，输入一个文件夹，输出图片路径以及标签，在开始训练之前需要将数据集进行拆分，拆分成训练集(train)和验证集(val)，训练集和测试集的比例为9:1，train_val_data文件结构如下所示，其中 0 代表 none、 1 代表pouting、2 代表 smile、3 代表 openmouth：
``` python
- train_val_data
    - train
        - 0
        - 1
        - 2
        - 3

    - val
        - 0
        - 1
        - 2
        - 3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;到此，数据接口就定义完毕了，接下来在训练代码中看如何使用迭代器进行数据读取就可以了。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;模型定义&lt;br&gt;创建数据接⼝后，我们开始定义⼀个⽹络 simpleconv3&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;import torch.nn as nn
import torch.nn.functional as F
​
class simpleconv3(nn.Module):
 def __init__(self):
     super(simpleconv3,self).__init__()
     self.conv1 = nn.Conv2d(3, 12, 3, 2)
     self.bn1 = nn.BatchNorm2d(12)
     self.conv2 = nn.Conv2d(12, 24, 3, 2)
     self.bn2 = nn.BatchNorm2d(24)
     self.conv3 = nn.Conv2d(24, 48, 3, 2)
     self.bn3 = nn.BatchNorm2d(48)
     self.fc1 = nn.Linear(48 * 5 * 5 , 1200)
     self.fc2 = nn.Linear(1200 , 128)
     self.fc3 = nn.Linear(128 , 4)
​
 def forward(self , x):
     x = F.relu(self.bn1(self.conv1(x)))
     #print &amp;quot;bn1 shape&amp;quot;,x.shape
     x = F.relu(self.bn2(self.conv2(x)))
     x = F.relu(self.bn3(self.conv3(x)))
     x = x.view(-1 , 48 * 5 * 5) 
     x = F.relu(self.fc1(x))
     x = F.relu(self.fc2(x))
     x = self.fc3(x)
     return x&lt;/code&gt;&lt;/pre&gt;
上面就是我们定义的网络，是一个简单的 3 层卷积。在 torch.nn 下，有各种网络层，这里就用到了 nn.Conv2d，nn.BatchNorm2d 和 nn.Linear，分别是卷积层，BN 层和全连接层。我们以一个卷积层为例：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;conv1 = nn.Conv2d(in_channels=3, out_channels=12, kernel_size=3, stride=2)&lt;br&gt;bn1 = nn.BatchNorm2d(num_features=12)&lt;br&gt;in_channels：输入通道数&lt;br&gt;out_channels：输出通道数&lt;br&gt;kernel_size：卷积核的大小&lt;br&gt;stride：卷积核的移动步长&lt;br&gt;更全面的参数，请自查 API：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9weXRvcmNoLm9yZy8=&#34;&gt;https://pytorch.org/&lt;/span&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;模型训练&lt;br&gt;这里准备好了数据集，可以直接使用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;深度学习一般使用 GPU 进行训练，大家可以根据下图的操作，将设备切换至 GPU状态，再运行下面的程序，切换过程需要一定时间，请耐心等待&lt;/p&gt;
&lt;p&gt;Image&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;#coding:utf8
from __future__ import print_function, division
​
import torch
import torch.nn as nn
import torch.optim as optim
from torch.optim import lr_scheduler
from torch.autograd import Variable
import torchvision
from torchvision import datasets, models, transforms
import time
import os
from tensorboardX import SummaryWriter
import torch.nn.functional as F
import numpy as np
​
import warnings
​
warnings.filterwarnings(&amp;#39;ignore&amp;#39;)
​
writer = SummaryWriter()
​
def train_model(model, criterion, optimizer, scheduler, num_epochs=25):
    for epoch in range(num_epochs):
        print(&amp;#39;Epoch &amp;#123;&amp;#125;/&amp;#123;&amp;#125;&amp;#39;.format(epoch, num_epochs - 1))
        for phase in [&amp;#39;train&amp;#39;, &amp;#39;val&amp;#39;]:
            if phase == &amp;#39;train&amp;#39;:
                scheduler.step()
                model.train(True)  # Set model to training mode
            else:
                model.train(False)  # Set model to evaluate mode
​
            running_loss = 0.0
            running_corrects = 0.0
​
            for data in dataloders[phase]:
                inputs, labels = data
                if use_gpu:
                    inputs = Variable(inputs.cuda())
                    labels = Variable(labels.cuda())
                else:
                    inputs, labels = Variable(inputs), Variable(labels)
​
                optimizer.zero_grad()
                outputs = model(inputs)
                _, preds = torch.max(outputs.data, 1)
                loss = criterion(outputs, labels)
                if phase == &amp;#39;train&amp;#39;:
                    loss.backward()
                    optimizer.step()
​
                running_loss += loss.data.item()
                running_corrects += torch.sum(preds == labels).item()
​
            epoch_loss = running_loss / dataset_sizes[phase]
            epoch_acc = running_corrects / dataset_sizes[phase]

            if phase == &amp;#39;train&amp;#39;:
                writer.add_scalar(&amp;#39;data/trainloss&amp;#39;, epoch_loss, epoch)
                writer.add_scalar(&amp;#39;data/trainacc&amp;#39;, epoch_acc, epoch)
            else:
                writer.add_scalar(&amp;#39;data/valloss&amp;#39;, epoch_loss, epoch)
                writer.add_scalar(&amp;#39;data/valacc&amp;#39;, epoch_acc, epoch)
​
            print(&amp;#39;&amp;#123;&amp;#125; Loss: &amp;#123;:.4f&amp;#125; Acc: &amp;#123;:.4f&amp;#125;&amp;#39;.format(
                phase, epoch_loss, epoch_acc))
​
    writer.export_scalars_to_json(&amp;quot;./all_scalars.json&amp;quot;)
    writer.close()
    return model
​
if __name__ == &amp;#39;__main__&amp;#39;:
​
    data_transforms = &amp;#123;
        &amp;#39;train&amp;#39;: transforms.Compose([
            transforms.RandomSizedCrop(48),
            transforms.RandomHorizontalFlip(),
            transforms.ToTensor(),
            transforms.Normalize([0.5,0.5,0.5], [0.5,0.5,0.5])
        ]),
        &amp;#39;val&amp;#39;: transforms.Compose([
            transforms.Scale(64),
            transforms.CenterCrop(48),
            transforms.ToTensor(),
            transforms.Normalize([0.5,0.5,0.5], [0.5,0.5,0.5])
        ]),
    &amp;#125;
​
    data_dir = &amp;#39;./Emotion_Recognition_File/train_val_data/&amp;#39; # 数据集所在的位置
    image_datasets = &amp;#123;x: datasets.ImageFolder(os.path.join(data_dir, x),
                                              data_transforms[x]) for x in [&amp;#39;train&amp;#39;, &amp;#39;val&amp;#39;]&amp;#125;
    dataloders = &amp;#123;x: torch.utils.data.DataLoader(image_datasets[x],
                                                 batch_size=64,
                                                 shuffle=True if x==&amp;quot;train&amp;quot; else False,
                                                 num_workers=8) for x in [&amp;#39;train&amp;#39;, &amp;#39;val&amp;#39;]&amp;#125;
​
    dataset_sizes = &amp;#123;x: len(image_datasets[x]) for x in [&amp;#39;train&amp;#39;, &amp;#39;val&amp;#39;]&amp;#125;
​
    use_gpu = torch.cuda.is_available()
    print(&amp;quot;是否使用 GPU&amp;quot;, use_gpu)
    modelclc = simpleconv3()
    print(modelclc)
    if use_gpu:
        modelclc = modelclc.cuda()
​
    criterion = nn.CrossEntropyLoss()
    optimizer_ft = optim.SGD(modelclc.parameters(), lr=0.1, momentum=0.9)
    exp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=100, gamma=0.1)
​
    modelclc = train_model(model=modelclc,
                           criterion=criterion,
                           optimizer=optimizer_ft,
                           scheduler=exp_lr_scheduler,
                           num_epochs=10)  # 这里可以调节训练的轮次
    if not os.path.exists(&amp;quot;models&amp;quot;):
        os.mkdir(&amp;#39;models&amp;#39;)
    torch.save(modelclc.state_dict(),&amp;#39;models/model.ckpt&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;训练的过程需要注意几个参数，第一个是数据加载器(dataloders)中的 batch_size，这个代表的含义是每次送入模型训练的图片数量，这个需要根据GPU的显存来设置，显存越大，可以设置越大，这个数一般设置为 2 的整数次幂（如 4、8、16、32 等）&lt;/p&gt;
&lt;p&gt;dataloders = {x: torch.utils.data.DataLoader(image_datasets[x],&lt;br&gt;                              batch_size=64,&lt;br&gt;                              shuffle=True if x==”train” else False,&lt;br&gt;                              num_workers=8) for x in [‘train’, ‘val’]}&lt;br&gt;第二个需要注意的参数是训练函数的 num_epochs，这个参数代表的意义是，模型训练的轮次。&lt;/p&gt;
&lt;p&gt;modelclc = train_model(model=modelclc,&lt;br&gt;               criterion=criterion,&lt;br&gt;               optimizer=optimizer_ft,&lt;br&gt;               scheduler=exp_lr_scheduler,&lt;br&gt;               num_epochs=10)  # 这里可以调节训练的轮次&lt;br&gt;模型测试&lt;br&gt;上⾯已经训练好了模型，我们接下来的⽬标，就是要⽤它来做推理，真正把模型⽤起来，下⾯我们载⼊⼀个图⽚，⽤模型进⾏测试。 结果在 results 文件夹中&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;# coding:utf8
​
import sys
import numpy as np
import cv2
import os
import dlib
​
import torch
import torch.nn as nn
import torch.optim as optim
from torch.optim import lr_scheduler
from torch.autograd import Variable
import torchvision
from torchvision import datasets, models, transforms
import time
from PIL import Image
import torch.nn.functional as F
​
import matplotlib.pyplot as plt
import warnings
​
warnings.filterwarnings(&amp;#39;ignore&amp;#39;)
​
​
PREDICTOR_PATH = &amp;quot;./Emotion_Recognition_File/face_detect_model/shape_predictor_68_face_landmarks.dat&amp;quot;
predictor = dlib.shape_predictor(PREDICTOR_PATH)
cascade_path = &amp;#39;./Emotion_Recognition_File/face_detect_model/haarcascade_frontalface_default.xml&amp;#39;
cascade = cv2.CascadeClassifier(cascade_path)
​
if not os.path.exists(&amp;quot;results&amp;quot;):
    os.mkdir(&amp;quot;results&amp;quot;)

​
def standardization(data):
    mu = np.mean(data, axis=0)
    sigma = np.std(data, axis=0)
    return (data - mu) / sigma
​
​
def get_landmarks(im):
    rects = cascade.detectMultiScale(im, 1.3, 5)
    x, y, w, h = rects[0]
    rect = dlib.rectangle(int(x), int(y), int(x + w), int(y + h))
    return np.matrix([[p.x, p.y] for p in predictor(im, rect).parts()])
​
​
def annotate_landmarks(im, landmarks):
    im = im.copy()
    for idx, point in enumerate(landmarks):
        pos = (point[0, 0], point[0, 1])
        cv2.putText(im,
                    str(idx),
                    pos,
                    fontFace=cv2.FONT_HERSHEY_SCRIPT_SIMPLEX,
                    fontScale=0.4,
                    color=(0, 0, 255))
        cv2.circle(im, pos, 3, color=(0, 255, 255))
    return im
​
​
testsize = 48  # 测试图大小
​
data_transforms = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize([0.5, 0.5, 0.5], [0.5, 0.5, 0.5])
])
net = simpleconv3()
net.eval()
modelpath = &amp;quot;./models/model.ckpt&amp;quot;  # 模型路径
net.load_state_dict(
    torch.load(modelpath, map_location=lambda storage, loc: storage))
​
# 一次测试一个文件
img_path = &amp;quot;./Emotion_Recognition_File/find_face_img/&amp;quot;
imagepaths = os.listdir(img_path)  # 图像文件夹
for imagepath in imagepaths:
    im = cv2.imread(os.path.join(img_path, imagepath), 1)
    try:
        rects = cascade.detectMultiScale(im, 1.3, 5)
        x, y, w, h = rects[0]
        rect = dlib.rectangle(int(x), int(y), int(x + w), int(y + h))
        landmarks = np.matrix([[p.x, p.y]
                               for p in predictor(im, rect).parts()])
    except:
#         print(&amp;quot;没有检测到人脸&amp;quot;)
        continue  # 没有检测到人脸
​
    xmin = 10000
    xmax = 0
    ymin = 10000
    ymax = 0
​
    for i in range(48, 67):
        x = landmarks[i, 0]
        y = landmarks[i, 1]
        if x &amp;lt; xmin:
            xmin = x
        if x &amp;gt; xmax:
            xmax = x
        if y &amp;lt; ymin:
            ymin = y
        if y &amp;gt; ymax:
            ymax = y
​
    roiwidth = xmax - xmin
    roiheight = ymax - ymin
​
    roi = im[ymin:ymax, xmin:xmax, 0:3]
​
    if roiwidth &amp;gt; roiheight:
        dstlen = 1.5 * roiwidth
    else:
        dstlen = 1.5 * roiheight
​
    diff_xlen = dstlen - roiwidth
    diff_ylen = dstlen - roiheight
​
    newx = xmin
    newy = ymin
​
    imagerows, imagecols, channel = im.shape
    if newx &amp;gt;= diff_xlen / 2 and newx + roiwidth + diff_xlen / 2 &amp;lt; imagecols:
        newx = newx - diff_xlen / 2
    elif newx &amp;lt; diff_xlen / 2:
        newx = 0
    else:
        newx = imagecols - dstlen
​
    if newy &amp;gt;= diff_ylen / 2 and newy + roiheight + diff_ylen / 2 &amp;lt; imagerows:
        newy = newy - diff_ylen / 2
    elif newy &amp;lt; diff_ylen / 2:
        newy = 0
    else:
        newy = imagecols - dstlen
​
    roi = im[int(newy):int(newy + dstlen), int(newx):int(newx + dstlen), 0:3]
    roi = cv2.cvtColor(roi, cv2.COLOR_BGR2RGB)
    roiresized = cv2.resize(roi,
                            (testsize, testsize)).astype(np.float32) / 255.0
    imgblob = data_transforms(roiresized).unsqueeze(0)
    imgblob.requires_grad = False
    imgblob = Variable(imgblob)
    torch.no_grad()
    predict = F.softmax(net(imgblob))
    print(predict)
    index = np.argmax(predict.detach().numpy())
​
    im_show = cv2.imread(os.path.join(img_path, imagepath), 1)
    im_h, im_w, im_c = im_show.shape
    pos_x = int(newx + dstlen)
    pos_y = int(newy + dstlen)
    font = cv2.FONT_HERSHEY_SIMPLEX
    cv2.rectangle(im_show, (int(newx), int(newy)),
                  (int(newx + dstlen), int(newy + dstlen)), (0, 255, 255), 2)
    if index == 0:
        cv2.putText(im_show, &amp;#39;none&amp;#39;, (pos_x, pos_y), font, 1.5, (0, 0, 255), 2)
    if index == 1:
        cv2.putText(im_show, &amp;#39;pout&amp;#39;, (pos_x, pos_y), font, 1.5, (0, 0, 255), 2)
    if index == 2:
        cv2.putText(im_show, &amp;#39;smile&amp;#39;, (pos_x, pos_y), font, 1.5, (0, 0, 255), 2)
    if index == 3:
        cv2.putText(im_show, &amp;#39;open&amp;#39;, (pos_x, pos_y), font, 1.5, (0, 0, 255), 2)
#     cv2.namedWindow(&amp;#39;result&amp;#39;, 0)
#     cv2.imshow(&amp;#39;result&amp;#39;, im_show)
    cv2.imwrite(os.path.join(&amp;#39;results&amp;#39;, imagepath), im_show)
#     print(os.path.join(&amp;#39;results&amp;#39;, imagepath))
    plt.imshow(im_show[:, :, ::-1])  # 这里需要交换通道，因为 matplotlib 保存图片的通道顺序是 RGB，而在 OpenCV 中是 BGR
    plt.show()
#     cv2.waitKey(0)
# cv2.destroyAllWindows()
tensor([[8.1330e-03, 6.7033e-04, 9.8497e-01, 6.2311e-03]],
       grad_fn=&amp;lt;SoftmaxBackward&amp;gt;)

tensor([[1.0822e-06, 1.9005e-09, 1.0000e+00, 2.3623e-07]],
       grad_fn=&amp;lt;SoftmaxBackward&amp;gt;)

tensor([[9.9190e-01, 3.7207e-03, 4.3589e-03, 1.5936e-05]],
       grad_fn=&amp;lt;SoftmaxBackward&amp;gt;)

tensor([[4.3434e-07, 1.2525e-06, 1.1251e-05, 9.9999e-01]],
       grad_fn=&amp;lt;SoftmaxBackward&amp;gt;)

tensor([[0.0899, 0.8970, 0.0115, 0.0016]], grad_fn=&amp;lt;SoftmaxBackward&amp;gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再次说明：0 代表 none、 1 代表pouting、2 代表 smile、3 代表 openmouth&lt;/p&gt;
&lt;p&gt;上面展示的图片上方会有一个输出，如：tensor([[8.1330e-03, 6.7033e-04, 9.8497e-01, 6.2311e-03]])&lt;/p&gt;
&lt;p&gt;这个代表的含义是，该图片在这个模型预测下，是该类别的可能性，比如上面这个例子 9.8497e-01 是四个值最大的，它的索引是 2（从 0 开始算），所以预测该图片为 smile&lt;/p&gt;
&lt;p&gt;以上就是本训练营的全部内容了，希望通过本次训练营，可以帮助大家搭建起一个深度学习项目的框架，然后将所学的知识应用到自己的项目、工作中。谢谢！&lt;/p&gt;
&lt;p&gt;– By：有三AI 团队&lt;/p&gt;
&lt;p&gt;聚焦于让大家能够系统性地完成AI各个领域所需的专业知识的学习，实现三人行必有AI，三人行必有我师的愿景。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://47.97.229.110/2021/01/29/python-2-day/</guid>
            <title>python_2_day</title>
            <link>http://47.97.229.110/2021/01/29/python-2-day/</link>
            <category term="Python" scheme="http://47.97.229.110/categories/Python/" />
            <pubDate>Fri, 29 Jan 2021 21:39:01 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;Python入门(中)&lt;br&gt;简介&lt;/p&gt;
&lt;p&gt;列表&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;列表的定义&lt;/li&gt;
&lt;li&gt;列表的创建&lt;/li&gt;
&lt;li&gt;向列表中添加元素&lt;/li&gt;
&lt;li&gt;删除列表中的元素&lt;/li&gt;
&lt;li&gt;获取列表中的元素&lt;/li&gt;
&lt;li&gt;列表的常用操作符&lt;/li&gt;
&lt;li&gt;列表的其它方法&lt;br&gt;元组&lt;/li&gt;
&lt;li&gt;创建和访问一个元组&lt;/li&gt;
&lt;li&gt;更新和删除一个元组&lt;/li&gt;
&lt;li&gt;元组相关的操作符&lt;/li&gt;
&lt;li&gt;内置方法&lt;/li&gt;
&lt;li&gt;解压元组&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;字符串&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;字符串的定义&lt;/li&gt;
&lt;li&gt;字符串的切片与拼接&lt;/li&gt;
&lt;li&gt;字符串的常用内置方法&lt;/li&gt;
&lt;li&gt;字符串格式化&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;字典&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可变类型与不可变类型&lt;/li&gt;
&lt;li&gt;字典的定义&lt;/li&gt;
&lt;li&gt;创建和访问字典&lt;/li&gt;
&lt;li&gt;字典的内置方法&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;集合&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;集合的创建&lt;/li&gt;
&lt;li&gt;访问集合中的值&lt;/li&gt;
&lt;li&gt;集合的内置方法&lt;/li&gt;
&lt;li&gt;集合的转换&lt;/li&gt;
&lt;li&gt;不可变集合&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;序列&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;针对序列的内置函数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;简介&lt;br&gt;Python 是一种通用编程语言，其在科学计算和机器学习领域具有广泛的应用。如果我们打算利用 Python 来执行机器学习，那么对 Python 有一些基本的了解就是至关重要的。本 Python 入门系列体验就是为这样的初学者精心准备的。&lt;/p&gt;
&lt;p&gt;本实验包括以下内容：&lt;/p&gt;
&lt;p&gt;列表&lt;br&gt;列表的定义&lt;br&gt;列表的创建&lt;br&gt;向列表中添加元素&lt;br&gt;删除列表中的元素&lt;br&gt;获取列表中的元素&lt;br&gt;列表的常用操作符&lt;br&gt;列表的其他方法&lt;br&gt;元组&lt;br&gt;创建和访问一个元组&lt;br&gt;更新和删除一个元组&lt;br&gt;元组相关的操作符&lt;br&gt;内置方法&lt;br&gt;解压元组&lt;br&gt;字符串&lt;br&gt;字符串的定义&lt;br&gt;字符串的切片与拼接&lt;br&gt;字符串的常用内置方法&lt;br&gt;字符串格式化&lt;br&gt;字典&lt;br&gt;可变类型与不可变类型&lt;br&gt;字典的定义&lt;br&gt;创建和访问字典&lt;br&gt;字典的内置方法&lt;br&gt;集合&lt;br&gt;集合的创建&lt;br&gt;访问集合中的值&lt;br&gt;集合的内置方法&lt;br&gt;集合的转换&lt;br&gt;不可变集合&lt;br&gt;序列&lt;br&gt;针对序列的内置函数&lt;br&gt;列表&lt;br&gt;简单数据类型&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;整型&amp;lt;class &amp;#39;int&amp;#39;&amp;gt;
浮点型&amp;lt;class &amp;#39;float&amp;#39;&amp;gt;
布尔型&amp;lt;class &amp;#39;bool&amp;#39;&amp;gt;
容器数据类型

列表&amp;lt;class &amp;#39;list&amp;#39;&amp;gt;
元组&amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt;
字典&amp;lt;class &amp;#39;dict&amp;#39;&amp;gt;
集合&amp;lt;class &amp;#39;set&amp;#39;&amp;gt;
字符串&amp;lt;class &amp;#39;str&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;列表的定义&lt;br&gt;列表是有序集合，没有固定大小，能够保存任意数量任意类型的 Python 对象，语法为 [元素1, 元素2, …, 元素n]。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关键点是「中括号 []」和「逗号 ,」&lt;br&gt;中括号 把所有元素绑在一起&lt;br&gt;逗号 将每个元素一一分开&lt;br&gt;2. 列表的创建&lt;br&gt;创建一个普通列表&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;x = [&amp;#39;Monday&amp;#39;, &amp;#39;Tuesday&amp;#39;, &amp;#39;Wednesday&amp;#39;, &amp;#39;Thursday&amp;#39;, &amp;#39;Friday&amp;#39;]
print(x, type(x))
# [&amp;#39;Monday&amp;#39;, &amp;#39;Tuesday&amp;#39;, &amp;#39;Wednesday&amp;#39;, &amp;#39;Thursday&amp;#39;, &amp;#39;Friday&amp;#39;] &amp;lt;class &amp;#39;list&amp;#39;&amp;gt;
​
x = [2, 3, 4, 5, 6, 7]
print(x, type(x))
# [2, 3, 4, 5, 6, 7] &amp;lt;class &amp;#39;list&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[‘Monday’, ‘Tuesday’, ‘Wednesday’, ‘Thursday’, ‘Friday’] &amp;lt;class ‘list’&amp;gt;&lt;br&gt;[2, 3, 4, 5, 6, 7] &amp;lt;class ‘list’&amp;gt;&lt;br&gt;利用range()创建列表&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;x = list(range(10))
print(x, type(x))
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &amp;lt;class &amp;#39;list&amp;#39;&amp;gt;
​
x = list(range(1, 11, 2))
print(x, type(x))
# [1, 3, 5, 7, 9] &amp;lt;class &amp;#39;list&amp;#39;&amp;gt;
​
x = list(range(10, 1, -2))
print(x, type(x))
# [10, 8, 6, 4, 2] &amp;lt;class &amp;#39;list&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &amp;lt;class ‘list’&amp;gt;&lt;br&gt;[1, 3, 5, 7, 9] &amp;lt;class ‘list’&amp;gt;&lt;br&gt;[10, 8, 6, 4, 2] &amp;lt;class ‘list’&amp;gt;&lt;br&gt;利用推导式创建列表&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;x = [0] * 5
print(x, type(x))
# [0, 0, 0, 0, 0] &amp;lt;class &amp;#39;list&amp;#39;&amp;gt;
​
x = [0 for i in range(5)]
print(x, type(x))
# [0, 0, 0, 0, 0] &amp;lt;class &amp;#39;list&amp;#39;&amp;gt;
​
x = [i for i in range(10)]
print(x, type(x))
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &amp;lt;class &amp;#39;list&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​&lt;br&gt;x = [i for i in range(1, 10, 2)]&lt;br&gt;print(x, type(x))&lt;/p&gt;
&lt;h1 id=&#34;1-3-5-7-9-lt-class-‘list’-gt&#34;&gt;&lt;a href=&#34;#1-3-5-7-9-lt-class-‘list’-gt&#34; class=&#34;headerlink&#34; title=&#34;[1, 3, 5, 7, 9] &amp;lt;class ‘list’&amp;gt;&#34;&gt;&lt;/a&gt;[1, 3, 5, 7, 9] &amp;lt;class ‘list’&amp;gt;&lt;/h1&gt;&lt;p&gt;​&lt;br&gt;x = [i for i in range(10, 1, -2)]&lt;br&gt;print(x, type(x))&lt;/p&gt;
&lt;h1 id=&#34;10-8-6-4-2-lt-class-‘list’-gt&#34;&gt;&lt;a href=&#34;#10-8-6-4-2-lt-class-‘list’-gt&#34; class=&#34;headerlink&#34; title=&#34;[10, 8, 6, 4, 2] &amp;lt;class ‘list’&amp;gt;&#34;&gt;&lt;/a&gt;[10, 8, 6, 4, 2] &amp;lt;class ‘list’&amp;gt;&lt;/h1&gt;&lt;p&gt;​&lt;br&gt;x = [i ** 2 for i in range(1, 10)]&lt;br&gt;print(x, type(x))&lt;/p&gt;
&lt;h1 id=&#34;1-4-9-16-25-36-49-64-81-lt-class-‘list’-gt&#34;&gt;&lt;a href=&#34;#1-4-9-16-25-36-49-64-81-lt-class-‘list’-gt&#34; class=&#34;headerlink&#34; title=&#34;[1, 4, 9, 16, 25, 36, 49, 64, 81] &amp;lt;class ‘list’&amp;gt;&#34;&gt;&lt;/a&gt;[1, 4, 9, 16, 25, 36, 49, 64, 81] &amp;lt;class ‘list’&amp;gt;&lt;/h1&gt;&lt;p&gt;​&lt;br&gt;x = [i for i in range(100) if (i % 2) != 0 and (i % 3) == 0]&lt;br&gt;print(x, type(x))&lt;br&gt;​&lt;/p&gt;
&lt;h1 id=&#34;3-9-15-21-27-33-39&#34;&gt;&lt;a href=&#34;#3-9-15-21-27-33-39&#34; class=&#34;headerlink&#34; title=&#34;[3, 9, 15, 21, 27, 33, 39,&#34;&gt;&lt;/a&gt;[3, 9, 15, 21, 27, 33, 39,&lt;/h1&gt;&lt;p&gt;[0, 0, 0, 0, 0] &amp;lt;class ‘list’&amp;gt;&lt;br&gt;[0, 0, 0, 0, 0] &amp;lt;class ‘list’&amp;gt;&lt;br&gt;[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &amp;lt;class ‘list’&amp;gt;&lt;br&gt;[1, 3, 5, 7, 9] &amp;lt;class ‘list’&amp;gt;&lt;br&gt;[10, 8, 6, 4, 2] &amp;lt;class ‘list’&amp;gt;&lt;br&gt;[1, 4, 9, 16, 25, 36, 49, 64, 81] &amp;lt;class ‘list’&amp;gt;&lt;br&gt;[3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93, 99] &amp;lt;class ‘list’&amp;gt;&lt;br&gt;注意：&lt;/p&gt;
&lt;p&gt;由于list的元素可以是任何对象，因此列表中所保存的是对象的指针。即使保存一个简单的[1,2,3]，也有3个指针和3个整数对象。&lt;/p&gt;
&lt;p&gt;x = [a] * 4操作中，只是创建4个指向list的引用，所以一旦a改变，x中4个a也会随之改变。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;x = [[0] * 3] * 4&lt;br&gt;print(x, type(x))&lt;/p&gt;
&lt;h1 id=&#34;0-0-0-0-0-0-0-0-0-0-0-0-lt-class-‘list’-gt&#34;&gt;&lt;a href=&#34;#0-0-0-0-0-0-0-0-0-0-0-0-lt-class-‘list’-gt&#34; class=&#34;headerlink&#34; title=&#34;[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] &amp;lt;class ‘list’&amp;gt;&#34;&gt;&lt;/a&gt;[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] &amp;lt;class ‘list’&amp;gt;&lt;/h1&gt;&lt;p&gt;​&lt;br&gt;x[0][0] = 1&lt;br&gt;print(x, type(x))&lt;/p&gt;
&lt;h1 id=&#34;1-0-0-1-0-0-1-0-0-1-0-0-lt-class-‘list’-gt&#34;&gt;&lt;a href=&#34;#1-0-0-1-0-0-1-0-0-1-0-0-lt-class-‘list’-gt&#34; class=&#34;headerlink&#34; title=&#34;[[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] &amp;lt;class ‘list’&amp;gt;&#34;&gt;&lt;/a&gt;[[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] &amp;lt;class ‘list’&amp;gt;&lt;/h1&gt;&lt;p&gt;​&lt;br&gt;a = [0] * 3&lt;br&gt;x = [a] * 4&lt;br&gt;print(x, type(x))&lt;/p&gt;
&lt;h1 id=&#34;0-0-0-0-0-0-0-0-0-0-0-0-lt-class-‘list’-gt-1&#34;&gt;&lt;a href=&#34;#0-0-0-0-0-0-0-0-0-0-0-0-lt-class-‘list’-gt-1&#34; class=&#34;headerlink&#34; title=&#34;[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] &amp;lt;class ‘list’&amp;gt;&#34;&gt;&lt;/a&gt;[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] &amp;lt;class ‘list’&amp;gt;&lt;/h1&gt;&lt;p&gt;​&lt;br&gt;x[0][0] = 1&lt;br&gt;print(x, type(x))&lt;/p&gt;
&lt;h1 id=&#34;1-0-0-1-0-0-1-0-0-1-0-0-lt-class-‘list’-gt-1&#34;&gt;&lt;a href=&#34;#1-0-0-1-0-0-1-0-0-1-0-0-lt-class-‘list’-gt-1&#34; class=&#34;headerlink&#34; title=&#34;[[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] &amp;lt;class ‘list’&amp;gt;&#34;&gt;&lt;/a&gt;[[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] &amp;lt;class ‘list’&amp;gt;&lt;/h1&gt;&lt;p&gt;[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] &amp;lt;class ‘list’&amp;gt;&lt;br&gt;[[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] &amp;lt;class ‘list’&amp;gt;&lt;br&gt;[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] &amp;lt;class ‘list’&amp;gt;&lt;br&gt;[[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] &amp;lt;class ‘list’&amp;gt;&lt;br&gt;创建一个混合列表&lt;br&gt;【例子】&lt;/p&gt;
&lt;p&gt;mix = [1, ‘lsgo’, 3.14, [1, 2, 3]]&lt;br&gt;print(mix, type(mix))  &lt;/p&gt;
&lt;h1 id=&#34;1-‘lsgo’-3-14-1-2-3-lt-class-‘list’-gt&#34;&gt;&lt;a href=&#34;#1-‘lsgo’-3-14-1-2-3-lt-class-‘list’-gt&#34; class=&#34;headerlink&#34; title=&#34;[1, ‘lsgo’, 3.14, [1, 2, 3]] &amp;lt;class ‘list’&amp;gt;&#34;&gt;&lt;/a&gt;[1, ‘lsgo’, 3.14, [1, 2, 3]] &amp;lt;class ‘list’&amp;gt;&lt;/h1&gt;&lt;p&gt;[1, ‘lsgo’, 3.14, [1, 2, 3]] &amp;lt;class ‘list’&amp;gt;&lt;br&gt;创建一个空列表&lt;br&gt;【例子】&lt;/p&gt;
&lt;p&gt;empty = []&lt;br&gt;print(empty, type(empty))  # [] &amp;lt;class ‘list’&amp;gt;&lt;br&gt;[] &amp;lt;class ‘list’&amp;gt;&lt;br&gt;列表不像元组，列表内容可更改 (mutable)，因此附加 (append, extend)、插入 (insert)、删除 (remove, pop) 这些操作都可以用在它身上。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;向列表中添加元素&lt;br&gt;list.append(obj) 在列表末尾添加新的对象，只接受一个参数，参数可以是任何数据类型，被追加的元素在 list 中保持着原结构类型。&lt;br&gt;【例子】&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;x = [‘Monday’, ‘Tuesday’, ‘Wednesday’, ‘Thursday’, ‘Friday’]&lt;br&gt;x.append(‘Thursday’)&lt;br&gt;print(x)  &lt;/p&gt;
&lt;h1 id=&#34;‘Monday’-‘Tuesday’-‘Wednesday’-‘Thursday’-‘Friday’-‘Thursday’&#34;&gt;&lt;a href=&#34;#‘Monday’-‘Tuesday’-‘Wednesday’-‘Thursday’-‘Friday’-‘Thursday’&#34; class=&#34;headerlink&#34; title=&#34;[‘Monday’, ‘Tuesday’, ‘Wednesday’, ‘Thursday’, ‘Friday’, ‘Thursday’]&#34;&gt;&lt;/a&gt;[‘Monday’, ‘Tuesday’, ‘Wednesday’, ‘Thursday’, ‘Friday’, ‘Thursday’]&lt;/h1&gt;&lt;p&gt;​&lt;br&gt;print(len(x))  # 6&lt;br&gt;[‘Monday’, ‘Tuesday’, ‘Wednesday’, ‘Thursday’, ‘Friday’, ‘Thursday’]&lt;br&gt;6&lt;br&gt;此元素如果是一个 list，那么这个 list 将作为一个整体进行追加，注意append()和extend()的区别。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;x = [‘Monday’, ‘Tuesday’, ‘Wednesday’, ‘Thursday’, ‘Friday’]&lt;br&gt;x.append([‘Thursday’, ‘Sunday’])&lt;br&gt;print(x)  &lt;/p&gt;
&lt;h1 id=&#34;‘Monday’-‘Tuesday’-‘Wednesday’-‘Thursday’-‘Friday’-‘Thursday’-‘Sunday’&#34;&gt;&lt;a href=&#34;#‘Monday’-‘Tuesday’-‘Wednesday’-‘Thursday’-‘Friday’-‘Thursday’-‘Sunday’&#34; class=&#34;headerlink&#34; title=&#34;[‘Monday’, ‘Tuesday’, ‘Wednesday’, ‘Thursday’, ‘Friday’, [‘Thursday’, ‘Sunday’]]&#34;&gt;&lt;/a&gt;[‘Monday’, ‘Tuesday’, ‘Wednesday’, ‘Thursday’, ‘Friday’, [‘Thursday’, ‘Sunday’]]&lt;/h1&gt;&lt;p&gt;​&lt;br&gt;print(len(x))  # 6&lt;br&gt;[‘Monday’, ‘Tuesday’, ‘Wednesday’, ‘Thursday’, ‘Friday’, [‘Thursday’, ‘Sunday’]]&lt;br&gt;6&lt;br&gt;list.extend(seq) 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）&lt;br&gt;【例子】&lt;/p&gt;
&lt;p&gt;x = [‘Monday’, ‘Tuesday’, ‘Wednesday’, ‘Thursday’, ‘Friday’]&lt;br&gt;x.extend([‘Thursday’, ‘Sunday’])&lt;br&gt;print(x)  &lt;/p&gt;
&lt;h1 id=&#34;‘Monday’-‘Tuesday’-‘Wednesday’-‘Thursday’-‘Friday’-‘Thursday’-‘Sunday’-1&#34;&gt;&lt;a href=&#34;#‘Monday’-‘Tuesday’-‘Wednesday’-‘Thursday’-‘Friday’-‘Thursday’-‘Sunday’-1&#34; class=&#34;headerlink&#34; title=&#34;[‘Monday’, ‘Tuesday’, ‘Wednesday’, ‘Thursday’, ‘Friday’, ‘Thursday’, ‘Sunday’]&#34;&gt;&lt;/a&gt;[‘Monday’, ‘Tuesday’, ‘Wednesday’, ‘Thursday’, ‘Friday’, ‘Thursday’, ‘Sunday’]&lt;/h1&gt;&lt;p&gt;​&lt;br&gt;print(len(x))  # 7&lt;br&gt;[‘Monday’, ‘Tuesday’, ‘Wednesday’, ‘Thursday’, ‘Friday’, ‘Thursday’, ‘Sunday’]&lt;br&gt;7&lt;br&gt;严格来说 append 是追加，把一个东西整体添加在列表后，而 extend 是扩展，把一个东西里的所有元素添加在列表后。&lt;/p&gt;
&lt;p&gt;list.insert(index, obj) 在编号 index 位置插入 obj。&lt;br&gt;【例子】&lt;/p&gt;
&lt;p&gt;x = [‘Monday’, ‘Tuesday’, ‘Wednesday’, ‘Thursday’, ‘Friday’]&lt;br&gt;x.insert(2, ‘Sunday’)&lt;br&gt;print(x)&lt;/p&gt;
&lt;h1 id=&#34;‘Monday’-‘Tuesday’-‘Sunday’-‘Wednesday’-‘Thursday’-‘Friday’&#34;&gt;&lt;a href=&#34;#‘Monday’-‘Tuesday’-‘Sunday’-‘Wednesday’-‘Thursday’-‘Friday’&#34; class=&#34;headerlink&#34; title=&#34;[‘Monday’, ‘Tuesday’, ‘Sunday’, ‘Wednesday’, ‘Thursday’, ‘Friday’]&#34;&gt;&lt;/a&gt;[‘Monday’, ‘Tuesday’, ‘Sunday’, ‘Wednesday’, ‘Thursday’, ‘Friday’]&lt;/h1&gt;&lt;p&gt;​&lt;br&gt;print(len(x))  # 6&lt;br&gt;[‘Monday’, ‘Tuesday’, ‘Sunday’, ‘Wednesday’, ‘Thursday’, ‘Friday’]&lt;br&gt;6&lt;br&gt;4. 删除列表中的元素&lt;br&gt;list.remove(obj) 移除列表中某个值的第一个匹配项&lt;br&gt;【例子】&lt;/p&gt;
&lt;p&gt;x = [‘Monday’, ‘Tuesday’, ‘Wednesday’, ‘Thursday’, ‘Friday’]&lt;br&gt;x.remove(‘Monday’)&lt;br&gt;print(x)  # [‘Tuesday’, ‘Wednesday’, ‘Thursday’, ‘Friday’]&lt;br&gt;[‘Tuesday’, ‘Wednesday’, ‘Thursday’, ‘Friday’]&lt;br&gt;list.pop([index=-1]) 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值&lt;br&gt;【例子】&lt;/p&gt;
&lt;p&gt;x = [‘Monday’, ‘Tuesday’, ‘Wednesday’, ‘Thursday’, ‘Friday’]&lt;br&gt;y = x.pop()&lt;br&gt;print(y)  # Friday&lt;br&gt;​&lt;br&gt;y = x.pop(0)&lt;br&gt;print(y)  # Monday&lt;br&gt;​&lt;br&gt;y = x.pop(-2)&lt;br&gt;print(y)  # Wednesday&lt;br&gt;print(x)  # [‘Tuesday’, ‘Thursday’]&lt;br&gt;Friday&lt;br&gt;Monday&lt;br&gt;Wednesday&lt;br&gt;[‘Tuesday’, ‘Thursday’]&lt;br&gt;remove 和 pop 都可以删除元素，前者是指定具体要删除的元素，后者是指定一个索引。&lt;/p&gt;
&lt;p&gt;del var1[, var2 ……] 删除单个或多个对象。&lt;br&gt;【例子】&lt;/p&gt;
&lt;p&gt;如果知道要删除的元素在列表中的位置，可使用del语句。&lt;/p&gt;
&lt;p&gt;x = [‘Monday’, ‘Tuesday’, ‘Wednesday’, ‘Thursday’, ‘Friday’]&lt;br&gt;del x[0:2]&lt;br&gt;print(x)  # [‘Wednesday’, ‘Thursday’, ‘Friday’]&lt;br&gt;[‘Wednesday’, ‘Thursday’, ‘Friday’]&lt;br&gt;如果你要从列表中删除一个元素，且不再以任何方式使用它，就使用del语句；如果你要在删除元素后还能继续使用它，就使用方法pop()。&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;获取列表中的元素&lt;br&gt;通过元素的索引值，从列表获取单个元素，注意，列表索引值是从0开始的。&lt;br&gt;通过将索引指定为-1，可让Python返回最后一个列表元素，索引 -2 返回倒数第二个列表元素，以此类推。&lt;br&gt;【例子】&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;x = [‘Monday’, ‘Tuesday’, ‘Wednesday’, [‘Thursday’, ‘Friday’]]&lt;br&gt;print(x[0], type(x[0]))  # Monday &amp;lt;class ‘str’&amp;gt;&lt;br&gt;print(x[-1], type(x[-1]))  # [‘Thursday’, ‘Friday’] &amp;lt;class ‘list’&amp;gt;&lt;br&gt;print(x[-2], type(x[-2]))  # Wednesday &amp;lt;class ‘str’&amp;gt;&lt;br&gt;Monday &amp;lt;class ‘str’&amp;gt;&lt;br&gt;[‘Thursday’, ‘Friday’] &amp;lt;class ‘list’&amp;gt;&lt;br&gt;Wednesday &amp;lt;class ‘str’&amp;gt;&lt;br&gt;切片的通用写法是 start : stop : step&lt;/p&gt;
&lt;p&gt;情况 1 - “start :”&lt;br&gt;以 step 为 1 (默认) 从编号 start 往列表尾部切片。&lt;br&gt;【例子】&lt;/p&gt;
&lt;p&gt;x = [‘Monday’, ‘Tuesday’, ‘Wednesday’, ‘Thursday’, ‘Friday’]&lt;br&gt;print(x[3:])  # [‘Thursday’, ‘Friday’]&lt;br&gt;print(x[-3:])  # [‘Wednesday’, ‘Thursday’, ‘Friday’]&lt;br&gt;[‘Thursday’, ‘Friday’]&lt;br&gt;[‘Wednesday’, ‘Thursday’, ‘Friday’]&lt;br&gt;情况 2 - “: stop”&lt;br&gt;以 step 为 1 (默认) 从列表头部往编号 stop 切片。&lt;br&gt;【例子】&lt;/p&gt;
&lt;p&gt;week = [‘Monday’, ‘Tuesday’, ‘Wednesday’, ‘Thursday’, ‘Friday’]&lt;br&gt;print(week[:3])  # [‘Monday’, ‘Tuesday’, ‘Wednesday’]&lt;br&gt;print(week[:-3])  # [‘Monday’, ‘Tuesday’]&lt;br&gt;[‘Monday’, ‘Tuesday’, ‘Wednesday’]&lt;br&gt;[‘Monday’, ‘Tuesday’]&lt;br&gt;情况 3 - “start : stop”&lt;br&gt;以 step 为 1 (默认) 从编号 start 往编号 stop 切片。&lt;br&gt;【例子】&lt;/p&gt;
&lt;p&gt;week = [‘Monday’, ‘Tuesday’, ‘Wednesday’, ‘Thursday’, ‘Friday’]&lt;br&gt;print(week[1:3])  # [‘Tuesday’, ‘Wednesday’]&lt;br&gt;print(week[-3:-1])  # [‘Wednesday’, ‘Thursday’]&lt;br&gt;[‘Tuesday’, ‘Wednesday’]&lt;br&gt;[‘Wednesday’, ‘Thursday’]&lt;br&gt;情况 4 - “start : stop : step”&lt;br&gt;以具体的 step 从编号 start 往编号 stop 切片。注意最后把 step 设为 -1，相当于将列表反向排列。&lt;br&gt;【例子】&lt;/p&gt;
&lt;p&gt;week = [‘Monday’, ‘Tuesday’, ‘Wednesday’, ‘Thursday’, ‘Friday’]&lt;br&gt;print(week[1:4:2])  # [‘Tuesday’, ‘Thursday’]&lt;br&gt;print(week[:4:2])  # [‘Monday’, ‘Wednesday’]&lt;br&gt;print(week[1::2])  # [‘Tuesday’, ‘Thursday’]&lt;br&gt;print(week[::-1])  &lt;/p&gt;
&lt;h1 id=&#34;‘Friday’-‘Thursday’-‘Wednesday’-‘Tuesday’-‘Monday’&#34;&gt;&lt;a href=&#34;#‘Friday’-‘Thursday’-‘Wednesday’-‘Tuesday’-‘Monday’&#34; class=&#34;headerlink&#34; title=&#34;[‘Friday’, ‘Thursday’, ‘Wednesday’, ‘Tuesday’, ‘Monday’]&#34;&gt;&lt;/a&gt;[‘Friday’, ‘Thursday’, ‘Wednesday’, ‘Tuesday’, ‘Monday’]&lt;/h1&gt;&lt;p&gt;[‘Tuesday’, ‘Thursday’]&lt;br&gt;[‘Monday’, ‘Wednesday’]&lt;br&gt;[‘Tuesday’, ‘Thursday’]&lt;br&gt;[‘Friday’, ‘Thursday’, ‘Wednesday’, ‘Tuesday’, ‘Monday’]&lt;br&gt;情况 5 - “ : “&lt;br&gt;复制列表中的所有元素（浅拷贝）。&lt;br&gt;【例子】&lt;/p&gt;
&lt;p&gt;eek = [‘Monday’, ‘Tuesday’, ‘Wednesday’, ‘Thursday’, ‘Friday’]&lt;br&gt;print(week[:])  &lt;/p&gt;
&lt;h1 id=&#34;‘Monday’-‘Tuesday’-‘Wednesday’-‘Thursday’-‘Friday’&#34;&gt;&lt;a href=&#34;#‘Monday’-‘Tuesday’-‘Wednesday’-‘Thursday’-‘Friday’&#34; class=&#34;headerlink&#34; title=&#34;[‘Monday’, ‘Tuesday’, ‘Wednesday’, ‘Thursday’, ‘Friday’]&#34;&gt;&lt;/a&gt;[‘Monday’, ‘Tuesday’, ‘Wednesday’, ‘Thursday’, ‘Friday’]&lt;/h1&gt;&lt;p&gt;[‘Monday’, ‘Tuesday’, ‘Wednesday’, ‘Thursday’, ‘Friday’]&lt;br&gt;【例子】浅拷贝与深拷贝&lt;/p&gt;
&lt;p&gt;list1 = [123, 456, 789, 213]&lt;br&gt;list2 = list1&lt;br&gt;list3 = list1[:]&lt;br&gt;​&lt;br&gt;print(list2)  # [123, 456, 789, 213]&lt;br&gt;print(list3)  # [123, 456, 789, 213]&lt;br&gt;list1.sort()&lt;br&gt;print(list2)  # [123, 213, 456, 789]&lt;br&gt;print(list3)  # [123, 456, 789, 213]&lt;br&gt;​&lt;br&gt;list1 = [[123, 456], [789, 213]]&lt;br&gt;list2 = list1&lt;br&gt;list3 = list1[:]&lt;br&gt;print(list2)  # [[123, 456], [789, 213]]&lt;br&gt;print(list3)  # [[123, 456], [789, 213]]&lt;br&gt;list1[0][0] = 111&lt;br&gt;print(list2)  # [[111, 456], [789, 213]]&lt;br&gt;print(list3)  # [[111, 456], [789, 213]]&lt;br&gt;[123, 456, 789, 213]&lt;br&gt;[123, 456, 789, 213]&lt;br&gt;[123, 213, 456, 789]&lt;br&gt;[123, 456, 789, 213]&lt;br&gt;[[123, 456], [789, 213]]&lt;br&gt;[[123, 456], [789, 213]]&lt;br&gt;[[111, 456], [789, 213]]&lt;br&gt;[[111, 456], [789, 213]]&lt;br&gt;6. 列表的常用操作符&lt;br&gt;等号操作符：==&lt;br&gt;连接操作符 +&lt;br&gt;重复操作符 *&lt;br&gt;成员关系操作符 in、not in&lt;br&gt;「等号 ==」，只有成员、成员位置都相同时才返回True。&lt;/p&gt;
&lt;p&gt;列表拼接有两种方式，用「加号 +」和「乘号 *」，前者首尾拼接，后者复制拼接。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;list1 = [123, 456]
list2 = [456, 123]
list3 = [123, 456]
​
print(list1 == list2)  # False
print(list1 == list3)  # True
​
list4 = list1 + list2  # extend()
print(list4)  # [123, 456, 456, 123]
​
list5 = list3 * 3
print(list5)  # [123, 456, 123, 456, 123, 456]
​
list3 *= 3
print(list3)  # [123, 456, 123, 456, 123, 456]
​
print(123 in list3)  # True
print(456 not in list3)  # False&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;False&lt;br&gt;True&lt;br&gt;[123, 456, 456, 123]&lt;br&gt;[123, 456, 123, 456, 123, 456]&lt;br&gt;[123, 456, 123, 456, 123, 456]&lt;br&gt;True&lt;br&gt;False&lt;br&gt;前面三种方法（append, extend, insert）可对列表增加元素，它们没有返回值，是直接修改了原数据对象。 而将两个list相加，需要创建新的 list 对象，从而需要消耗额外的内存，特别是当 list 较大时，尽量不要使用 “+” 来添加list。&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;列表的其它方法&lt;br&gt;list.count(obj) 统计某个元素在列表中出现的次数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;list1 = [123, 456] * 3
print(list1)  # [123, 456, 123, 456, 123, 456]
num = list1.count(123)
print(num)  # 3
[123, 456, 123, 456, 123, 456]
3
list.index(x[, start[, end]]) 从列表中找出某个值第一个匹配项的索引位置&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;list1 = [123, 456] * 5&lt;br&gt;print(list1.index(123))  # 0&lt;br&gt;print(list1.index(123, 1))  # 2&lt;br&gt;print(list1.index(123, 3, 7))  # 4&lt;br&gt;0&lt;br&gt;2&lt;br&gt;4&lt;br&gt;list.reverse() 反向列表中元素&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;x = [123, 456, 789]
x.reverse()
print(x)  # [789, 456, 123]
[789, 456, 123]
list.sort(key=None, reverse=False) 对原列表进行排序。&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;key – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。&lt;br&gt;reverse – 排序规则，reverse = True 降序， reverse = False 升序（默认）。&lt;br&gt;该方法没有返回值，但是会对列表的对象进行排序。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;x = [123, 456, 789, 213]
x.sort()
print(x)
# [123, 213, 456, 789]
​
x.sort(reverse=True)
print(x)
# [789, 456, 213, 123]
​
​
# 获取列表的第二个元素
def takeSecond(elem):
    return elem[1]
​
​
x = [(2, 2), (3, 4), (4, 1), (1, 3)]
x.sort(key=takeSecond)
print(x)
# [(4, 1), (2, 2), (1, 3), (3, 4)]
​
x.sort(key=lambda a: a[0])
print(x)
# [(1, 3), (2, 2), (3, 4), (4, 1)]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[123, 213, 456, 789]&lt;br&gt;[789, 456, 213, 123]&lt;br&gt;[(4, 1), (2, 2), (1, 3), (3, 4)]&lt;br&gt;[(1, 3), (2, 2), (3, 4), (4, 1)]&lt;br&gt;元组&lt;br&gt;「元组」定义语法为：(元素1, 元素2, …, 元素n)&lt;/p&gt;
&lt;p&gt;小括号把所有元素绑在一起&lt;br&gt;逗号将每个元素一一分开&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建和访问一个元组&lt;br&gt;Python 的元组与列表类似，不同之处在于tuple被创建后就不能对其进行修改，类似字符串。&lt;br&gt;元组使用小括号，列表使用方括号。&lt;br&gt;元组与列表类似，也用整数来对它进行索引 (indexing) 和切片 (slicing)。&lt;br&gt;【例子】&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;t1 = (1, 10.31, &amp;#39;python&amp;#39;)
t2 = 1, 10.31, &amp;#39;python&amp;#39;
print(t1, type(t1))
# (1, 10.31, &amp;#39;python&amp;#39;) &amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt;
​
print(t2, type(t2))
# (1, 10.31, &amp;#39;python&amp;#39;) &amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt;
​
tuple1 = (1, 2, 3, 4, 5, 6, 7, 8)
print(tuple1[1])  # 2
print(tuple1[5:])  # (6, 7, 8)
print(tuple1[:5])  # (1, 2, 3, 4, 5)
tuple2 = tuple1[:]
print(tuple2)  # (1, 2, 3, 4, 5, 6, 7, 8)&lt;/code&gt;&lt;/pre&gt;
(1, 10.31, ‘python’) &amp;lt;class ‘tuple’&amp;gt;&lt;br&gt;(1, 10.31, ‘python’) &amp;lt;class ‘tuple’&amp;gt;&lt;br&gt;2&lt;br&gt;(6, 7, 8)&lt;br&gt;(1, 2, 3, 4, 5)&lt;br&gt;(1, 2, 3, 4, 5, 6, 7, 8)&lt;br&gt;创建元组可以用小括号 ()，也可以什么都不用，为了可读性，建议还是用 ()。&lt;br&gt;元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用。&lt;br&gt;【例子】&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;x = (1)
print(type(x))  # &amp;lt;class &amp;#39;int&amp;#39;&amp;gt;
x = 2, 3, 4, 5
print(type(x))  # &amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt;
x = []
print(type(x))  # &amp;lt;class &amp;#39;list&amp;#39;&amp;gt;
x = ()
print(type(x))  # &amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt;
x = (1,)
print(type(x))  # &amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&amp;lt;class ‘int’&amp;gt;&lt;br&gt;&amp;lt;class ‘tuple’&amp;gt;&lt;br&gt;&amp;lt;class ‘list’&amp;gt;&lt;br&gt;&amp;lt;class ‘tuple’&amp;gt;&lt;br&gt;&amp;lt;class ‘tuple’&amp;gt;&lt;br&gt;【例子】&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;print(8 * (8))  # 64
print(8 * (8,))  # (8, 8, 8, 8, 8, 8, 8, 8)
64
(8, 8, 8, 8, 8, 8, 8, 8)
【例子】创建二维元组。
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;x = (1, 10.31, ‘python’), (‘data’, 11)&lt;br&gt;print(x)&lt;/p&gt;
&lt;h1 id=&#34;1-10-31-‘python’-‘data’-11&#34;&gt;&lt;a href=&#34;#1-10-31-‘python’-‘data’-11&#34; class=&#34;headerlink&#34; title=&#34;((1, 10.31, ‘python’), (‘data’, 11))&#34;&gt;&lt;/a&gt;((1, 10.31, ‘python’), (‘data’, 11))&lt;/h1&gt;&lt;p&gt;​&lt;br&gt;print(x[0])&lt;/p&gt;
&lt;h1 id=&#34;1-10-31-‘python’&#34;&gt;&lt;a href=&#34;#1-10-31-‘python’&#34; class=&#34;headerlink&#34; title=&#34;(1, 10.31, ‘python’)&#34;&gt;&lt;/a&gt;(1, 10.31, ‘python’)&lt;/h1&gt;&lt;p&gt;print(x[0][0], x[0][1], x[0][2])&lt;/p&gt;
&lt;h1 id=&#34;1-10-31-python&#34;&gt;&lt;a href=&#34;#1-10-31-python&#34; class=&#34;headerlink&#34; title=&#34;1 10.31 python&#34;&gt;&lt;/a&gt;1 10.31 python&lt;/h1&gt;&lt;p&gt;​&lt;br&gt;print(x[0][0:2])&lt;/p&gt;
&lt;h1 id=&#34;1-10-31&#34;&gt;&lt;a href=&#34;#1-10-31&#34; class=&#34;headerlink&#34; title=&#34;(1, 10.31)&#34;&gt;&lt;/a&gt;(1, 10.31)&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;((1, 10.31, &amp;#39;python&amp;#39;), (&amp;#39;data&amp;#39;, 11))
(1, 10.31, &amp;#39;python&amp;#39;)
1 10.31 python
(1, 10.31)
2. 更新和删除一个元组
【例子】
``` python
week = (&amp;#39;Monday&amp;#39;, &amp;#39;Tuesday&amp;#39;, &amp;#39;Thursday&amp;#39;, &amp;#39;Friday&amp;#39;)
week = week[:2] + (&amp;#39;Wednesday&amp;#39;,) + week[2:]
print(week)  # (&amp;#39;Monday&amp;#39;, &amp;#39;Tuesday&amp;#39;, &amp;#39;Wednesday&amp;#39;, &amp;#39;Thursday&amp;#39;, &amp;#39;Friday&amp;#39;)
(&amp;#39;Monday&amp;#39;, &amp;#39;Tuesday&amp;#39;, &amp;#39;Wednesday&amp;#39;, &amp;#39;Thursday&amp;#39;, &amp;#39;Friday&amp;#39;)
【例子】元组有不可更改 (immutable) 的性质，因此不能直接给元组的元素赋值，但是只要元组中的元素可更改 (mutable)，那么我们可以直接更改其元素，注意这跟赋值其元素不同。

t1 = (1, 2, 3, [4, 5, 6])
print(t1)  # (1, 2, 3, [4, 5, 6])
​
t1[3][0] = 9
print(t1)  # (1, 2, 3, [9, 5, 6])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(1, 2, 3, [4, 5, 6])&lt;br&gt;(1, 2, 3, [9, 5, 6])&lt;br&gt;3. 元组相关的操作符&lt;br&gt;等号操作符：==&lt;br&gt;连接操作符 +&lt;br&gt;重复操作符 *&lt;br&gt;成员关系操作符 in、not in&lt;br&gt;「等号 ==」，只有成员、成员位置都相同时才返回True。&lt;/p&gt;
&lt;p&gt;元组拼接有两种方式，用「加号 +」和「乘号 *」，前者首尾拼接，后者复制拼接。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;t1 = (123, 456)
t2 = (456, 123)
t3 = (123, 456)
​
print(t1 == t2)  # False
print(t1 == t3)  # True
​
t4 = t1 + t2
print(t4)  # (123, 456, 456, 123)
​
t5 = t3 * 3
print(t5)  # (123, 456, 123, 456, 123, 456)
​
t3 *= 3
print(t3)  # (123, 456, 123, 456, 123, 456)
​
print(123 in t3)  # True
print(456 not in t3)  # False&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;False&lt;br&gt;True&lt;br&gt;(123, 456, 456, 123)&lt;br&gt;(123, 456, 123, 456, 123, 456)&lt;br&gt;(123, 456, 123, 456, 123, 456)&lt;br&gt;True&lt;br&gt;False&lt;br&gt;4. 内置方法&lt;br&gt;元组大小和内容都不可更改，因此只有 count 和 index 两种方法。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;t = (1, 10.31, &amp;#39;python&amp;#39;)
print(t.count(&amp;#39;python&amp;#39;))  # 1
print(t.index(10.31))  # \1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1&lt;br&gt;1&lt;br&gt;count(‘python’) 是记录在元组 t 中该元素出现几次，显然是 1 次&lt;br&gt;index(10.31) 是找到该元素在元组 t 的索引，显然是 1&lt;br&gt;5. 解压元组&lt;br&gt;【例子】解压（unpack）一维元组（有几个元素左边括号定义几个变量）&lt;/p&gt;
&lt;p&gt;t = (1, 10.31, ‘python’)&lt;br&gt;(a, b, c) = t&lt;br&gt;print(a, b, c)&lt;/p&gt;
&lt;h1 id=&#34;1-10-31-python-1&#34;&gt;&lt;a href=&#34;#1-10-31-python-1&#34; class=&#34;headerlink&#34; title=&#34;1 10.31 python&#34;&gt;&lt;/a&gt;1 10.31 python&lt;/h1&gt;&lt;p&gt;1 10.31 python&lt;br&gt;【例子】解压二维元组（按照元组里的元组结构来定义变量）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;t = (1, 10.31, (&amp;#39;OK&amp;#39;, &amp;#39;python&amp;#39;))
(a, b, (c, d)) = t
print(a, b, c, d)
# 1 10.31 OK python&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1 10.31 OK python&lt;br&gt;【例子】如果你只想要元组其中几个元素，用通配符「*」，英文叫 wildcard，在计算机语言中代表一个或多个元素。下例就是把多个元素丢给了 rest 变量。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;t = 1, 2, 3, 4, 5
a, b, *rest, c = t
print(a, b, c)  # 1 2 5
print(rest)  # [3, 4]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1 2 5&lt;br&gt;[3, 4]&lt;br&gt;【例子】如果你根本不在乎 rest 变量，那么就用通配符「*」加上下划线「_」。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;t = 1, 2, 3, 4, 5
a, b, *_ = t
print(a, b)  # 1 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1 2&lt;br&gt;字符串&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;字符串的定义&lt;br&gt;Python 中字符串被定义为引号之间的字符集合。&lt;br&gt;Python 支持使用成对的 单引号 或 双引号。&lt;br&gt;【例子】&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;t1 = &amp;#39;i love Python!&amp;#39;
print(t1, type(t1))
# i love Python! &amp;lt;class &amp;#39;str&amp;#39;&amp;gt;
​
t2 = &amp;quot;I love Python!&amp;quot;
print(t2, type(t2))
# I love Python! &amp;lt;class &amp;#39;str&amp;#39;&amp;gt;
​
print(5 + 8)  # 13
print(&amp;#39;5&amp;#39; + &amp;#39;8&amp;#39;)  # 58&lt;/code&gt;&lt;/pre&gt;
i love Python! &amp;lt;class ‘str’&amp;gt;&lt;br&gt;I love Python! &amp;lt;class ‘str’&amp;gt;&lt;br&gt;13&lt;br&gt;58&lt;br&gt;Python 的常用转义字符&lt;br&gt;转义字符    描述&lt;br&gt;\    反斜杠符号&lt;br&gt;&amp;#39;    单引号&lt;br&gt;&amp;quot;    双引号&lt;br&gt;\n    换行&lt;br&gt;\t    横向制表符(TAB)&lt;br&gt;\r    回车&lt;br&gt;【例子】如果字符串中需要出现单引号或双引号，可以使用转义符号\对字符串中的符号进行转义。&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;print(&amp;#39;let\&amp;#39;s go&amp;#39;)  # let&amp;#39;s go
print(&amp;quot;let&amp;#39;s go&amp;quot;)  # let&amp;#39;s go
print(&amp;#39;C:\\now&amp;#39;)  # C:\now
print(&amp;quot;C:\\Program Files\\Intel\\Wifi\\Help&amp;quot;)
# C:\Program Files\Intel\Wifi\Help&lt;/code&gt;&lt;/pre&gt;
let’s go&lt;br&gt;let’s go&lt;br&gt;C:\now&lt;br&gt;C:\Program Files\Intel\Wifi\Help&lt;br&gt;【例子】原始字符串只需要在字符串前边加一个英文字母 r 即可。&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;print(r&amp;#39;C:\Program Files\Intel\Wifi\Help&amp;#39;)  
# C:\Program Files\Intel\Wifi\Help&lt;/code&gt;&lt;/pre&gt;
C:\Program Files\Intel\Wifi\Help&lt;br&gt;【例子】三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;para_str = &amp;quot;&amp;quot;&amp;quot;这是一个多行字符串的实例
多行字符串可以使用制表符
TAB ( \t )。
也可以使用换行符 [ \n ]。
&amp;quot;&amp;quot;&amp;quot;
print(para_str)
# 这是一个多行字符串的实例
# 多行字符串可以使用制表符
# TAB (    )。
# 也可以使用换行符 [
#  ]。
​
para_str = &amp;#39;&amp;#39;&amp;#39;这是一个多行字符串的实例
多行字符串可以使用制表符
TAB ( \t )。
也可以使用换行符 [ \n ]。
&amp;#39;&amp;#39;&amp;#39;
print(para_str)
# 这是一个多行字符串的实例
# 多行字符串可以使用制表符
# TAB (      )。
# 也可以使用换行符 [ 
#  ]。&lt;/code&gt;&lt;/pre&gt;
这是一个多行字符串的实例&lt;br&gt;多行字符串可以使用制表符&lt;br&gt;TAB (      )。&lt;br&gt;也可以使用换行符 [&lt;br&gt;]。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这是一个多行字符串的实例&lt;br&gt;多行字符串可以使用制表符&lt;br&gt;TAB (      )。&lt;br&gt;也可以使用换行符 [&lt;br&gt; ]。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;字符串的切片与拼接&lt;br&gt;类似于元组具有不可修改性&lt;br&gt;从 0 开始 (和 Java 一样)&lt;br&gt;切片通常写成 start:end 这种形式，包括「start 索引」对应的元素，不包括「end索引」对应的元素。&lt;br&gt;索引值可正可负，正索引从 0 开始，从左往右；负索引从 -1 开始，从右往左。使用负数索引时，会从最后一个元素开始计数。最后一个元素的位置编号是 -1。&lt;br&gt;【例子】&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;str1 = &amp;#39;I Love LsgoGroup&amp;#39;
print(str1[:6])  # I Love
print(str1[5])  # e
print(str1[:6] + &amp;quot; 插入的字符串 &amp;quot; + str1[6:])  
# I Love 插入的字符串  LsgoGroup
​
s = &amp;#39;Python&amp;#39;
print(s)  # Python
print(s[2:4])  # th
print(s[-5:-2])  # yth
print(s[2])  # t
print(s[-1])  # n&lt;/code&gt;&lt;/pre&gt;
I Love&lt;br&gt;e&lt;br&gt;I Love 插入的字符串  LsgoGroup&lt;br&gt;Python&lt;br&gt;th&lt;br&gt;yth&lt;br&gt;t&lt;br&gt;n&lt;/li&gt;
&lt;li&gt;字符串的常用内置方法&lt;br&gt;capitalize() 将字符串的第一个字符转换为大写。&lt;br&gt;【例子】&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;str2 = &amp;#39;xiaoxie&amp;#39;
print(str2.capitalize())  # Xiaoxie&lt;/code&gt;&lt;/pre&gt;
Xiaoxie&lt;br&gt;lower() 转换字符串中所有大写字符为小写。&lt;br&gt;upper() 转换字符串中的小写字母为大写。&lt;br&gt;swapcase() 将字符串中大写转换为小写，小写转换为大写。&lt;br&gt;【例子】&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;str2 = &amp;quot;DAXIExiaoxie&amp;quot;
print(str2.lower())  # daxiexiaoxie
print(str2.upper())  # DAXIEXIAOXIE
print(str2.swapcase())  # daxieXIAOXIE&lt;/code&gt;&lt;/pre&gt;
daxiexiaoxie&lt;br&gt;DAXIEXIAOXIE&lt;br&gt;daxieXIAOXIE&lt;br&gt;count(str, beg= 0,end=len(string)) 返回str在 string 里面出现的次数，如果beg或者end指定则返回指定范围内str出现的次数。&lt;br&gt;【例子】&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;str2 = &amp;quot;DAXIExiaoxie&amp;quot;
print(str2.count(&amp;#39;xi&amp;#39;))  # 2&lt;/code&gt;&lt;/pre&gt;
2&lt;br&gt;endswith(suffix, beg=0, end=len(string)) 检查字符串是否以指定子字符串 suffix 结束，如果是，返回 True，否则返回 False。如果 beg 和 end 指定值，则在指定范围内检查。&lt;br&gt;startswith(substr, beg=0,end=len(string)) 检查字符串是否以指定子字符串 substr 开头，如果是，返回 True，否则返回 False。如果 beg 和 end 指定值，则在指定范围内检查。&lt;br&gt;【例子】&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;str2 = &amp;quot;DAXIExiaoxie&amp;quot;
print(str2.endswith(&amp;#39;ie&amp;#39;))  # True
print(str2.endswith(&amp;#39;xi&amp;#39;))  # False
print(str2.startswith(&amp;#39;Da&amp;#39;))  # False
print(str2.startswith(&amp;#39;DA&amp;#39;))  # True&lt;/code&gt;&lt;/pre&gt;
True&lt;br&gt;False&lt;br&gt;False&lt;br&gt;True&lt;br&gt;find(str, beg=0, end=len(string)) 检测 str 是否包含在字符串中，如果指定范围 beg 和 end，则检查是否包含在指定范围内，如果包含，返回开始的索引值，否则返回 -1。&lt;br&gt;rfind(str, beg=0,end=len(string)) 类似于 find() 函数，不过是从右边开始查找。&lt;br&gt;【例子】&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;str2 = &amp;quot;DAXIExiaoxie&amp;quot;
print(str2.find(&amp;#39;xi&amp;#39;))  # 5
print(str2.find(&amp;#39;ix&amp;#39;))  # -1
print(str2.rfind(&amp;#39;xi&amp;#39;))  # 9&lt;/code&gt;&lt;/pre&gt;
5&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;-1&lt;br&gt;9&lt;br&gt;isnumeric() 如果字符串中只包含数字字符，则返回 True，否则返回 False。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;str3 = &amp;#39;12345&amp;#39;
print(str3.isnumeric())  # True
str3 += &amp;#39;a&amp;#39;
print(str3.isnumeric())  # False&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;True&lt;br&gt;False&lt;br&gt;ljust(width[, fillchar])返回一个原字符串左对齐，并使用fillchar（默认空格）填充至长度width的新字符串。&lt;br&gt;rjust(width[, fillchar])返回一个原字符串右对齐，并使用fillchar（默认空格）填充至长度width的新字符串。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;str4 = &amp;#39;1101&amp;#39;
print(str4.ljust(8, &amp;#39;0&amp;#39;))  # 11010000
print(str4.rjust(8, &amp;#39;0&amp;#39;))  # 00001101&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;11010000&lt;br&gt;00001101&lt;br&gt;lstrip([chars]) 截掉字符串左边的空格或指定字符。&lt;br&gt;rstrip([chars]) 删除字符串末尾的空格或指定字符。&lt;br&gt;strip([chars]) 在字符串上执行lstrip()和rstrip()。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;str5 = &amp;#39; I Love LsgoGroup &amp;#39;
print(str5.lstrip())  # &amp;#39;I Love LsgoGroup &amp;#39;
print(str5.lstrip().strip(&amp;#39;I&amp;#39;))  # &amp;#39; Love LsgoGroup &amp;#39;
print(str5.rstrip())  # &amp;#39; I Love LsgoGroup&amp;#39;
print(str5.strip())  # &amp;#39;I Love LsgoGroup&amp;#39;
print(str5.strip().strip(&amp;#39;p&amp;#39;))  # &amp;#39;I Love LsgoGrou&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I Love LsgoGroup&lt;br&gt; Love LsgoGroup&lt;br&gt; I Love LsgoGroup&lt;br&gt;I Love LsgoGroup&lt;br&gt;I Love LsgoGrou&lt;br&gt;partition(sub) 找到子字符串sub，把字符串分为一个三元组(pre_sub,sub,fol_sub)，如果字符串中不包含sub则返回(‘原字符串’,’’,’’)。&lt;br&gt;rpartition(sub)类似于partition()方法，不过是从右边开始查找。&lt;br&gt;【例子】&lt;/p&gt;
&lt;p&gt;str5 = ‘ I Love LsgoGroup ‘&lt;br&gt;print(str5.strip().partition(‘o’))  # (‘I L’, ‘o’, ‘ve LsgoGroup’)&lt;br&gt;print(str5.strip().partition(‘m’))  # (‘I Love LsgoGroup’, ‘’, ‘’)&lt;br&gt;print(str5.strip().rpartition(‘o’))  # (‘I Love LsgoGr’, ‘o’, ‘up’)&lt;br&gt;(‘I L’, ‘o’, ‘ve LsgoGroup’)&lt;br&gt;(‘I Love LsgoGroup’, ‘’, ‘’)&lt;br&gt;(‘I Love LsgoGr’, ‘o’, ‘up’)&lt;br&gt;replace(old, new [, max]) 把 将字符串中的old替换成new，如果max指定，则替换不超过max次。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;str5 = &amp;#39; I Love LsgoGroup &amp;#39;
print(str5.strip().replace(&amp;#39;I&amp;#39;, &amp;#39;We&amp;#39;))  # We Love LsgoGroup&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We Love LsgoGroup&lt;br&gt;split(str=””, num) 不带参数默认是以空格为分隔符切片字符串，如果num参数有设置，则仅分隔num个子字符串，返回切片后的子字符串拼接的列表。&lt;br&gt;【例子】&lt;/p&gt;
&lt;p&gt;str5 = ‘ I Love LsgoGroup ‘&lt;br&gt;print(str5.strip().split())  # [‘I’, ‘Love’, ‘LsgoGroup’]&lt;br&gt;print(str5.strip().split(‘o’))  # [‘I L’, ‘ve Lsg’, ‘Gr’, ‘up’]&lt;br&gt;[‘I’, ‘Love’, ‘LsgoGroup’]&lt;br&gt;[‘I L’, ‘ve Lsg’, ‘Gr’, ‘up’]&lt;br&gt;【例子】&lt;/p&gt;
&lt;p&gt;u = “&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5iYWlkdS5jb20uY24mcXVvdDsv&#34;&gt;www.baidu.com.cn&amp;quot;&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;使用默认分隔符&#34;&gt;&lt;a href=&#34;#使用默认分隔符&#34; class=&#34;headerlink&#34; title=&#34;使用默认分隔符&#34;&gt;&lt;/a&gt;使用默认分隔符&lt;/h1&gt;&lt;p&gt;print(u.split())  # [‘&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5iYWlkdS5jb20uY24mLyMzOTtd&#34;&gt;www.baidu.com.cn&amp;#39;]&lt;/span&gt;&lt;br&gt;​&lt;/p&gt;
&lt;h1 id=&#34;以”-”为分隔符&#34;&gt;&lt;a href=&#34;#以”-”为分隔符&#34; class=&#34;headerlink&#34; title=&#34;以”.”为分隔符&#34;&gt;&lt;/a&gt;以”.”为分隔符&lt;/h1&gt;&lt;p&gt;print((u.split(‘.’)))  # [‘www’, ‘baidu’, ‘com’, ‘cn’]&lt;br&gt;​&lt;/p&gt;
&lt;h1 id=&#34;分割0次&#34;&gt;&lt;a href=&#34;#分割0次&#34; class=&#34;headerlink&#34; title=&#34;分割0次&#34;&gt;&lt;/a&gt;分割0次&lt;/h1&gt;&lt;p&gt;print((u.split(“.”, 0)))  # [‘&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5iYWlkdS5jb20uY24mLyMzOTtd&#34;&gt;www.baidu.com.cn&amp;#39;]&lt;/span&gt;&lt;br&gt;​&lt;/p&gt;
&lt;h1 id=&#34;分割一次&#34;&gt;&lt;a href=&#34;#分割一次&#34; class=&#34;headerlink&#34; title=&#34;分割一次&#34;&gt;&lt;/a&gt;分割一次&lt;/h1&gt;&lt;p&gt;print((u.split(“.”, 1)))  # [‘www’, ‘baidu.com.cn’]&lt;br&gt;​&lt;/p&gt;
&lt;h1 id=&#34;分割两次&#34;&gt;&lt;a href=&#34;#分割两次&#34; class=&#34;headerlink&#34; title=&#34;分割两次&#34;&gt;&lt;/a&gt;分割两次&lt;/h1&gt;&lt;p&gt;print(u.split(“.”, 2))  # [‘www’, ‘baidu’, ‘com.cn’]&lt;br&gt;​&lt;/p&gt;
&lt;h1 id=&#34;分割两次，并取序列为1的项&#34;&gt;&lt;a href=&#34;#分割两次，并取序列为1的项&#34; class=&#34;headerlink&#34; title=&#34;分割两次，并取序列为1的项&#34;&gt;&lt;/a&gt;分割两次，并取序列为1的项&lt;/h1&gt;&lt;p&gt;print((u.split(“.”, 2)[1]))  # baidu&lt;br&gt;​&lt;/p&gt;
&lt;h1 id=&#34;分割两次，并把分割后的三个部分保存到三个变量&#34;&gt;&lt;a href=&#34;#分割两次，并把分割后的三个部分保存到三个变量&#34; class=&#34;headerlink&#34; title=&#34;分割两次，并把分割后的三个部分保存到三个变量&#34;&gt;&lt;/a&gt;分割两次，并把分割后的三个部分保存到三个变量&lt;/h1&gt;&lt;p&gt;u1, u2, u3 = u.split(“.”, 2)&lt;br&gt;print(u1)  # www&lt;br&gt;print(u2)  # baidu&lt;br&gt;print(u3)  # com.cn&lt;br&gt;[‘&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5iYWlkdS5jb20uY24mLyMzOTtd&#34;&gt;www.baidu.com.cn&amp;#39;]&lt;/span&gt;&lt;br&gt;[‘www’, ‘baidu’, ‘com’, ‘cn’]&lt;br&gt;[‘&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5iYWlkdS5jb20uY24mLyMzOTtd&#34;&gt;www.baidu.com.cn&amp;#39;]&lt;/span&gt;&lt;br&gt;[‘www’, ‘baidu.com.cn’]&lt;br&gt;[‘www’, ‘baidu’, ‘com.cn’]&lt;br&gt;baidu&lt;br&gt;www&lt;br&gt;baidu&lt;br&gt;com.cn&lt;br&gt;【例子】去掉换行符&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;c = &amp;#39;&amp;#39;&amp;#39;say
hello
baby&amp;#39;&amp;#39;&amp;#39;
​
print(c)
# say
# hello
# baby
​
print(c.split(&amp;#39;\n&amp;#39;))  # [&amp;#39;say&amp;#39;, &amp;#39;hello&amp;#39;, &amp;#39;baby&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;say&lt;br&gt;hello&lt;br&gt;baby&lt;br&gt;[‘say’, ‘hello’, ‘baby’]&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;string = &amp;quot;hello boy&amp;lt;[www.baidu.com]&amp;gt;byebye&amp;quot;
print(string.split(&amp;#39;[&amp;#39;)[1].split(&amp;#39;]&amp;#39;)[0])  # www.baidu.com
print(string.split(&amp;#39;[&amp;#39;)[1].split(&amp;#39;]&amp;#39;)[0].split(&amp;#39;.&amp;#39;))  # [&amp;#39;www&amp;#39;, &amp;#39;baidu&amp;#39;, &amp;#39;com&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5iYWlkdS5jb20v&#34;&gt;www.baidu.com&lt;/span&gt;&lt;br&gt;[‘www’, ‘baidu’, ‘com’]&lt;br&gt;splitlines([keepends]) 按照行(‘\r’, ‘\r\n’, \n’)分隔，返回一个包含各行作为元素的列表，如果参数keepends为 False，不包含换行符，如果为 True，则保留换行符。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;str6 = &amp;#39;I \n Love \n LsgoGroup&amp;#39;
print(str6.splitlines())  # [&amp;#39;I &amp;#39;, &amp;#39; Love &amp;#39;, &amp;#39; LsgoGroup&amp;#39;]
print(str6.splitlines(True))  # [&amp;#39;I \n&amp;#39;, &amp;#39; Love \n&amp;#39;, &amp;#39; LsgoGroup&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[‘I ‘, ‘ Love ‘, ‘ LsgoGroup’]&lt;br&gt;[‘I \n’, ‘ Love \n’, ‘ LsgoGroup’]&lt;br&gt;maketrans(intab, outtab) 创建字符映射的转换表，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。&lt;br&gt;translate(table, deletechars=””) 根据参数table给出的表，转换字符串的字符，要过滤掉的字符放到deletechars参数中。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;str7 = &amp;#39;this is string example....wow!!!&amp;#39;
intab = &amp;#39;aeiou&amp;#39;
outtab = &amp;#39;12345&amp;#39;
trantab = str7.maketrans(intab, outtab)
print(trantab)  # &amp;#123;97: 49, 111: 52, 117: 53, 101: 50, 105: 51&amp;#125;
print(str7.translate(trantab))  # th3s 3s str3ng 2x1mpl2....w4w!!!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;{97: 49, 101: 50, 105: 51, 111: 52, 117: 53}&lt;br&gt;th3s 3s str3ng 2x1mpl2….w4w!!!&lt;br&gt;4. 字符串格式化&lt;br&gt;format 格式化函数&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;str8 = &amp;quot;&amp;#123;0&amp;#125; Love &amp;#123;1&amp;#125;&amp;quot;.format(&amp;#39;I&amp;#39;, &amp;#39;Lsgogroup&amp;#39;)  # 位置参数
print(str8)  # I Love Lsgogroup
​
str8 = &amp;quot;&amp;#123;a&amp;#125; Love &amp;#123;b&amp;#125;&amp;quot;.format(a=&amp;#39;I&amp;#39;, b=&amp;#39;Lsgogroup&amp;#39;)  # 关键字参数
print(str8)  # I Love Lsgogroup
​
str8 = &amp;quot;&amp;#123;0&amp;#125; Love &amp;#123;b&amp;#125;&amp;quot;.format(&amp;#39;I&amp;#39;, b=&amp;#39;Lsgogroup&amp;#39;)  # 位置参数要在关键字参数之前
print(str8)  # I Love Lsgogroup
​
str8 = &amp;#39;&amp;#123;0:.2f&amp;#125;&amp;#123;1&amp;#125;&amp;#39;.format(27.658, &amp;#39;GB&amp;#39;)  # 保留小数点后两位
print(str8)  # 27.66GB&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I Love Lsgogroup&lt;br&gt;I Love Lsgogroup&lt;br&gt;I Love Lsgogroup&lt;br&gt;27.66GB&lt;br&gt;Python 字符串格式化符号&lt;br&gt;符 号    描述&lt;br&gt;%c    格式化字符及其ASCII码&lt;br&gt;%s    格式化字符串，用str()方法处理对象&lt;br&gt;%r    格式化字符串，用rper()方法处理对象&lt;br&gt;%d    格式化整数&lt;br&gt;%o    格式化无符号八进制数&lt;br&gt;%x    格式化无符号十六进制数&lt;br&gt;%X    格式化无符号十六进制数（大写）&lt;br&gt;%f    格式化浮点数字，可指定小数点后的精度&lt;br&gt;%e    用科学计数法格式化浮点数&lt;br&gt;%E    作用同%e，用科学计数法格式化浮点数&lt;br&gt;%g    根据值的大小决定使用%f或%e&lt;br&gt;%G    作用同%g，根据值的大小决定使用%f或%E&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;print(&amp;#39;%c&amp;#39; % 97)  # a
print(&amp;#39;%c %c %c&amp;#39; % (97, 98, 99))  # a b c
print(&amp;#39;%d + %d = %d&amp;#39; % (4, 5, 9))  # 4 + 5 = 9
print(&amp;quot;我叫 %s 今年 %d 岁!&amp;quot; % (&amp;#39;小明&amp;#39;, 10))  # 我叫 小明 今年 10 岁!
print(&amp;#39;%o&amp;#39; % 10)  # 12
print(&amp;#39;%x&amp;#39; % 10)  # a
print(&amp;#39;%X&amp;#39; % 10)  # A
print(&amp;#39;%f&amp;#39; % 27.658)  # 27.658000
print(&amp;#39;%e&amp;#39; % 27.658)  # 2.765800e+01
print(&amp;#39;%E&amp;#39; % 27.658)  # 2.765800E+01
print(&amp;#39;%g&amp;#39; % 27.658)  # 27.658
text = &amp;quot;I am %d years old.&amp;quot; % 22
print(&amp;quot;I said: %s.&amp;quot; % text)  # I said: I am 22 years old..
print(&amp;quot;I said: %r.&amp;quot; % text)  # I said: &amp;#39;I am 22 years old.&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;a&lt;br&gt;a b c&lt;br&gt;4 + 5 = 9&lt;br&gt;我叫 小明 今年 10 岁!&lt;br&gt;12&lt;br&gt;a&lt;br&gt;A&lt;br&gt;27.658000&lt;br&gt;2.765800e+01&lt;br&gt;2.765800E+01&lt;br&gt;27.658&lt;br&gt;I said: I am 22 years old..&lt;br&gt;I said: ‘I am 22 years old.’.&lt;br&gt;格式化操作符辅助指令&lt;br&gt;符号    功能&lt;br&gt;m.n    m 是显示的最小总宽度,n 是小数点后的位数（如果可用的话）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;   用作左对齐&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;   在正数前面显示加号( + )&lt;h1 id=&#34;在八进制数前面显示零-‘0’-，在十六进制前面显示’0x’或者’0X’-取决于用的是’x’还是’X’&#34;&gt;&lt;a href=&#34;#在八进制数前面显示零-‘0’-，在十六进制前面显示’0x’或者’0X’-取决于用的是’x’还是’X’&#34; class=&#34;headerlink&#34; title=&#34;在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’)&#34;&gt;&lt;/a&gt;在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’)&lt;/h1&gt;0    显示的数字前面填充’0’而不是默认的空格&lt;br&gt;【例子】&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;print(&amp;#39;%5.1f&amp;#39; % 27.658)  # &amp;#39; 27.7&amp;#39;
print(&amp;#39;%.2e&amp;#39; % 27.658)  # 2.77e+01
print(&amp;#39;%10d&amp;#39; % 10)  # &amp;#39;        10&amp;#39;
print(&amp;#39;%-10d&amp;#39; % 10)  # &amp;#39;10        &amp;#39;
print(&amp;#39;%+d&amp;#39; % 10)  # +10
print(&amp;#39;%#o&amp;#39; % 10)  # 0o12
print(&amp;#39;%#x&amp;#39; % 108)  # 0x6c
print(&amp;#39;%010d&amp;#39; % 5)  # 0000000005&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 27.7&lt;br&gt;2.77e+01&lt;br&gt;        10&lt;br&gt;10&lt;br&gt;+10&lt;br&gt;0o12&lt;br&gt;0x6c&lt;br&gt;0000000005&lt;br&gt;字典&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可变类型与不可变类型&lt;br&gt;序列是以连续的整数为索引，与此不同的是，字典以”关键字”为索引，关键字可以是任意不可变类型，通常用字符串或数值。&lt;br&gt;字典是 Python 唯一的一个 映射类型，字符串、元组、列表属于序列类型。&lt;br&gt;那么如何快速判断一个数据类型 X 是不是可变类型的呢？两种方法：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;麻烦方法：用 id(X) 函数，对 X 进行某种操作，比较操作前后的 id，如果不一样，则 X 不可变，如果一样，则 X 可变。&lt;br&gt;便捷方法：用 hash(X)，只要不报错，证明 X 可被哈希，即不可变，反过来不可被哈希，即可变。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;i = 1
print(id(i))  # 140732167000896
i = i + 2
print(id(i))  # 140732167000960
​
l = [1, 2]
print(id(l))  # 4300825160
l.append(&amp;#39;Python&amp;#39;)
print(id(l))  # 4300825160&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;140731832701760&lt;br&gt;140731832701824&lt;br&gt;2131670369800&lt;br&gt;2131670369800&lt;br&gt;整数 i 在加 1 之后的 id 和之前不一样，因此加完之后的这个 i (虽然名字没变)，但不是加之前的那个 i 了，因此整数是不可变类型。&lt;br&gt;列表 l 在附加 ‘Python’ 之后的 id 和之前一样，因此列表是可变类型。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;print(hash(&amp;#39;Name&amp;#39;))  # 7047218704141848153
​
print(hash((1, 2, &amp;#39;Python&amp;#39;)))  # 1704535747474881831
​
print(hash([1, 2, &amp;#39;Python&amp;#39;]))
# TypeError: unhashable type: &amp;#39;list&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​&lt;br&gt;​&lt;br&gt;-6668157630988609386&lt;br&gt;-1857436431894091236&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;TypeError                                 Traceback (most recent call last)&lt;br&gt;&lt;ipython-input-1-6416367464f8&gt; in &lt;module&gt;()&lt;br&gt;      3 print(hash((1, 2, ‘Python’)))  # 1704535747474881831&lt;br&gt;      4&lt;br&gt;—-&amp;gt; 5 print(hash([1, 2, ‘Python’]))&lt;br&gt;      6 # TypeError: unhashable type: ‘list’&lt;/p&gt;
&lt;p&gt;TypeError: unhashable type: ‘list’&lt;br&gt;print(hash({1, 2, 3}))&lt;/p&gt;
&lt;h1 id=&#34;TypeError-unhashable-type-‘set’&#34;&gt;&lt;a href=&#34;#TypeError-unhashable-type-‘set’&#34; class=&#34;headerlink&#34; title=&#34;TypeError: unhashable type: ‘set’&#34;&gt;&lt;/a&gt;TypeError: unhashable type: ‘set’&lt;/h1&gt;&lt;p&gt;数值、字符和元组 都能被哈希，因此它们是不可变类型。&lt;br&gt;列表、集合、字典不能被哈希，因此它是可变类型。&lt;br&gt;2. 字典的定义&lt;br&gt;字典 是无序的 键:值（key:value）对集合，键必须是互不相同的（在同一个字典之内）。&lt;/p&gt;
&lt;p&gt;dict 内部存放的顺序和 key 放入的顺序是没有关系的。&lt;br&gt;dict 查找和插入的速度极快，不会随着 key 的增加而增加，但是需要占用大量的内存。&lt;br&gt;字典 定义语法为 {元素1, 元素2, …, 元素n}&lt;/p&gt;
&lt;p&gt;其中每一个元素是一个「键值对」– 键:值 (key:value)&lt;br&gt;关键点是「大括号 {}」,「逗号 ,」和「冒号 :」&lt;br&gt;大括号 – 把所有元素绑在一起&lt;br&gt;逗号 – 将每个键值对分开&lt;br&gt;冒号 – 将键和值分开&lt;br&gt;3. 创建和访问字典&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;brand = [&amp;#39;李宁&amp;#39;, &amp;#39;耐克&amp;#39;, &amp;#39;阿迪达斯&amp;#39;]
slogan = [&amp;#39;一切皆有可能&amp;#39;, &amp;#39;Just do it&amp;#39;, &amp;#39;Impossible is nothing&amp;#39;]
print(&amp;#39;耐克的口号是:&amp;#39;, slogan[brand.index(&amp;#39;耐克&amp;#39;)])  
# 耐克的口号是: Just do it
​
dic = &amp;#123;&amp;#39;李宁&amp;#39;: &amp;#39;一切皆有可能&amp;#39;, &amp;#39;耐克&amp;#39;: &amp;#39;Just do it&amp;#39;, &amp;#39;阿迪达斯&amp;#39;: &amp;#39;Impossible is nothing&amp;#39;&amp;#125;
print(&amp;#39;耐克的口号是:&amp;#39;, dic[&amp;#39;耐克&amp;#39;])  
# 耐克的口号是: Just do it&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;耐克的口号是: Just do it&lt;br&gt;耐克的口号是: Just do it&lt;br&gt;【例子】通过字符串或数值作为key来创建字典。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;dic1 = &amp;#123;1: &amp;#39;one&amp;#39;, 2: &amp;#39;two&amp;#39;, 3: &amp;#39;three&amp;#39;&amp;#125;
print(dic1)  # &amp;#123;1: &amp;#39;one&amp;#39;, 2: &amp;#39;two&amp;#39;, 3: &amp;#39;three&amp;#39;&amp;#125;
print(dic1[1])  # one
print(dic1[4])  # KeyError: 4
​
&amp;#123;1: &amp;#39;one&amp;#39;, 2: &amp;#39;two&amp;#39;, 3: &amp;#39;three&amp;#39;&amp;#125;
one
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
&amp;lt;ipython-input-2-bb8d02bd63a3&amp;gt; in &amp;lt;module&amp;gt;()
      2 print(dic1)  # &amp;#123;1: &amp;#39;one&amp;#39;, 2: &amp;#39;two&amp;#39;, 3: &amp;#39;three&amp;#39;&amp;#125;
      3 print(dic1[1])  # one
----&amp;gt; 4 print(dic1[4])  # KeyError: 4

KeyError: 4
dic2 = &amp;#123;&amp;#39;rice&amp;#39;: 35, &amp;#39;wheat&amp;#39;: 101, &amp;#39;corn&amp;#39;: 67&amp;#125;
print(dic2)  # &amp;#123;&amp;#39;wheat&amp;#39;: 101, &amp;#39;corn&amp;#39;: 67, &amp;#39;rice&amp;#39;: 35&amp;#125;
print(dic2[&amp;#39;rice&amp;#39;])  # 35&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;{‘rice’: 35, ‘wheat’: 101, ‘corn’: 67}&lt;br&gt;35&lt;br&gt;注意：如果我们取的键在字典中不存在，会直接报错KeyError。&lt;/p&gt;
&lt;p&gt;【例子】通过元组作为key来创建字典，但一般不这样使用。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;dic = &amp;#123;(1, 2, 3): &amp;quot;Tom&amp;quot;, &amp;quot;Age&amp;quot;: 12, 3: [3, 5, 7]&amp;#125;
print(dic)  # &amp;#123;(1, 2, 3): &amp;#39;Tom&amp;#39;, &amp;#39;Age&amp;#39;: 12, 3: [3, 5, 7]&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;print(type(dic))  # &amp;lt;class ‘dict’&amp;gt;&lt;br&gt;{(1, 2, 3): ‘Tom’, ‘Age’: 12, 3: [3, 5, 7]}&lt;br&gt;&amp;lt;class ‘dict’&amp;gt;&lt;br&gt;通过构造函数dict来创建字典。&lt;/p&gt;
&lt;p&gt;dict() 创建一个空的字典。&lt;br&gt;【例子】通过key直接把数据放入字典中，但一个key只能对应一个value，多次对一个key放入 value，后面的值会把前面的值冲掉。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;dic = dict()
dic[&amp;#39;a&amp;#39;] = 1
dic[&amp;#39;b&amp;#39;] = 2
dic[&amp;#39;c&amp;#39;] = 3
​
print(dic)
# &amp;#123;&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 2, &amp;#39;c&amp;#39;: 3&amp;#125;
​
dic[&amp;#39;a&amp;#39;] = 11
print(dic)
# &amp;#123;&amp;#39;a&amp;#39;: 11, &amp;#39;b&amp;#39;: 2, &amp;#39;c&amp;#39;: 3&amp;#125;
​
dic[&amp;#39;d&amp;#39;] = 4
print(dic)
# &amp;#123;&amp;#39;a&amp;#39;: 11, &amp;#39;b&amp;#39;: 2, &amp;#39;c&amp;#39;: 3, &amp;#39;d&amp;#39;: 4&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;{‘a’: 1, ‘b’: 2, ‘c’: 3}&lt;br&gt;{‘a’: 11, ‘b’: 2, ‘c’: 3}&lt;br&gt;{‘a’: 11, ‘b’: 2, ‘c’: 3, ‘d’: 4}&lt;br&gt;dict(mapping) new dictionary initialized from a mapping object’s (key, value) pairs&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;dic1 = dict([(&amp;#39;apple&amp;#39;, 4139), (&amp;#39;peach&amp;#39;, 4127), (&amp;#39;cherry&amp;#39;, 4098)])
print(dic1)  # &amp;#123;&amp;#39;cherry&amp;#39;: 4098, &amp;#39;apple&amp;#39;: 4139, &amp;#39;peach&amp;#39;: 4127&amp;#125;
​
dic2 = dict(((&amp;#39;apple&amp;#39;, 4139), (&amp;#39;peach&amp;#39;, 4127), (&amp;#39;cherry&amp;#39;, 4098)))
print(dic2)  # &amp;#123;&amp;#39;peach&amp;#39;: 4127, &amp;#39;cherry&amp;#39;: 4098, &amp;#39;apple&amp;#39;: 4139&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;{‘apple’: 4139, ‘peach’: 4127, ‘cherry’: 4098}&lt;br&gt;{‘apple’: 4139, ‘peach’: 4127, ‘cherry’: 4098}&lt;br&gt;dict(**kwargs) -&amp;gt; new dictionary initialized with the name=value pairs in the keyword argument list. For example: dict(one=1, two=2)&lt;br&gt;【例子】这种情况下，键只能为字符串类型，并且创建的时候字符串不能加引号，加上就会直接报语法错误。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;dic = dict(name=&amp;#39;Tom&amp;#39;, age=10)
print(dic)  # &amp;#123;&amp;#39;name&amp;#39;: &amp;#39;Tom&amp;#39;, &amp;#39;age&amp;#39;: 10&amp;#125;
print(type(dic))  # &amp;lt;class &amp;#39;dict&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;{‘name’: ‘Tom’, ‘age’: 10}&lt;br&gt;&amp;lt;class ‘dict’&amp;gt;&lt;br&gt;4. 字典的内置方法&lt;br&gt;dict.fromkeys(seq[, value]) 用于创建一个新字典，以序列 seq 中元素做字典的键，value 为字典所有键对应的初始值。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;seq = (&amp;#39;name&amp;#39;, &amp;#39;age&amp;#39;, &amp;#39;sex&amp;#39;)
dic1 = dict.fromkeys(seq)
print(dic1)
# &amp;#123;&amp;#39;name&amp;#39;: None, &amp;#39;age&amp;#39;: None, &amp;#39;sex&amp;#39;: None&amp;#125;
​
dic2 = dict.fromkeys(seq, 10)
print(dic2)
# &amp;#123;&amp;#39;name&amp;#39;: 10, &amp;#39;age&amp;#39;: 10, &amp;#39;sex&amp;#39;: 10&amp;#125;
​
dic3 = dict.fromkeys(seq, (&amp;#39;小马&amp;#39;, &amp;#39;8&amp;#39;, &amp;#39;男&amp;#39;))
print(dic3)
# &amp;#123;&amp;#39;name&amp;#39;: (&amp;#39;小马&amp;#39;, &amp;#39;8&amp;#39;, &amp;#39;男&amp;#39;), &amp;#39;age&amp;#39;: (&amp;#39;小马&amp;#39;, &amp;#39;8&amp;#39;, &amp;#39;男&amp;#39;), &amp;#39;sex&amp;#39;: (&amp;#39;小马&amp;#39;, &amp;#39;8&amp;#39;, &amp;#39;男&amp;#39;)&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;{‘name’: None, ‘age’: None, ‘sex’: None}&lt;br&gt;{‘name’: 10, ‘age’: 10, ‘sex’: 10}&lt;br&gt;{‘name’: (‘小马’, ‘8’, ‘男’), ‘age’: (‘小马’, ‘8’, ‘男’), ‘sex’: (‘小马’, ‘8’, ‘男’)}&lt;br&gt;dict.keys()返回一个可迭代对象，可以使用 list() 来转换为列表，列表为字典中的所有键。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;dic = &amp;#123;&amp;#39;Name&amp;#39;: &amp;#39;lsgogroup&amp;#39;, &amp;#39;Age&amp;#39;: 7&amp;#125;
print(dic.keys())  # dict_keys([&amp;#39;Name&amp;#39;, &amp;#39;Age&amp;#39;])
lst = list(dic.keys())  # 转换为列表
print(lst)  # [&amp;#39;Name&amp;#39;, &amp;#39;Age&amp;#39;]
dict_keys([&amp;#39;Name&amp;#39;, &amp;#39;Age&amp;#39;])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[‘Name’, ‘Age’]&lt;br&gt;dict.values()返回一个迭代器，可以使用 list() 来转换为列表，列表为字典中的所有值。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;dic = &amp;#123;&amp;#39;Sex&amp;#39;: &amp;#39;female&amp;#39;, &amp;#39;Age&amp;#39;: 7, &amp;#39;Name&amp;#39;: &amp;#39;Zara&amp;#39;&amp;#125;
print(dic.values())
# dict_values([&amp;#39;female&amp;#39;, 7, &amp;#39;Zara&amp;#39;])
​
print(list(dic.values()))
# [7, &amp;#39;female&amp;#39;, &amp;#39;Zara&amp;#39;]
dict_values([&amp;#39;female&amp;#39;, 7, &amp;#39;Zara&amp;#39;])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[‘female’, 7, ‘Zara’]&lt;br&gt;dict.items()以列表返回可遍历的 (键, 值) 元组数组。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;dic = &amp;#123;&amp;#39;Name&amp;#39;: &amp;#39;Lsgogroup&amp;#39;, &amp;#39;Age&amp;#39;: 7&amp;#125;
print(dic.items())
# dict_items([(&amp;#39;Name&amp;#39;, &amp;#39;Lsgogroup&amp;#39;), (&amp;#39;Age&amp;#39;, 7)])
​
print(tuple(dic.items()))
# ((&amp;#39;Name&amp;#39;, &amp;#39;Lsgogroup&amp;#39;), (&amp;#39;Age&amp;#39;, 7))
​
print(list(dic.items()))
# [(&amp;#39;Name&amp;#39;, &amp;#39;Lsgogroup&amp;#39;), (&amp;#39;Age&amp;#39;, 7)]
dict_items([(&amp;#39;Name&amp;#39;, &amp;#39;Lsgogroup&amp;#39;), (&amp;#39;Age&amp;#39;, 7)])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;((‘Name’, ‘Lsgogroup’), (‘Age’, 7))&lt;br&gt;[(‘Name’, ‘Lsgogroup’), (‘Age’, 7)]&lt;br&gt;dict.get(key, default=None) 返回指定键的值，如果值不在字典中返回默认值。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;dic = &amp;#123;&amp;#39;Name&amp;#39;: &amp;#39;Lsgogroup&amp;#39;, &amp;#39;Age&amp;#39;: 27&amp;#125;
print(&amp;quot;Age 值为 : %s&amp;quot; % dic.get(&amp;#39;Age&amp;#39;))  # Age 值为 : 27
print(&amp;quot;Sex 值为 : %s&amp;quot; % dic.get(&amp;#39;Sex&amp;#39;, &amp;quot;NA&amp;quot;))  # Sex 值为 : NA
print(dic)  # &amp;#123;&amp;#39;Name&amp;#39;: &amp;#39;Lsgogroup&amp;#39;, &amp;#39;Age&amp;#39;: 27&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Age 值为 : 27&lt;br&gt;Sex 值为 : NA&lt;br&gt;{‘Name’: ‘Lsgogroup’, ‘Age’: 27}&lt;br&gt;dict.setdefault(key, default=None)和get()方法 类似, 如果键不存在于字典中，将会添加键并将值设为默认值。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;dic = &amp;#123;&amp;#39;Name&amp;#39;: &amp;#39;Lsgogroup&amp;#39;, &amp;#39;Age&amp;#39;: 7&amp;#125;
print(&amp;quot;Age 键的值为 : %s&amp;quot; % dic.setdefault(&amp;#39;Age&amp;#39;, None))  # Age 键的值为 : 7
print(&amp;quot;Sex 键的值为 : %s&amp;quot; % dic.setdefault(&amp;#39;Sex&amp;#39;, None))  # Sex 键的值为 : None
print(dic)  
# &amp;#123;&amp;#39;Age&amp;#39;: 7, &amp;#39;Name&amp;#39;: &amp;#39;Lsgogroup&amp;#39;, &amp;#39;Sex&amp;#39;: None&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Age 键的值为 : 7&lt;br&gt;Sex 键的值为 : None&lt;br&gt;{‘Name’: ‘Lsgogroup’, ‘Age’: 7, ‘Sex’: None}&lt;br&gt;key in dict in 操作符用于判断键是否存在于字典中，如果键在字典 dict 里返回true，否则返回false。而not in操作符刚好相反，如果键在字典 dict 里返回false，否则返回true。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;dic = &amp;#123;&amp;#39;Name&amp;#39;: &amp;#39;Lsgogroup&amp;#39;, &amp;#39;Age&amp;#39;: 7&amp;#125;
​
# in 检测键 Age 是否存在
if &amp;#39;Age&amp;#39; in dic:
    print(&amp;quot;键 Age 存在&amp;quot;)
else:
    print(&amp;quot;键 Age 不存在&amp;quot;)
​
# 检测键 Sex 是否存在
if &amp;#39;Sex&amp;#39; in dic:
    print(&amp;quot;键 Sex 存在&amp;quot;)
else:
    print(&amp;quot;键 Sex 不存在&amp;quot;)
​
# not in 检测键 Age 是否存在
if &amp;#39;Age&amp;#39; not in dic:
    print(&amp;quot;键 Age 不存在&amp;quot;)
else:
    print(&amp;quot;键 Age 存在&amp;quot;)
​
# 键 Age 存在
# 键 Sex 不存在
# 键 Age 存在&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;键 Age 存在&lt;br&gt;键 Sex 不存在&lt;br&gt;键 Age 存在&lt;br&gt;dict.pop(key[,default])删除字典给定键 key 所对应的值，返回值为被删除的值。key 值必须给出。若key不存在，则返回 default 值。&lt;br&gt;del dict[key] 删除字典给定键 key 所对应的值。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;dic1 = &amp;#123;1: &amp;quot;a&amp;quot;, 2: [1, 2]&amp;#125;
print(dic1.pop(1), dic1)  # a &amp;#123;2: [1, 2]&amp;#125;
​
# 设置默认值，必须添加，否则报错
print(dic1.pop(3, &amp;quot;nokey&amp;quot;), dic1)  # nokey &amp;#123;2: [1, 2]&amp;#125;
​
del dic1[2]
print(dic1)  # &amp;#123;&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;a {2: [1, 2]}&lt;br&gt;nokey {2: [1, 2]}&lt;br&gt;{}&lt;br&gt;dict.popitem()随机返回并删除字典中的一对键和值，如果字典已经为空，却调用了此方法，就报出KeyError异常。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;dic1 = &amp;#123;1: &amp;quot;a&amp;quot;, 2: [1, 2]&amp;#125;
print(dic1.popitem())  # &amp;#123;2: [1, 2]&amp;#125;
print(dic1)  # (1, &amp;#39;a&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(2, [1, 2])&lt;br&gt;{1: ‘a’}&lt;br&gt;dict.clear()用于删除字典内所有元素。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;dic = &amp;#123;&amp;#39;Name&amp;#39;: &amp;#39;Zara&amp;#39;, &amp;#39;Age&amp;#39;: 7&amp;#125;
print(&amp;quot;字典长度 : %d&amp;quot; % len(dic))  # 字典长度 : 2
dic.clear()
print(&amp;quot;字典删除后长度 : %d&amp;quot; % len(dic))  
# 字典删除后长度 : 0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;字典长度 : 2&lt;br&gt;字典删除后长度 : 0&lt;br&gt;dict.copy()返回一个字典的浅复制。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;dic1 = &amp;#123;&amp;#39;Name&amp;#39;: &amp;#39;Lsgogroup&amp;#39;, &amp;#39;Age&amp;#39;: 7, &amp;#39;Class&amp;#39;: &amp;#39;First&amp;#39;&amp;#125;
dic2 = dic1.copy()
print(&amp;quot;dic2&amp;quot;)  
# &amp;#123;&amp;#39;Age&amp;#39;: 7, &amp;#39;Name&amp;#39;: &amp;#39;Lsgogroup&amp;#39;, &amp;#39;Class&amp;#39;: &amp;#39;First&amp;#39;&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;dic2&lt;br&gt;【例子】直接赋值和 copy 的区别&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;dic1 = &amp;#123;&amp;#39;user&amp;#39;: &amp;#39;lsgogroup&amp;#39;, &amp;#39;num&amp;#39;: [1, 2, 3]&amp;#125;
​
# 引用对象
dic2 = dic1  
# 浅拷贝父对象（一级目录），子对象（二级目录）不拷贝，还是引用
dic3 = dic1.copy()  
​
print(id(dic1))  # 148635574728
print(id(dic2))  # 148635574728
print(id(dic3))  # 148635574344
​
# 修改 data 数据
dic1[&amp;#39;user&amp;#39;] = &amp;#39;root&amp;#39;
dic1[&amp;#39;num&amp;#39;].remove(1)
​
# 输出结果
print(dic1)  # &amp;#123;&amp;#39;user&amp;#39;: &amp;#39;root&amp;#39;, &amp;#39;num&amp;#39;: [2, 3]&amp;#125;
print(dic2)  # &amp;#123;&amp;#39;user&amp;#39;: &amp;#39;root&amp;#39;, &amp;#39;num&amp;#39;: [2, 3]&amp;#125;
print(dic3)  # &amp;#123;&amp;#39;user&amp;#39;: &amp;#39;runoob&amp;#39;, &amp;#39;num&amp;#39;: [2, 3]&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2131669221448&lt;br&gt;2131669221448&lt;br&gt;2131669225120&lt;br&gt;{‘user’: ‘root’, ‘num’: [2, 3]}&lt;br&gt;{‘user’: ‘root’, ‘num’: [2, 3]}&lt;br&gt;{‘user’: ‘lsgogroup’, ‘num’: [2, 3]}&lt;br&gt;dict.update(dict2)把字典参数 dict2 的 key:value对 更新到字典 dict 里。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;dic = &amp;#123;&amp;#39;Name&amp;#39;: &amp;#39;Lsgogroup&amp;#39;, &amp;#39;Age&amp;#39;: 7&amp;#125;
dic2 = &amp;#123;&amp;#39;Sex&amp;#39;: &amp;#39;female&amp;#39;, &amp;#39;Age&amp;#39;: 8&amp;#125;
dic.update(dic2)
print(dic)  
# &amp;#123;&amp;#39;Sex&amp;#39;: &amp;#39;female&amp;#39;, &amp;#39;Age&amp;#39;: 8, &amp;#39;Name&amp;#39;: &amp;#39;Lsgogroup&amp;#39;&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;{‘Name’: ‘Lsgogroup’, ‘Age’: 8, ‘Sex’: ‘female’}&lt;br&gt;集合&lt;br&gt;Python 中set与dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。&lt;/p&gt;
&lt;p&gt;注意，key为不可变类型，即可哈希的值。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;num = &amp;#123;&amp;#125;
print(type(num))  # &amp;lt;class &amp;#39;dict&amp;#39;&amp;gt;
num = &amp;#123;1, 2, 3, 4&amp;#125;
print(type(num))  # &amp;lt;class &amp;#39;set&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;class ‘dict’&amp;gt;&lt;br&gt;&amp;lt;class ‘set’&amp;gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;集合的创建&lt;br&gt;先创建对象再加入元素。&lt;br&gt;在创建空集合的时候只能使用s = set()，因为s = {}创建的是空字典。&lt;br&gt;【例子】&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;basket = set()
basket.add(&amp;#39;apple&amp;#39;)
basket.add(&amp;#39;banana&amp;#39;)
print(basket)  # &amp;#123;&amp;#39;banana&amp;#39;, &amp;#39;apple&amp;#39;&amp;#125;&lt;/code&gt;&lt;/pre&gt;
{‘banana’, ‘apple’}&lt;br&gt;直接把一堆元素用花括号括起来{元素1, 元素2, …, 元素n}。&lt;br&gt;重复元素在set中会被自动被过滤。&lt;br&gt;【例子】&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;basket = &amp;#123;&amp;#39;apple&amp;#39;, &amp;#39;orange&amp;#39;, &amp;#39;apple&amp;#39;, &amp;#39;pear&amp;#39;, &amp;#39;orange&amp;#39;, &amp;#39;banana&amp;#39;&amp;#125;
print(basket)  # &amp;#123;&amp;#39;banana&amp;#39;, &amp;#39;apple&amp;#39;, &amp;#39;pear&amp;#39;, &amp;#39;orange&amp;#39;&amp;#125;&lt;/code&gt;&lt;/pre&gt;
{‘pear’, ‘orange’, ‘banana’, ‘apple’}&lt;br&gt;使用set(value)工厂函数，把列表或元组转换成集合。&lt;br&gt;【例子】&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = set(&amp;#39;abracadabra&amp;#39;)
print(a)  
# &amp;#123;&amp;#39;r&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;a&amp;#39;&amp;#125;
​
b = set((&amp;quot;Google&amp;quot;, &amp;quot;Lsgogroup&amp;quot;, &amp;quot;Taobao&amp;quot;, &amp;quot;Taobao&amp;quot;))
print(b)  
# &amp;#123;&amp;#39;Taobao&amp;#39;, &amp;#39;Lsgogroup&amp;#39;, &amp;#39;Google&amp;#39;&amp;#125;
​
c = set([&amp;quot;Google&amp;quot;, &amp;quot;Lsgogroup&amp;quot;, &amp;quot;Taobao&amp;quot;, &amp;quot;Google&amp;quot;])
print(c)  
# &amp;#123;&amp;#39;Taobao&amp;#39;, &amp;#39;Lsgogroup&amp;#39;, &amp;#39;Google&amp;#39;&amp;#125;&lt;/code&gt;&lt;/pre&gt;
{‘b’, ‘r’, ‘a’, ‘c’, ‘d’}&lt;br&gt;{‘Taobao’, ‘Google’, ‘Lsgogroup’}&lt;br&gt;{‘Taobao’, ‘Google’, ‘Lsgogroup’}&lt;br&gt;【例子】去掉列表中重复的元素&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;lst = [0, 1, 2, 3, 4, 5, 5, 3, 1]
​
temp = []
for item in lst:
 if item not in temp:
     temp.append(item)
​
print(temp)  # [0, 1, 2, 3, 4, 5]
​
a = set(lst)
print(list(a))  # [0, 1, 2, 3, 4, 5]&lt;/code&gt;&lt;/pre&gt;
[0, 1, 2, 3, 4, 5]&lt;br&gt;[0, 1, 2, 3, 4, 5]&lt;br&gt;从结果发现集合的两个特点：无序 (unordered) 和唯一 (unique)。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于 set 存储的是无序集合，所以我们不可以为集合创建索引或执行切片(slice)操作，也没有键(keys)可用来获取集合中元素的值，但是可以判断一个元素是否在集合中。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;访问集合中的值&lt;br&gt;可以使用len()內建函数得到集合的大小。&lt;br&gt;【例子】&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;s = set([&amp;#39;Google&amp;#39;, &amp;#39;Baidu&amp;#39;, &amp;#39;Taobao&amp;#39;])
print(len(s))  # 3
3
可以使用for把集合中的数据一个个读取出来。
【例子】
``` python
s = set([&amp;#39;Google&amp;#39;, &amp;#39;Baidu&amp;#39;, &amp;#39;Taobao&amp;#39;])
for item in s:
 print(item)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;Baidu&#34;&gt;&lt;a href=&#34;#Baidu&#34; class=&#34;headerlink&#34; title=&#34;Baidu&#34;&gt;&lt;/a&gt;Baidu&lt;/h1&gt;&lt;h1 id=&#34;Google&#34;&gt;&lt;a href=&#34;#Google&#34; class=&#34;headerlink&#34; title=&#34;Google&#34;&gt;&lt;/a&gt;Google&lt;/h1&gt;&lt;h1 id=&#34;Taobao&#34;&gt;&lt;a href=&#34;#Taobao&#34; class=&#34;headerlink&#34; title=&#34;Taobao&#34;&gt;&lt;/a&gt;Taobao&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;Baidu
Taobao
Google
可以通过in或not in判断一个元素是否在集合中已经存在
【例子】
``` python
s = set([&amp;#39;Google&amp;#39;, &amp;#39;Baidu&amp;#39;, &amp;#39;Taobao&amp;#39;])
print(&amp;#39;Taobao&amp;#39; in s)  # True
print(&amp;#39;Facebook&amp;#39; not in s)  # True&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;True&lt;br&gt;True&lt;br&gt;3. 集合的内置方法&lt;br&gt;set.add(elmnt)用于给集合添加元素，如果添加的元素在集合中已存在，则不执行任何操作。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;fruits = &amp;#123;&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;&amp;#125;
fruits.add(&amp;quot;orange&amp;quot;)
print(fruits)  
# &amp;#123;&amp;#39;orange&amp;#39;, &amp;#39;cherry&amp;#39;, &amp;#39;banana&amp;#39;, &amp;#39;apple&amp;#39;&amp;#125;
​
fruits.add(&amp;quot;apple&amp;quot;)
print(fruits)  
# &amp;#123;&amp;#39;orange&amp;#39;, &amp;#39;cherry&amp;#39;, &amp;#39;banana&amp;#39;, &amp;#39;apple&amp;#39;&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;{‘cherry’, ‘orange’, ‘banana’, ‘apple’}&lt;br&gt;{‘cherry’, ‘orange’, ‘banana’, ‘apple’}&lt;br&gt;set.update(set)用于修改当前集合，可以添加新的元素或集合到当前集合中，如果添加的元素在集合中已存在，则该元素只会出现一次，重复的会忽略。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;x = &amp;#123;&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;&amp;#125;
y = &amp;#123;&amp;quot;google&amp;quot;, &amp;quot;baidu&amp;quot;, &amp;quot;apple&amp;quot;&amp;#125;
x.update(y)
print(x)
# &amp;#123;&amp;#39;cherry&amp;#39;, &amp;#39;banana&amp;#39;, &amp;#39;apple&amp;#39;, &amp;#39;google&amp;#39;, &amp;#39;baidu&amp;#39;&amp;#125;
​
y.update([&amp;quot;lsgo&amp;quot;, &amp;quot;dreamtech&amp;quot;])
print(y)
# &amp;#123;&amp;#39;lsgo&amp;#39;, &amp;#39;baidu&amp;#39;, &amp;#39;dreamtech&amp;#39;, &amp;#39;apple&amp;#39;, &amp;#39;google&amp;#39;&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;{‘google’, ‘banana’, ‘cherry’, ‘apple’, ‘baidu’}&lt;br&gt;{‘apple’, ‘dreamtech’, ‘lsgo’, ‘google’, ‘baidu’}&lt;br&gt;set.remove(item) 用于移除集合中的指定元素。如果元素不存在，则会发生错误。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;fruits = &amp;#123;&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;&amp;#125;
fruits.remove(&amp;quot;banana&amp;quot;)
print(fruits)  # &amp;#123;&amp;#39;apple&amp;#39;, &amp;#39;cherry&amp;#39;&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;{‘cherry’, ‘apple’}&lt;br&gt;set.discard(value) 用于移除指定的集合元素。remove() 方法在移除一个不存在的元素时会发生错误，而 discard() 方法不会。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;fruits = &amp;#123;&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;&amp;#125;
fruits.discard(&amp;quot;banana&amp;quot;)
print(fruits)  # &amp;#123;&amp;#39;apple&amp;#39;, &amp;#39;cherry&amp;#39;&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;{‘cherry’, ‘apple’}&lt;br&gt;set.pop() 用于随机移除一个元素。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;fruits = &amp;#123;&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;&amp;#125;
x = fruits.pop()
print(fruits)  # &amp;#123;&amp;#39;cherry&amp;#39;, &amp;#39;apple&amp;#39;&amp;#125;
print(x)  # banana&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;{‘banana’, ‘apple’}&lt;br&gt;cherry&lt;br&gt;由于 set 是无序和无重复元素的集合，所以两个或多个 set 可以做数学意义上的集合操作。&lt;/p&gt;
&lt;p&gt;set.intersection(set1, set2) 返回两个集合的交集。&lt;br&gt;set1 &amp;amp; set2 返回两个集合的交集。&lt;br&gt;set.intersection_update(set1, set2) 交集，在原始的集合上移除不重叠的元素。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = set(&amp;#39;abracadabra&amp;#39;)
b = set(&amp;#39;alacazam&amp;#39;)
print(a)  # &amp;#123;&amp;#39;r&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;d&amp;#39;&amp;#125;
print(b)  # &amp;#123;&amp;#39;c&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;m&amp;#39;, &amp;#39;z&amp;#39;&amp;#125;
​
c = a.intersection(b)
print(c)  # &amp;#123;&amp;#39;a&amp;#39;, &amp;#39;c&amp;#39;&amp;#125;
print(a &amp;amp; b)  # &amp;#123;&amp;#39;c&amp;#39;, &amp;#39;a&amp;#39;&amp;#125;
print(a)  # &amp;#123;&amp;#39;a&amp;#39;, &amp;#39;r&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;d&amp;#39;&amp;#125;
​
a.intersection_update(b)
print(a)  # &amp;#123;&amp;#39;a&amp;#39;, &amp;#39;c&amp;#39;&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;{‘b’, ‘r’, ‘a’, ‘c’, ‘d’}&lt;br&gt;{‘l’, ‘a’, ‘c’, ‘z’, ‘m’}&lt;br&gt;{‘a’, ‘c’}&lt;br&gt;{‘a’, ‘c’}&lt;br&gt;{‘b’, ‘r’, ‘a’, ‘c’, ‘d’}&lt;br&gt;{‘a’, ‘c’}&lt;br&gt;set.union(set1, set2) 返回两个集合的并集。&lt;br&gt;set1 | set2 返回两个集合的并集。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = set(&amp;#39;abracadabra&amp;#39;)
b = set(&amp;#39;alacazam&amp;#39;)
print(a)  # &amp;#123;&amp;#39;r&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;d&amp;#39;&amp;#125;
print(b)  # &amp;#123;&amp;#39;c&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;m&amp;#39;, &amp;#39;z&amp;#39;&amp;#125;
​
print(a | b)  
# &amp;#123;&amp;#39;l&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;m&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;r&amp;#39;, &amp;#39;z&amp;#39;, &amp;#39;c&amp;#39;&amp;#125;
​
c = a.union(b)
print(c)  
# &amp;#123;&amp;#39;c&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;m&amp;#39;, &amp;#39;r&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;z&amp;#39;, &amp;#39;l&amp;#39;&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;{‘b’, ‘r’, ‘a’, ‘c’, ‘d’}&lt;br&gt;{‘l’, ‘a’, ‘c’, ‘z’, ‘m’}&lt;br&gt;{‘l’, ‘b’, ‘r’, ‘a’, ‘c’, ‘z’, ‘d’, ‘m’}&lt;br&gt;{‘l’, ‘b’, ‘r’, ‘a’, ‘c’, ‘z’, ‘d’, ‘m’}&lt;br&gt;set.difference(set) 返回集合的差集。&lt;br&gt;set1 - set2 返回集合的差集。&lt;br&gt;set.difference_update(set) 集合的差集，直接在原来的集合中移除元素，没有返回值。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = set(&amp;#39;abracadabra&amp;#39;)
b = set(&amp;#39;alacazam&amp;#39;)
print(a)  # &amp;#123;&amp;#39;r&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;d&amp;#39;&amp;#125;
print(b)  # &amp;#123;&amp;#39;c&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;m&amp;#39;, &amp;#39;z&amp;#39;&amp;#125;
​
c = a.difference(b)
print(c)  # &amp;#123;&amp;#39;b&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;r&amp;#39;&amp;#125;
print(a - b)  # &amp;#123;&amp;#39;d&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;r&amp;#39;&amp;#125;
​
print(a)  # &amp;#123;&amp;#39;r&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;&amp;#125;
a.difference_update(b)
print(a)  # &amp;#123;&amp;#39;d&amp;#39;, &amp;#39;r&amp;#39;, &amp;#39;b&amp;#39;&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;{‘b’, ‘r’, ‘a’, ‘c’, ‘d’}&lt;br&gt;{‘l’, ‘a’, ‘c’, ‘z’, ‘m’}&lt;br&gt;{‘d’, ‘b’, ‘r’}&lt;br&gt;{‘d’, ‘b’, ‘r’}&lt;br&gt;{‘b’, ‘r’, ‘a’, ‘c’, ‘d’}&lt;br&gt;{‘b’, ‘r’, ‘d’}&lt;br&gt;set.symmetric_difference(set)返回集合的异或。&lt;br&gt;set1 ^ set2 返回集合的异或。&lt;br&gt;set.symmetric_difference_update(set)移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = set(&amp;#39;abracadabra&amp;#39;)
b = set(&amp;#39;alacazam&amp;#39;)
print(a)  # &amp;#123;&amp;#39;r&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;d&amp;#39;&amp;#125;
print(b)  # &amp;#123;&amp;#39;c&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;m&amp;#39;, &amp;#39;z&amp;#39;&amp;#125;
​
c = a.symmetric_difference(b)
print(c)  # &amp;#123;&amp;#39;m&amp;#39;, &amp;#39;r&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;z&amp;#39;, &amp;#39;d&amp;#39;&amp;#125;
print(a ^ b)  # &amp;#123;&amp;#39;m&amp;#39;, &amp;#39;r&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;z&amp;#39;, &amp;#39;d&amp;#39;&amp;#125;
​
print(a)  # &amp;#123;&amp;#39;r&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;&amp;#125;
a.symmetric_difference_update(b)
print(a)  # &amp;#123;&amp;#39;r&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;m&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;z&amp;#39;, &amp;#39;d&amp;#39;&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;{‘b’, ‘r’, ‘a’, ‘c’, ‘d’}&lt;br&gt;{‘l’, ‘a’, ‘c’, ‘z’, ‘m’}&lt;br&gt;{‘l’, ‘b’, ‘z’, ‘r’, ‘d’, ‘m’}&lt;br&gt;{‘l’, ‘b’, ‘z’, ‘r’, ‘d’, ‘m’}&lt;br&gt;{‘b’, ‘r’, ‘a’, ‘c’, ‘d’}&lt;br&gt;{‘l’, ‘b’, ‘r’, ‘z’, ‘d’, ‘m’}&lt;br&gt;set.issubset(set)判断集合是不是被其他集合包含，如果是则返回 True，否则返回 False。&lt;br&gt;set1 &amp;lt;= set2 判断集合是不是被其他集合包含，如果是则返回 True，否则返回 False。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;x = &amp;#123;&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;&amp;#125;
y = &amp;#123;&amp;quot;f&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;a&amp;quot;&amp;#125;
z = x.issubset(y)
print(z)  # True
print(x &amp;lt;= y)  # True
​
x = &amp;#123;&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;&amp;#125;
y = &amp;#123;&amp;quot;f&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;b&amp;quot;&amp;#125;
z = x.issubset(y)
print(z)  # False
print(x &amp;lt;= y)  # False&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;True&lt;br&gt;True&lt;br&gt;False&lt;br&gt;False&lt;br&gt;set.issuperset(set)用于判断集合是不是包含其他集合，如果是则返回 True，否则返回 False。&lt;br&gt;set1 &amp;gt;= set2 判断集合是不是包含其他集合，如果是则返回 True，否则返回 False。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;x = &amp;#123;&amp;quot;f&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;a&amp;quot;&amp;#125;
y = &amp;#123;&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;&amp;#125;
z = x.issuperset(y)
print(z)  # True
print(x &amp;gt;= y)  # True
​
x = &amp;#123;&amp;quot;f&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;b&amp;quot;&amp;#125;
y = &amp;#123;&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;&amp;#125;
z = x.issuperset(y)
print(z)  # False
print(x &amp;gt;= y)  # False&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;True&lt;br&gt;True&lt;br&gt;False&lt;br&gt;False&lt;br&gt;set.isdisjoint(set) 用于判断两个集合是不是不相交，如果是返回 True，否则返回 False。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;x = &amp;#123;&amp;quot;f&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;b&amp;quot;&amp;#125;
y = &amp;#123;&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;&amp;#125;
z = x.isdisjoint(y)
print(z)  # False
​
x = &amp;#123;&amp;quot;f&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;m&amp;quot;, &amp;quot;g&amp;quot;&amp;#125;
y = &amp;#123;&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;&amp;#125;
z = x.isdisjoint(y)
print(z)  # True&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;False&lt;br&gt;True&lt;br&gt;4. 集合的转换&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;se = set(range(4))
li = list(se)
tu = tuple(se)
​
print(se, type(se))  # &amp;#123;0, 1, 2, 3&amp;#125; &amp;lt;class &amp;#39;set&amp;#39;&amp;gt;
print(li, type(li))  # [0, 1, 2, 3] &amp;lt;class &amp;#39;list&amp;#39;&amp;gt;
print(tu, type(tu))  # (0, 1, 2, 3) &amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;{0, 1, 2, 3} &amp;lt;class ‘set’&amp;gt;&lt;br&gt;[0, 1, 2, 3] &amp;lt;class ‘list’&amp;gt;&lt;br&gt;(0, 1, 2, 3) &amp;lt;class ‘tuple’&amp;gt;&lt;br&gt;5. 不可变集合&lt;br&gt;Python 提供了不能改变元素的集合的实现版本，即不能增加或删除元素，类型名叫frozenset。需要注意的是frozenset仍然可以进行集合操作，只是不能用带有update的方法。&lt;/p&gt;
&lt;p&gt;frozenset([iterable]) 返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = frozenset(range(10))  # 生成一个新的不可变集合
print(a)  
# frozenset(&amp;#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9&amp;#125;)
​
b = frozenset(&amp;#39;lsgogroup&amp;#39;)
print(b)  
# frozenset(&amp;#123;&amp;#39;g&amp;#39;, &amp;#39;s&amp;#39;, &amp;#39;p&amp;#39;, &amp;#39;r&amp;#39;, &amp;#39;u&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;l&amp;#39;&amp;#125;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;frozenset({0, 1, 2, 3, 4, 5, 6, 7, 8, 9})&lt;br&gt;frozenset({‘l’, ‘g’, ‘r’, ‘u’, ‘o’, ‘s’, ‘p’})&lt;/p&gt;
&lt;p&gt;序列&lt;br&gt;在 Python 中，序列类型包括字符串、列表、元组、集合和字典，这些序列支持一些通用的操作，但比较特殊的是，集合和字典不支持索引、切片、相加和相乘操作。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;针对序列的内置函数&lt;br&gt;list(sub) 把一个可迭代对象转换为列表。&lt;br&gt;【例子】&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = list()
print(a)  # []
​
b = &amp;#39;I Love LsgoGroup&amp;#39;
b = list(b)
print(b)  
# [&amp;#39;I&amp;#39;, &amp;#39; &amp;#39;, &amp;#39;L&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;v&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39; &amp;#39;, &amp;#39;L&amp;#39;, &amp;#39;s&amp;#39;, &amp;#39;g&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;G&amp;#39;, &amp;#39;r&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;u&amp;#39;, &amp;#39;p&amp;#39;]
​
c = (1, 1, 2, 3, 5, 8)
c = list(c)
print(c)  # [1, 1, 2, 3, 5, 8]&lt;/code&gt;&lt;/pre&gt;
[]&lt;br&gt;[‘I’, ‘ ‘, ‘L’, ‘o’, ‘v’, ‘e’, ‘ ‘, ‘L’, ‘s’, ‘g’, ‘o’, ‘G’, ‘r’, ‘o’, ‘u’, ‘p’]&lt;br&gt;[1, 1, 2, 3, 5, 8]&lt;br&gt;tuple(sub) 把一个可迭代对象转换为元组。&lt;br&gt;【例子】&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = tuple()
print(a)  # ()
​
b = &amp;#39;I Love LsgoGroup&amp;#39;
b = tuple(b)
print(b)  
# (&amp;#39;I&amp;#39;, &amp;#39; &amp;#39;, &amp;#39;L&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;v&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39; &amp;#39;, &amp;#39;L&amp;#39;, &amp;#39;s&amp;#39;, &amp;#39;g&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;G&amp;#39;, &amp;#39;r&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;u&amp;#39;, &amp;#39;p&amp;#39;)
​
c = [1, 1, 2, 3, 5, 8]
c = tuple(c)
print(c)  # (1, 1, 2, 3, 5, 8)&lt;/code&gt;&lt;/pre&gt;
()&lt;br&gt;(‘I’, ‘ ‘, ‘L’, ‘o’, ‘v’, ‘e’, ‘ ‘, ‘L’, ‘s’, ‘g’, ‘o’, ‘G’, ‘r’, ‘o’, ‘u’, ‘p’)&lt;br&gt;(1, 1, 2, 3, 5, 8)&lt;br&gt;str(obj) 把obj对象转换为字符串&lt;br&gt;【例子】&lt;pre&gt;&lt;code&gt;a = 123
a = str(a)
print(a)  # 123&lt;/code&gt;&lt;/pre&gt;
123&lt;br&gt;len(s) 返回对象（字符、列表、元组等）长度或元素个数。&lt;br&gt;s – 对象。&lt;br&gt;【例子】&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = list()
print(len(a))  # 0
​
b = (&amp;#39;I&amp;#39;, &amp;#39; &amp;#39;, &amp;#39;L&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;v&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39; &amp;#39;, &amp;#39;L&amp;#39;, &amp;#39;s&amp;#39;, &amp;#39;g&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;G&amp;#39;, &amp;#39;r&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;u&amp;#39;, &amp;#39;p&amp;#39;)
print(len(b))  # 16
​
c = &amp;#39;I Love LsgoGroup&amp;#39;
print(len(c))  # 16&lt;/code&gt;&lt;/pre&gt;
0&lt;br&gt;16&lt;br&gt;16&lt;br&gt;max(sub)返回序列或者参数集合中的最大值&lt;br&gt;【例子】&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;print(max(1, 2, 3, 4, 5))  # 5
print(max([-8, 99, 3, 7, 83]))  # 99
print(max(&amp;#39;IloveLsgoGroup&amp;#39;))  # v&lt;/code&gt;&lt;/pre&gt;
5&lt;br&gt;99&lt;br&gt;v&lt;br&gt;min(sub)返回序列或参数集合中的最小值&lt;br&gt;【例子】&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;print(min(1, 2, 3, 4, 5))  # 1
print(min([-8, 99, 3, 7, 83]))  # -8
print(min(&amp;#39;IloveLsgoGroup&amp;#39;))  # G&lt;/code&gt;&lt;/pre&gt;
1&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;-8&lt;br&gt;G&lt;br&gt;sum(iterable[, start=0]) 返回序列iterable与可选参数start的总和。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;print(sum([1, 3, 5, 7, 9]))  # 25
print(sum([1, 3, 5, 7, 9], 10))  # 35
print(sum((1, 3, 5, 7, 9)))  # 25
print(sum((1, 3, 5, 7, 9), 20))  # 45&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;25&lt;br&gt;35&lt;br&gt;25&lt;br&gt;45&lt;br&gt;sorted(iterable, key=None, reverse=False) 对所有可迭代的对象进行排序操作。&lt;br&gt;iterable – 可迭代对象。&lt;br&gt;key – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。&lt;br&gt;reverse – 排序规则，reverse = True 降序 ， reverse = False 升序（默认）。&lt;br&gt;返回重新排序的列表。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;x = [-8, 99, 3, 7, 83]
print(sorted(x))  # [-8, 3, 7, 83, 99]
print(sorted(x, reverse=True))  # [99, 83, 7, 3, -8]
​
t = (&amp;#123;&amp;quot;age&amp;quot;: 20, &amp;quot;name&amp;quot;: &amp;quot;a&amp;quot;&amp;#125;, &amp;#123;&amp;quot;age&amp;quot;: 25, &amp;quot;name&amp;quot;: &amp;quot;b&amp;quot;&amp;#125;, &amp;#123;&amp;quot;age&amp;quot;: 10, &amp;quot;name&amp;quot;: &amp;quot;c&amp;quot;&amp;#125;)
x = sorted(t, key=lambda a: a[&amp;quot;age&amp;quot;])
print(x)
# [&amp;#123;&amp;#39;age&amp;#39;: 10, &amp;#39;name&amp;#39;: &amp;#39;c&amp;#39;&amp;#125;, &amp;#123;&amp;#39;age&amp;#39;: 20, &amp;#39;name&amp;#39;: &amp;#39;a&amp;#39;&amp;#125;, &amp;#123;&amp;#39;age&amp;#39;: 25, &amp;#39;name&amp;#39;: &amp;#39;b&amp;#39;&amp;#125;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[-8, 3, 7, 83, 99]&lt;br&gt;[99, 83, 7, 3, -8]&lt;br&gt;[{‘age’: 10, ‘name’: ‘c’}, {‘age’: 20, ‘name’: ‘a’}, {‘age’: 25, ‘name’: ‘b’}]&lt;br&gt;reversed(seq) 函数返回一个反转的迭代器。&lt;br&gt;seq – 要转换的序列，可以是 tuple, string, list 或 range。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;s = &amp;#39;lsgogroup&amp;#39;
x = reversed(s)
print(type(x))  # &amp;lt;class &amp;#39;reversed&amp;#39;&amp;gt;
print(x)  # &amp;lt;reversed object at 0x000002507E8EC2C8&amp;gt;
print(list(x))
# [&amp;#39;p&amp;#39;, &amp;#39;u&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;r&amp;#39;, &amp;#39;g&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;g&amp;#39;, &amp;#39;s&amp;#39;, &amp;#39;l&amp;#39;]
​
t = (&amp;#39;l&amp;#39;, &amp;#39;s&amp;#39;, &amp;#39;g&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;g&amp;#39;, &amp;#39;r&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;u&amp;#39;, &amp;#39;p&amp;#39;)
print(list(reversed(t)))
# [&amp;#39;p&amp;#39;, &amp;#39;u&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;r&amp;#39;, &amp;#39;g&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;g&amp;#39;, &amp;#39;s&amp;#39;, &amp;#39;l&amp;#39;]
​
r = range(5, 9)
print(list(reversed(r)))
# [8, 7, 6, 5]
​
x = [-8, 99, 3, 7, 83]
print(list(reversed(x)))
# [83, 7, 3, 99, -8]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;class ‘reversed’&amp;gt;&lt;br&gt;&amp;lt;reversed object at 0x000001F0517DFD68&amp;gt;&lt;br&gt;[‘p’, ‘u’, ‘o’, ‘r’, ‘g’, ‘o’, ‘g’, ‘s’, ‘l’]&lt;br&gt;[‘p’, ‘u’, ‘o’, ‘r’, ‘g’, ‘o’, ‘g’, ‘s’, ‘l’]&lt;br&gt;[8, 7, 6, 5]&lt;br&gt;[83, 7, 3, 99, -8]&lt;br&gt;enumerate(sequence, [start=0])&lt;br&gt;【例子】用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;seasons = [&amp;#39;Spring&amp;#39;, &amp;#39;Summer&amp;#39;, &amp;#39;Fall&amp;#39;, &amp;#39;Winter&amp;#39;]
a = list(enumerate(seasons))
print(a)  
# [(0, &amp;#39;Spring&amp;#39;), (1, &amp;#39;Summer&amp;#39;), (2, &amp;#39;Fall&amp;#39;), (3, &amp;#39;Winter&amp;#39;)]
​
b = list(enumerate(seasons, 1))
print(b)  
# [(1, &amp;#39;Spring&amp;#39;), (2, &amp;#39;Summer&amp;#39;), (3, &amp;#39;Fall&amp;#39;), (4, &amp;#39;Winter&amp;#39;)]
​
for i, element in a:
    print(&amp;#39;&amp;#123;0&amp;#125;,&amp;#123;1&amp;#125;&amp;#39;.format(i, element))
# 0,Spring
# 1,Summer
# 2,Fall
# 3,Winter&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[(0, ‘Spring’), (1, ‘Summer’), (2, ‘Fall’), (3, ‘Winter’)]&lt;br&gt;[(1, ‘Spring’), (2, ‘Summer’), (3, ‘Fall’), (4, ‘Winter’)]&lt;br&gt;0,Spring&lt;br&gt;1,Summer&lt;br&gt;2,Fall&lt;br&gt;3,Winter&lt;br&gt;zip(iter1 [,iter2 […]])&lt;br&gt;用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，这样做的好处是节约了不少的内存。&lt;br&gt;我们可以使用 list() 转换来输出列表。&lt;br&gt;如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 * 号操作符，可以将元组解压为列表。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a = [1, 2, 3]
b = [4, 5, 6]
c = [4, 5, 6, 7, 8]
​
zipped = zip(a, b)
print(zipped)  # &amp;lt;zip object at 0x000000C5D89EDD88&amp;gt;
print(list(zipped))  # [(1, 4), (2, 5), (3, 6)]
zipped = zip(a, c)
print(list(zipped))  # [(1, 4), (2, 5), (3, 6)]
​
a1, a2 = zip(*zip(a, b))
print(list(a1))  # [1, 2, 3]
print(list(a2))  # [4, 5, 6]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;zip object at 0x000001F0517E38C8&amp;gt;&lt;br&gt;[(1, 4), (2, 5), (3, 6)]&lt;br&gt;[(1, 4), (2, 5), (3, 6)]&lt;br&gt;[1, 2, 3]&lt;br&gt;[4, 5, 6]&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://47.97.229.110/2021/01/29/python-3-day/</guid>
            <title>python_3_day</title>
            <link>http://47.97.229.110/2021/01/29/python-3-day/</link>
            <category term="ython" scheme="http://47.97.229.110/categories/ython/" />
            <pubDate>Fri, 29 Jan 2021 21:38:29 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;Python入门(下)&lt;br&gt;简介&lt;/p&gt;
&lt;p&gt;函数&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;函数的定义&lt;/li&gt;
&lt;li&gt;函数的调用&lt;/li&gt;
&lt;li&gt;函数文档&lt;/li&gt;
&lt;li&gt;函数参数&lt;/li&gt;
&lt;li&gt;函数的返回值&lt;/li&gt;
&lt;li&gt;变量作用域&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Lambda-表达式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;匿名函数的定义&lt;/li&gt;
&lt;li&gt;匿名函数的应用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;类与对象&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;属性和方法组成对象&lt;/li&gt;
&lt;li&gt;self是什么？&lt;/li&gt;
&lt;li&gt;Python的魔法方法&lt;/li&gt;
&lt;li&gt;公有和私有&lt;/li&gt;
&lt;li&gt;继承&lt;/li&gt;
&lt;li&gt;组合&lt;/li&gt;
&lt;li&gt;类、类对象和实例对象&lt;/li&gt;
&lt;li&gt;什么是绑定？&lt;/li&gt;
&lt;li&gt;一些相关的内置函数（BIF）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;魔法方法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基本的魔法方法&lt;/li&gt;
&lt;li&gt;算术运算符&lt;/li&gt;
&lt;li&gt;反算术运算符&lt;/li&gt;
&lt;li&gt;增量赋值运算&lt;/li&gt;
&lt;li&gt;一元运算符&lt;/li&gt;
&lt;li&gt;属性访问&lt;/li&gt;
&lt;li&gt;描述符&lt;/li&gt;
&lt;li&gt;定制序列&lt;/li&gt;
&lt;li&gt;迭代器&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;简介&lt;br&gt;Python 是一种通用编程语言，其在科学计算和机器学习领域具有广泛的应用。如果我们打算利用 Python 来执行机器学习，那么对 Python 有一些基本的了解就是至关重要的。本 Python 入门系列体验就是为这样的初学者精心准备的。&lt;/p&gt;
&lt;p&gt;本实验包括以下内容：&lt;/p&gt;
&lt;p&gt;函数&lt;br&gt;函数的定义&lt;br&gt;函数的调用&lt;br&gt;函数文档&lt;br&gt;函数参数&lt;br&gt;函数的返回值&lt;br&gt;变量作用域&lt;br&gt;Lambda 表达式&lt;br&gt;匿名函数的定义&lt;br&gt;匿名函数的应用&lt;br&gt;类与对象&lt;br&gt;对象 = 属性 + 方法&lt;br&gt;self 是什么？&lt;br&gt;Python 的魔法方法&lt;br&gt;公有和私有&lt;br&gt;继承&lt;br&gt;组合&lt;br&gt;类、类对象和实例对象&lt;br&gt;什么是绑定？&lt;br&gt;一些相关的内置函数（BIF）&lt;br&gt;魔法方法&lt;br&gt;基本的魔法方法&lt;br&gt;算术运算符&lt;br&gt;反算术运算符&lt;br&gt;增量赋值运算符&lt;br&gt;一元运算符&lt;br&gt;属性访问&lt;br&gt;描述符&lt;br&gt;定制序列&lt;br&gt;迭代器&lt;br&gt;函数&lt;br&gt;函数的定义&lt;br&gt;还记得 Python 里面“万物皆对象”么？Python 把函数也当成对象，可以从另一个函数中返回出来而去构建高阶函数，比如： 参数是函数、返回值是函数。&lt;/p&gt;
&lt;p&gt;我们首先来介绍函数的定义。&lt;/p&gt;
&lt;p&gt;函数以def关键词开头，后接函数名和圆括号()。&lt;br&gt;函数执行的代码以冒号起始，并且缩进。&lt;br&gt;return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回None。&lt;br&gt;def functionname (parameters):&lt;br&gt;       “函数_文档字符串”&lt;br&gt;        function_suite&lt;br&gt;        return [expression]&lt;/p&gt;
&lt;p&gt;函数的调用&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;def printme(str):
    print(str)
​
​
printme(&amp;quot;我要调用用户自定义函数!&amp;quot;)  # 我要调用用户自定义函数!
printme(&amp;quot;再次调用同一函数&amp;quot;)  # 再次调用同一函数
temp = printme(&amp;#39;hello&amp;#39;) # hello
print(temp)  # None&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我要调用用户自定义函数!&lt;br&gt;再次调用同一函数&lt;br&gt;hello&lt;br&gt;None&lt;br&gt;函数文档&lt;br&gt;def MyFirstFunction(name):&lt;br&gt;    “函数定义过程中name是形参”&lt;br&gt;    # 因为Ta只是一个形式，表示占据一个参数位置&lt;br&gt;    print(‘传递进来的{0}叫做实参，因为Ta是具体的参数值！’.format(name))&lt;br&gt;​&lt;br&gt;​&lt;br&gt;MyFirstFunction(‘老马的程序人生’)  &lt;/p&gt;
&lt;h1 id=&#34;传递进来的老马的程序人生叫做实参，因为Ta是具体的参数值！&#34;&gt;&lt;a href=&#34;#传递进来的老马的程序人生叫做实参，因为Ta是具体的参数值！&#34; class=&#34;headerlink&#34; title=&#34;传递进来的老马的程序人生叫做实参，因为Ta是具体的参数值！&#34;&gt;&lt;/a&gt;传递进来的老马的程序人生叫做实参，因为Ta是具体的参数值！&lt;/h1&gt;&lt;p&gt;​&lt;br&gt;print(MyFirstFunction.&lt;strong&gt;doc&lt;/strong&gt;)  &lt;/p&gt;
&lt;h1 id=&#34;函数定义过程中name是形参&#34;&gt;&lt;a href=&#34;#函数定义过程中name是形参&#34; class=&#34;headerlink&#34; title=&#34;函数定义过程中name是形参&#34;&gt;&lt;/a&gt;函数定义过程中name是形参&lt;/h1&gt;&lt;p&gt;​&lt;br&gt;help(MyFirstFunction)&lt;/p&gt;
&lt;h1 id=&#34;Help-on-function-MyFirstFunction-in-module-main&#34;&gt;&lt;a href=&#34;#Help-on-function-MyFirstFunction-in-module-main&#34; class=&#34;headerlink&#34; title=&#34;Help on function MyFirstFunction in module main:&#34;&gt;&lt;/a&gt;Help on function MyFirstFunction in module &lt;strong&gt;main&lt;/strong&gt;:&lt;/h1&gt;&lt;h1 id=&#34;MyFirstFunction-name&#34;&gt;&lt;a href=&#34;#MyFirstFunction-name&#34; class=&#34;headerlink&#34; title=&#34;MyFirstFunction(name)&#34;&gt;&lt;/a&gt;MyFirstFunction(name)&lt;/h1&gt;&lt;h1 id=&#34;函数定义过程中name是形参-1&#34;&gt;&lt;a href=&#34;#函数定义过程中name是形参-1&#34; class=&#34;headerlink&#34; title=&#34;函数定义过程中name是形参&#34;&gt;&lt;/a&gt;函数定义过程中name是形参&lt;/h1&gt;&lt;p&gt;传递进来的老马的程序人生叫做实参，因为Ta是具体的参数值！&lt;br&gt;函数定义过程中name是形参&lt;br&gt;Help on function MyFirstFunction in module &lt;strong&gt;main&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;MyFirstFunction(name)&lt;br&gt;    函数定义过程中name是形参&lt;/p&gt;
&lt;p&gt;函数参数&lt;br&gt;Python 的函数具有非常灵活多样的参数形态，既可以实现简单的调用，又可以传入非常复杂的参数。从简到繁的参数形态如下：&lt;/p&gt;
&lt;p&gt;位置参数 (positional argument)&lt;br&gt;默认参数 (default argument)&lt;br&gt;可变参数 (variable argument)&lt;br&gt;关键字参数 (keyword argument)&lt;br&gt;命名关键字参数 (name keyword argument)&lt;br&gt;参数组合&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;位置参数&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;def functionname(arg1):
    &amp;quot;函数_文档字符串&amp;quot;
    function_suite
    return [expression]&lt;/code&gt;&lt;/pre&gt;
arg1 - 位置参数 ，这些参数在调用函数 (call function) 时位置要固定。&lt;/li&gt;
&lt;li&gt;默认参数&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;def functionname(arg1, arg2=v):
    &amp;quot;函数_文档字符串&amp;quot;
    function_suite
    return [expression]&lt;/code&gt;&lt;/pre&gt;
arg2 = v - 默认参数 = 默认值，调用函数时，默认参数的值如果没有传入，则被认为是默认值。&lt;br&gt;默认参数一定要放在位置参数 后面，不然程序会报错。&lt;br&gt;【例子】&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;def printinfo(name, age=8):
 print(&amp;#39;Name:&amp;#123;0&amp;#125;,Age:&amp;#123;1&amp;#125;&amp;#39;.format(name, age))
​
​
printinfo(&amp;#39;小马&amp;#39;)  # Name:小马,Age:8
printinfo(&amp;#39;小马&amp;#39;, 10)  # Name:小马,Age:10&lt;/code&gt;&lt;/pre&gt;
Name:小马,Age:8&lt;br&gt;Name:小马,Age:10&lt;br&gt;Python 允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。&lt;br&gt;【例子】&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;def printinfo(name, age):
 print(&amp;#39;Name:&amp;#123;0&amp;#125;,Age:&amp;#123;1&amp;#125;&amp;#39;.format(name, age))
​
​
printinfo(age=8, name=&amp;#39;小马&amp;#39;)  # Name:小马,Age:8&lt;/code&gt;&lt;/pre&gt;
Name:小马,Age:8&lt;/li&gt;
&lt;li&gt;可变参数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;顾名思义，可变参数就是传入的参数个数是可变的，可以是 0, 1, 2 到任意个，是不定长的参数。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;def functionname(arg1, arg2=v, *args):
       &amp;quot;函数_文档字符串&amp;quot;
       function_suite
       return [expression]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;args - 可变参数，可以是从零个到任意个，自动组装成元组。&lt;br&gt;加了星号（&lt;/em&gt;）的变量名会存放所有未命名的变量参数。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;def printinfo(arg1, *args):
    print(arg1)
    for var in args:
        print(var)
​
​
printinfo(10)  # 10
printinfo(70, 60, 50)&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;70&#34;&gt;&lt;a href=&#34;#70&#34; class=&#34;headerlink&#34; title=&#34;70&#34;&gt;&lt;/a&gt;70&lt;/h1&gt;&lt;h1 id=&#34;60&#34;&gt;&lt;a href=&#34;#60&#34; class=&#34;headerlink&#34; title=&#34;60&#34;&gt;&lt;/a&gt;60&lt;/h1&gt;&lt;h1 id=&#34;50&#34;&gt;&lt;a href=&#34;#50&#34; class=&#34;headerlink&#34; title=&#34;50&#34;&gt;&lt;/a&gt;50&lt;/h1&gt;&lt;p&gt;10&lt;br&gt;70&lt;br&gt;60&lt;br&gt;50&lt;br&gt;4. 关键字参数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;def functionname(arg1, arg2=v, args, *kw):
       &amp;quot;函数_文档字符串&amp;quot;
       function_suite
       return [expression]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;**kw - 关键字参数，可以是从零个到任意个，自动组装成字典。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;def printinfo(arg1, *args, **kwargs):
    print(arg1)
    print(args)
    print(kwargs)
​
​
printinfo(70, 60, 50)
# 70
# (60, 50)
# &amp;#123;&amp;#125;
printinfo(70, 60, 50, a=1, b=2)
# 70
# (60, 50)
# &amp;#123;&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 2&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;70&lt;br&gt;(60, 50)&lt;br&gt;{}&lt;br&gt;70&lt;br&gt;(60, 50)&lt;br&gt;{‘a’: 1, ‘b’: 2}&lt;br&gt;「可变参数」和「关键字参数」的同异总结如下：&lt;/p&gt;
&lt;p&gt;可变参数允许传入零个到任意个参数，它们在函数调用时自动组装为一个元组 (tuple)。&lt;br&gt;关键字参数允许传入零个到任意个参数，它们在函数内部自动组装为一个字典 (dict)。&lt;br&gt;5. 命名关键字参数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;def functionname(arg1, arg2=v, args, *, nkw, *kw):
       &amp;quot;函数_文档字符串&amp;quot;
       function_suite
       return [expression]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;*, nkw - 命名关键字参数，用户想要输入的关键字参数，定义方式是在nkw 前面加个分隔符 *。&lt;br&gt;如果要限制关键字参数的名字，就可以用「命名关键字参数」&lt;br&gt;使用命名关键字参数时，要特别注意不能缺少参数名。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;def printinfo(arg1, *, nkw, **kwargs):
    print(arg1)
    print(nkw)
    print(kwargs)
​
​
printinfo(70, nkw=10, a=1, b=2)
# 70
# 10
# &amp;#123;&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 2&amp;#125;
​
printinfo(70, 10, a=1, b=2)
# TypeError: printinfo() takes 1 positional argument but 2 were given&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;70&lt;br&gt;10&lt;br&gt;{‘a’: 1, ‘b’: 2}&lt;br&gt;没有写参数名nwk，因此 10 被当成「位置参数」，而原函数只有 1 个位置函数，现在调用了 2 个，因此程序会报错。&lt;br&gt;6. 参数组合&lt;/p&gt;
&lt;p&gt;在 Python 中定义函数，可以用位置参数、默认参数、可变参数、命名关键字参数和关键字参数，这 5 种参数中的 4 个都可以一起使用，但是注意，参数定义的顺序必须是：&lt;/p&gt;
&lt;p&gt;位置参数、默认参数、可变参数和关键字参数。&lt;br&gt;位置参数、默认参数、命名关键字参数和关键字参数。&lt;br&gt;要注意定义可变参数和关键字参数的语法：&lt;/p&gt;
&lt;p&gt;*args 是可变参数，args 接收的是一个 tuple&lt;br&gt;**kw 是关键字参数，kw 接收的是一个 dict&lt;br&gt;命名关键字参数是为了限制调用者可以传入的参数名，同时可以提供默认值。定义命名关键字参数不要忘了写分隔符 *，否则定义的是位置参数。&lt;/p&gt;
&lt;p&gt;警告：虽然可以组合多达 5 种参数，但不要同时使用太多的组合，否则函数很难懂。&lt;/p&gt;
&lt;p&gt;函数的返回值&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;def add(a, b):
    return a + b
​
​
print(add(1, 2))  # 3
print(add([1, 2, 3], [4, 5, 6]))  # [1, 2, 3, 4, 5, 6]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3&lt;br&gt;[1, 2, 3, 4, 5, 6]&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;def back():
    return [1, &amp;#39;小马的程序人生&amp;#39;, 3.14]
​
​
print(back())  # [1, &amp;#39;小马的程序人生&amp;#39;, 3.14]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[1, ‘小马的程序人生’, 3.14]&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;def back():
    return 1, &amp;#39;小马的程序人生&amp;#39;, 3.14
​
​
print(back())  # (1, &amp;#39;小马的程序人生&amp;#39;, 3.14)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(1, ‘小马的程序人生’, 3.14)&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;def printme(str):
    print(str)
​
temp = printme(&amp;#39;hello&amp;#39;) # hello
print(temp) # None
print(type(temp))  # &amp;lt;class &amp;#39;NoneType&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;hello&lt;br&gt;None&lt;br&gt;&amp;lt;class ‘NoneType’&amp;gt;&lt;br&gt;变量作用域&lt;br&gt;Python 中，程序的变量并不是在哪个位置都可以访问的，访问权限决定于这个变量是在哪里赋值的。&lt;br&gt;定义在函数内部的变量拥有局部作用域，该变量称为局部变量。&lt;br&gt;定义在函数外部的变量拥有全局作用域，该变量称为全局变量。&lt;br&gt;局部变量只能在其被声明的函数内部访问，而全局变量可以在整个程序范围内访问。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;def discounts(price, rate):
    final_price = price * rate
    return final_price
​
​
old_price = float(input(&amp;#39;请输入原价:&amp;#39;))  # 98
rate = float(input(&amp;#39;请输入折扣率:&amp;#39;))  # 0.9
new_price = discounts(old_price, rate)
print(&amp;#39;打折后价格是:%.2f&amp;#39; % new_price)  # 88.20&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;请输入原价:98&lt;br&gt;请输入折扣率:0.9&lt;br&gt;打折后价格是:88.20&lt;br&gt;当内部作用域想修改外部作用域的变量时，就要用到global和nonlocal关键字了。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;num = 1
​
​
def fun1():
    global num  # 需要使用 global 关键字声明
    print(num)  # 1
    num = 123
    print(num)  # 123
​
​
fun1()
print(num)  # 123&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1&lt;br&gt;123&lt;br&gt;123&lt;br&gt;内嵌函数&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;def outer():
    print(&amp;#39;outer函数在这被调用&amp;#39;)
​
    def inner():
        print(&amp;#39;inner函数在这被调用&amp;#39;)
​
    inner()  # 该函数只能在outer函数内部被调用
​
​
outer()
# outer函数在这被调用
# inner函数在这被调用&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;outer函数在这被调用&lt;br&gt;inner函数在这被调用&lt;br&gt;闭包&lt;/p&gt;
&lt;p&gt;是函数式编程的一个重要的语法结构，是一种特殊的内嵌函数。&lt;br&gt;如果在一个内部函数里对外层非全局作用域的变量进行引用，那么内部函数就被认为是闭包。&lt;br&gt;通过闭包可以访问外层非全局作用域的变量，这个作用域称为 闭包作用域。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;def funX(x):
    def funY(y):
        return x * y
​
    return funY
​
​
i = funX(8)
print(type(i))  # &amp;lt;class &amp;#39;function&amp;#39;&amp;gt;
print(i(5))  # 40&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;class ‘function’&amp;gt;&lt;br&gt;40&lt;br&gt;【例子】闭包的返回值通常是函数。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;def make_counter(init):
    counter = [init]
​
    def inc(): counter[0] += 1
​
    def dec(): counter[0] -= 1
​
    def get(): return counter[0]
​
    def reset(): counter[0] = init
​
    return inc, dec, get, reset
​
​
inc, dec, get, reset = make_counter(0)
inc()
inc()
inc()
print(get())  # 3
dec()
print(get())  # 2
reset()
print(get())  # 0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3&lt;br&gt;2&lt;br&gt;0&lt;br&gt;【例子】 如果要修改闭包作用域中的变量则需要 nonlocal 关键字&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;def outer():
    num = 10
​
    def inner():
        nonlocal num  # nonlocal关键字声明
        num = 100
        print(num)
​
    inner()
    print(num)
​
​
outer()
​
# 100
# 100
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;100&lt;br&gt;100&lt;br&gt;递归&lt;/p&gt;
&lt;p&gt;如果一个函数在内部调用自身本身，这个函数就是递归函数。&lt;br&gt;【例子】n! = 1 x 2 x 3 x … x n&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;# 利用循环
n = 5
for k in range(1, 5):
    n = n * k
print(n)  # 120
​
# 利用递归
def factorial(n):
    if n == 1:
        return 1
    return n * factorial(n - 1)
​
​
print(factorial(5)) # 120&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;120&lt;br&gt;120&lt;br&gt;【例子】斐波那契数列 f(n)=f(n-1)+f(n-2), f(0)=0 f(1)=1&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;# 利用循环
i = 0
j = 1
lst = list([i, j])
for k in range(2, 11):
    k = i + j
    lst.append(k)
    i = j
    j = k
print(lst)  
# [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
​
# 利用递归
def recur_fibo(n):
    if n &amp;lt;= 1:
        return n
    return recur_fibo(n - 1) + recur_fibo(n - 2)
​
​
lst = list()
for k in range(11):
    lst.append(recur_fibo(k))
print(lst)  
# [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]&lt;br&gt;[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]&lt;br&gt;【例子】设置递归的层数，Python默认递归层数为 100&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;import sys
​
sys.setrecursionlimit(1000)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lambda 表达式&lt;br&gt;匿名函数的定义&lt;br&gt;在 Python 里有两类函数：&lt;/p&gt;
&lt;p&gt;第一类：用 def 关键词定义的正规函数&lt;br&gt;第二类：用 lambda 关键词定义的匿名函数&lt;br&gt;Python 使用 lambda 关键词来创建匿名函数，而非def关键词，它没有函数名，其语法结构如下：&lt;/p&gt;
&lt;p&gt;lambda argument_list: expression&lt;/p&gt;
&lt;p&gt;lambda - 定义匿名函数的关键词。&lt;br&gt;argument_list - 函数参数，它们可以是位置参数、默认参数、关键字参数，和正规函数里的参数类型一样。&lt;br&gt;:- 冒号，在函数参数和表达式中间要加个冒号。&lt;br&gt;expression - 只是一个表达式，输入函数参数，输出一些值。&lt;br&gt;注意：&lt;/p&gt;
&lt;p&gt;expression 中没有 return 语句，因为 lambda 不需要它来返回，表达式本身结果就是返回值。&lt;br&gt;匿名函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;def sqr(x):
    return x ** 2
​
​
print(sqr)
# &amp;lt;function sqr at 0x000000BABD3A4400&amp;gt;
​
y = [sqr(x) for x in range(10)]
print(y)
# [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
​
lbd_sqr = lambda x: x ** 2
print(lbd_sqr)
# &amp;lt;function &amp;lt;lambda&amp;gt; at 0x000000BABB6AC1E0&amp;gt;
​
y = [lbd_sqr(x) for x in range(10)]
print(y)
# [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
​
​
sumary = lambda arg1, arg2: arg1 + arg2
print(sumary(10, 20))  # 30
​
func = lambda *args: sum(args)
print(func(1, 2, 3, 4, 5))  # 15&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;function sqr at 0x00000220081D9E18&amp;gt;&lt;br&gt;[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]&lt;br&gt;&amp;lt;function &lt;lambda&gt; at 0x00000220081FF400&amp;gt;&lt;br&gt;[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]&lt;br&gt;30&lt;br&gt;15&lt;br&gt;匿名函数的应用&lt;br&gt;函数式编程 是指代码中每一块都是不可变的，都由纯函数的形式组成。这里的纯函数，是指函数本身相互独立、互不影响，对于相同的输入，总会有相同的输出，没有任何副作用。&lt;/p&gt;
&lt;p&gt;【例子】非函数式编程&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;def f(x):
    for i in range(0, len(x)):
        x[i] += 10
    return x
​
​
x = [1, 2, 3]
f(x)
print(x)

# [11, 12, 13]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[11, 12, 13]&lt;br&gt;【例子】函数式编程&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;def f(x):
    y = []
    for item in x:
        y.append(item + 10)
    return y
​
​
x = [1, 2, 3]
f(x)
print(x)
# [1, 2, 3]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[1, 2, 3]&lt;br&gt;匿名函数 常常应用于函数式编程的高阶函数 (high-order function)中，主要有两种形式：&lt;/p&gt;
&lt;p&gt;参数是函数 (filter, map)&lt;br&gt;返回值是函数 (closure)&lt;br&gt;如，在 filter和map函数中的应用：&lt;/p&gt;
&lt;p&gt;filter(function, iterable) 过滤序列，过滤掉不符合条件的元素，返回一个迭代器对象，如果要转换为列表，可以使用 list() 来转换。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;odd = lambda x: x % 2 == 1
templist = filter(odd, [1, 2, 3, 4, 5, 6, 7, 8, 9])
print(list(templist))  # [1, 3, 5, 7, 9]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[1, 3, 5, 7, 9]&lt;br&gt;map(function, *iterables) 根据提供的函数对指定序列做映射。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;m1 = map(lambda x: x ** 2, [1, 2, 3, 4, 5])
print(list(m1))  
# [1, 4, 9, 16, 25]
​
m2 = map(lambda x, y: x + y, [1, 3, 5, 7, 9], [2, 4, 6, 8, 10])
print(list(m2))  
# [3, 7, 11, 15, 19]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[1, 4, 9, 16, 25]&lt;br&gt;[3, 7, 11, 15, 19]&lt;br&gt;除了 Python 这些内置函数，我们也可以自己定义高阶函数。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;def apply_to_list(fun, some_list):
    return fun(some_list)
​
lst = [1, 2, 3, 4, 5]
print(apply_to_list(sum, lst))
# 15
​
print(apply_to_list(len, lst))
# 5
​
print(apply_to_list(lambda x: sum(x) / len(x), lst))
# 3.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;15&lt;br&gt;5&lt;br&gt;3.0&lt;br&gt;类与对象&lt;br&gt;对象 = 属性 + 方法&lt;br&gt;对象是类的实例。换句话说，类主要定义对象的结构，然后我们以类为模板创建对象。类不但包含方法定义，而且还包含所有实例共享的数据。&lt;/p&gt;
&lt;p&gt;封装：信息隐蔽技术&lt;br&gt;我们可以使用关键字 class 定义 Python 类，关键字后面紧跟类的名称、分号和类的实现。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class Turtle:  # Python中的类名约定以大写字母开头
    &amp;quot;&amp;quot;&amp;quot;关于类的一个简单例子&amp;quot;&amp;quot;&amp;quot;
    # 属性
    color = &amp;#39;green&amp;#39;
    weight = 10
    legs = 4
    shell = True
    mouth = &amp;#39;大嘴&amp;#39;
​
    # 方法
    def climb(self):
        print(&amp;#39;我正在很努力的向前爬...&amp;#39;)
​
    def run(self):
        print(&amp;#39;我正在飞快的向前跑...&amp;#39;)
​
    def bite(self):
        print(&amp;#39;咬死你咬死你!!&amp;#39;)
​
    def eat(self):
        print(&amp;#39;有得吃，真满足...&amp;#39;)
​
    def sleep(self):
        print(&amp;#39;困了，睡了，晚安，zzz&amp;#39;)
​
​
tt = Turtle()
print(tt)
# &amp;lt;__main__.Turtle object at 0x0000007C32D67F98&amp;gt;
​
print(type(tt))
# &amp;lt;class &amp;#39;__main__.Turtle&amp;#39;&amp;gt;
​
print(tt.__class__)
# &amp;lt;class &amp;#39;__main__.Turtle&amp;#39;&amp;gt;
​
print(tt.__class__.__name__)
# Turtle
​
tt.climb()
# 我正在很努力的向前爬...
​
tt.run()
# 我正在飞快的向前跑...
​
tt.bite()
# 咬死你咬死你!!
​
# Python类也是对象。它们是type的实例
print(type(Turtle))
# &amp;lt;class &amp;#39;type&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;__main__.Turtle object at 0x000002200820E898&amp;gt;&lt;br&gt;&amp;lt;class ‘__main__.Turtle’&amp;gt;&lt;br&gt;&amp;lt;class ‘__main__.Turtle’&amp;gt;&lt;br&gt;Turtle&lt;br&gt;我正在很努力的向前爬…&lt;br&gt;我正在飞快的向前跑…&lt;br&gt;咬死你咬死你!!&lt;br&gt;&amp;lt;class ‘type’&amp;gt;&lt;br&gt;继承：子类自动共享父类之间数据和方法的机制&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class MyList(list):
    pass
​
​
lst = MyList([1, 5, 2, 7, 8])
lst.append(9)
lst.sort()
print(lst)
​
# [1, 2, 5, 7, 8, 9]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[1, 2, 5, 7, 8, 9]&lt;br&gt;多态：不同对象对同一方法响应不同的行动&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class Animal:
    def run(self):
        raise AttributeError(&amp;#39;子类必须实现这个方法&amp;#39;)
​
​
class People(Animal):
    def run(self):
        print(&amp;#39;人正在走&amp;#39;)
​
​
class Pig(Animal):
    def run(self):
        print(&amp;#39;pig is walking&amp;#39;)
​
​
class Dog(Animal):
    def run(self):
        print(&amp;#39;dog is running&amp;#39;)
​
​
def func(animal):
    animal.run()
​
​
func(Pig())
# pig is walking&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;pig is walking&lt;br&gt;self 是什么？&lt;br&gt;Python 的 self 相当于 C++ 的 this 指针。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class Test:
    def prt(self):
        print(self)
        print(self.__class__)
​
​
t = Test()
t.prt()
# &amp;lt;__main__.Test object at 0x000000BC5A351208&amp;gt;
# &amp;lt;class &amp;#39;__main__.Test&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;__main__.Test object at 0x000002200820EA20&amp;gt;&lt;br&gt;&amp;lt;class ‘__main__.Test’&amp;gt;&lt;br&gt;类的方法与普通的函数只有一个特别的区别 —— 它们必须有一个额外的第一个参数名称（对应于该实例，即该对象本身），按照惯例它的名称是 self。在调用方法时，我们无需明确提供与参数 self 相对应的参数。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class Ball:
    def setName(self, name):
        self.name = name
​
    def kick(self):
        print(&amp;quot;我叫%s,该死的，谁踢我...&amp;quot; % self.name)
​
​
a = Ball()
a.setName(&amp;quot;球A&amp;quot;)
b = Ball()
b.setName(&amp;quot;球B&amp;quot;)
c = Ball()
c.setName(&amp;quot;球C&amp;quot;)
a.kick()
# 我叫球A,该死的，谁踢我...
b.kick()
# 我叫球B,该死的，谁踢我...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我叫球A,该死的，谁踢我…&lt;br&gt;我叫球B,该死的，谁踢我…&lt;br&gt;Python 的魔法方法&lt;br&gt;据说，Python 的对象天生拥有一些神奇的方法，它们是面向对象的 Python 的一切…&lt;/p&gt;
&lt;p&gt;它们是可以给你的类增加魔力的特殊方法…&lt;/p&gt;
&lt;p&gt;如果你的对象实现了这些方法中的某一个，那么这个方法就会在特殊的情况下被 Python 所调用，而这一切都是自动发生的…&lt;/p&gt;
&lt;p&gt;类有一个名为&lt;strong&gt;init&lt;/strong&gt;(self[, param1, param2…])的魔法方法，该方法在类实例化时会自动调用。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;​
class Ball:
    def __init__(self, name):
        self.name = name
​
    def kick(self):
        print(&amp;quot;我叫%s,该死的，谁踢我...&amp;quot; % self.name)
​
​
a = Ball(&amp;quot;球A&amp;quot;)
b = Ball(&amp;quot;球B&amp;quot;)
c = Ball(&amp;quot;球C&amp;quot;)
a.kick()
# 我叫球A,该死的，谁踢我...
b.kick()
# 我叫球B,该死的，谁踢我...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我叫球A,该死的，谁踢我…&lt;br&gt;我叫球B,该死的，谁踢我…&lt;br&gt;公有和私有&lt;br&gt;在 Python 中定义私有变量只需要在变量名或函数名前加上“__”两个下划线，那么这个函数或变量就会为私有的了。&lt;/p&gt;
&lt;p&gt;【例子】类的私有属性实例&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class JustCounter:
    __secretCount = 0  # 私有变量
    publicCount = 0  # 公开变量
​
    def count(self):
        self.__secretCount += 1
        self.publicCount += 1
        print(self.__secretCount)
​
​
counter = JustCounter()
counter.count()  # 1
counter.count()  # 2
print(counter.publicCount)  # 2
​
# Python的私有为伪私有
print(counter._JustCounter__secretCount)  # 2 
print(counter.__secretCount)  
# AttributeError: &amp;#39;JustCounter&amp;#39; object has no attribute &amp;#39;__secretCount&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1&lt;br&gt;2&lt;br&gt;2&lt;br&gt;2&lt;br&gt;【例子】类的私有方法实例&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class Site:
    def __init__(self, name, url):
        self.name = name  # public
        self.__url = url  # private
​
    def who(self):
        print(&amp;#39;name  : &amp;#39;, self.name)
        print(&amp;#39;url : &amp;#39;, self.__url)
​
    def __foo(self):  # 私有方法
        print(&amp;#39;这是私有方法&amp;#39;)
​
    def foo(self):  # 公共方法
        print(&amp;#39;这是公共方法&amp;#39;)
        self.__foo()
​
​
x = Site(&amp;#39;老马的程序人生&amp;#39;, &amp;#39;https://blog.csdn.net/LSGO_MYP&amp;#39;)
x.who()
# name  :  老马的程序人生
# url :  https://blog.csdn.net/LSGO_MYP
​
x.foo()
# 这是公共方法
# 这是私有方法
​
x.__foo()
# AttributeError: &amp;#39;Site&amp;#39; object has no attribute &amp;#39;__foo&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;name  :  老马的程序人生&lt;br&gt;url :  &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xTR09fTVlQ&#34;&gt;https://blog.csdn.net/LSGO_MYP&lt;/span&gt;&lt;br&gt;这是公共方法&lt;br&gt;这是私有方法&lt;br&gt;继承&lt;br&gt;Python 同样支持类的继承，派生类的定义如下所示：&lt;/p&gt;
&lt;p&gt;class DerivedClassName(BaseClassName):&lt;br&gt;       statement-1&lt;br&gt;              .&lt;br&gt;              .&lt;br&gt;              .&lt;br&gt;       statement-N&lt;/p&gt;
&lt;p&gt;BaseClassName（基类名）必须与派生类定义在一个作用域内。除了类，还可以用表达式，基类定义在另一个模块中时这一点非常有用：&lt;/p&gt;
&lt;p&gt;class DerivedClassName(modname.BaseClassName):&lt;br&gt;       statement-1&lt;br&gt;              .&lt;br&gt;              .&lt;br&gt;              .&lt;br&gt;       statement-N&lt;/p&gt;
&lt;p&gt;【例子】如果子类中定义与父类同名的方法或属性，则会自动覆盖父类对应的方法或属性。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;# 类定义
class people:
    # 定义基本属性
    name = &amp;#39;&amp;#39;
    age = 0
    # 定义私有属性,私有属性在类外部无法直接进行访问
    __weight = 0
​
    # 定义构造方法
    def __init__(self, n, a, w):
        self.name = n
        self.age = a
        self.__weight = w
​
    def speak(self):
        print(&amp;quot;%s 说: 我 %d 岁。&amp;quot; % (self.name, self.age))
​
​
# 单继承示例
class student(people):
    grade = &amp;#39;&amp;#39;
​
    def __init__(self, n, a, w, g):
        # 调用父类的构函
        people.__init__(self, n, a, w)
        self.grade = g
​
    # 覆写父类的方法
    def speak(self):
        print(&amp;quot;%s 说: 我 %d 岁了，我在读 %d 年级&amp;quot; % (self.name, self.age, self.grade))
​
​
s = student(&amp;#39;小马的程序人生&amp;#39;, 10, 60, 3)
s.speak()
# 小马的程序人生 说: 我 10 岁了，我在读 3 年级&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;小马的程序人生 说: 我 10 岁了，我在读 3 年级&lt;br&gt;注意：如果上面的程序去掉：people.&lt;strong&gt;init&lt;/strong&gt;(self, n, a, w)，则输出：说: 我 0 岁了，我在读 3 年级，因为子类的构造方法把父类的构造方法覆盖了。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;import random
​
class Fish:
    def __init__(self):
        self.x = random.randint(0, 10)
        self.y = random.randint(0, 10)
​
    def move(self):
        self.x -= 1
        print(&amp;quot;我的位置&amp;quot;, self.x, self.y)
​
​
class GoldFish(Fish):  # 金鱼
    pass
​
​
class Carp(Fish):  # 鲤鱼
    pass
​
​
class Salmon(Fish):  # 三文鱼
    pass
​
​
class Shark(Fish):  # 鲨鱼
    def __init__(self):
        self.hungry = True
​
    def eat(self):
        if self.hungry:
            print(&amp;quot;吃货的梦想就是天天有得吃！&amp;quot;)
            self.hungry = False
        else:
            print(&amp;quot;太撑了，吃不下了！&amp;quot;)
            self.hungry = True
​
​
g = GoldFish()
g.move()  # 我的位置 9 4
s = Shark()
s.eat() # 吃货的梦想就是天天有得吃！
s.move()  
# AttributeError: &amp;#39;Shark&amp;#39; object has no attribute &amp;#39;x&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我的位置 3 8&lt;br&gt;吃货的梦想就是天天有得吃！&lt;br&gt;解决该问题可用以下两种方式：&lt;/p&gt;
&lt;p&gt;调用未绑定的父类方法Fish.&lt;strong&gt;init&lt;/strong&gt;(self)&lt;br&gt;class Shark(Fish):  # 鲨鱼&lt;br&gt;    def &lt;strong&gt;init&lt;/strong&gt;(self):&lt;br&gt;        Fish.&lt;strong&gt;init&lt;/strong&gt;(self)&lt;br&gt;        self.hungry = True&lt;br&gt;​&lt;br&gt;    def eat(self):&lt;br&gt;        if self.hungry:&lt;br&gt;            print(“吃货的梦想就是天天有得吃！”)&lt;br&gt;            self.hungry = False&lt;br&gt;        else:&lt;br&gt;            print(“太撑了，吃不下了！”)&lt;br&gt;            self.hungry = True&lt;br&gt;使用super函数super().&lt;strong&gt;init&lt;/strong&gt;()&lt;br&gt;class Shark(Fish):  # 鲨鱼&lt;br&gt;    def &lt;strong&gt;init&lt;/strong&gt;(self):&lt;br&gt;        super().&lt;strong&gt;init&lt;/strong&gt;()&lt;br&gt;        self.hungry = True&lt;br&gt;​&lt;br&gt;    def eat(self):&lt;br&gt;        if self.hungry:&lt;br&gt;            print(“吃货的梦想就是天天有得吃！”)&lt;br&gt;            self.hungry = False&lt;br&gt;        else:&lt;br&gt;            print(“太撑了，吃不下了！”)&lt;br&gt;            self.hungry = True&lt;br&gt;Python 虽然支持多继承的形式，但我们一般不使用多继承，因为容易引起混乱。&lt;/p&gt;
&lt;p&gt;class DerivedClassName(Base1, Base2, Base3):&lt;br&gt;       statement-1&lt;br&gt;              .&lt;br&gt;              .&lt;br&gt;              .&lt;br&gt;       statement-N&lt;/p&gt;
&lt;p&gt;需要注意圆括号中父类的顺序，若是父类中有相同的方法名，而在子类使用时未指定，Python 从左至右搜索，即方法在子类中未找到时，从左到右查找父类中是否包含方法。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;# 类定义
class People:
    # 定义基本属性
    name = &amp;#39;&amp;#39;
    age = 0
    # 定义私有属性,私有属性在类外部无法直接进行访问
    __weight = 0
​
    # 定义构造方法
    def __init__(self, n, a, w):
        self.name = n
        self.age = a
        self.__weight = w
​
    def speak(self):
        print(&amp;quot;%s 说: 我 %d 岁。&amp;quot; % (self.name, self.age))
​
​
# 单继承示例
class Student(People):
    grade = &amp;#39;&amp;#39;
​
    def __init__(self, n, a, w, g):
        # 调用父类的构函
        People.__init__(self, n, a, w)
        self.grade = g
​
    # 覆写父类的方法
    def speak(self):
        print(&amp;quot;%s 说: 我 %d 岁了，我在读 %d 年级&amp;quot; % (self.name, self.age, self.grade))
​
​
# 另一个类，多重继承之前的准备
class Speaker:
    topic = &amp;#39;&amp;#39;
    name = &amp;#39;&amp;#39;
​
    def __init__(self, n, t):
        self.name = n
        self.topic = t
​
    def speak(self):
        print(&amp;quot;我叫 %s，我是一个演说家，我演讲的主题是 %s&amp;quot; % (self.name, self.topic))
​
​
# 多重继承
class Sample01(Speaker, Student):
    a = &amp;#39;&amp;#39;
​
    def __init__(self, n, a, w, g, t):
        Student.__init__(self, n, a, w, g)
        Speaker.__init__(self, n, t)
​
# 方法名同，默认调用的是在括号中排前地父类的方法
test = Sample01(&amp;quot;Tim&amp;quot;, 25, 80, 4, &amp;quot;Python&amp;quot;)
test.speak()  
# 我叫 Tim，我是一个演说家，我演讲的主题是 Python
​
class Sample02(Student, Speaker):
    a = &amp;#39;&amp;#39;
​
    def __init__(self, n, a, w, g, t):
        Student.__init__(self, n, a, w, g)
        Speaker.__init__(self, n, t)
​
# 方法名同，默认调用的是在括号中排前地父类的方法
test = Sample02(&amp;quot;Tim&amp;quot;, 25, 80, 4, &amp;quot;Python&amp;quot;)
test.speak()  
# Tim 说: 我 25 岁了，我在读 4 年级&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我叫 Tim，我是一个演说家，我演讲的主题是 Python&lt;br&gt;Tim 说: 我 25 岁了，我在读 4 年级&lt;br&gt;组合&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class Turtle:
    def __init__(self, x):
        self.num = x
​
​
class Fish:
    def __init__(self, x):
        self.num = x
​
​
class Pool:
    def __init__(self, x, y):
        self.turtle = Turtle(x)
        self.fish = Fish(y)
​
    def print_num(self):
        print(&amp;quot;水池里面有乌龟%s只，小鱼%s条&amp;quot; % (self.turtle.num, self.fish.num))
​
​
p = Pool(2, 3)
p.print_num()
# 水池里面有乌龟2只，小鱼3条&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;水池里面有乌龟2只，小鱼3条&lt;br&gt;类、类对象和实例对象&lt;br&gt;类对象和实例对象&lt;/p&gt;
&lt;p&gt;类对象：创建一个类，其实也是一个对象也在内存开辟了一块空间，称为类对象，类对象只有一个。&lt;/p&gt;
&lt;p&gt;class A(object):&lt;br&gt;       pass&lt;/p&gt;
&lt;p&gt;实例对象：就是通过实例化类创建的对象，称为实例对象，实例对象可以有多个。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class A(object):
    pass
​
# 实例化对象 a、b、c都属于实例对象
。
a = A()
b = A()
c = A()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;类属性：类里面方法外面定义的变量称为类属性。类属性所属于类对象并且多个实例对象之间共享同一个类属性，说白了就是类属性所有的通过该类实例化的对象都能共享。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class A():
    a = 0  #类属性
    def __init__(self, xx):
        A.a = xx  #使用类属性可以通过 （类名.类属性）调用。&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;实例属性：实例属性和具体的某个实例对象有关系，并且一个实例对象和另外一个实例对象是不共享属性的，说白了实例属性只能在自己的对象里面使用，其他的对象不能直接使用，因为self是谁调用，它的值就属于该对象。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;# 创建类对象
class Test(object):
    class_attr = 100  # 类属性
​
    def __init__(self):
        self.sl_attr = 100  # 实例属性
​
    def func(self):
        print(&amp;#39;类对象.类属性的值:&amp;#39;, Test.class_attr)  # 调用类属性
        print(&amp;#39;self.类属性的值&amp;#39;, self.class_attr)  # 相当于把类属性 变成实例属性
        print(&amp;#39;self.实例属性的值&amp;#39;, self.sl_attr)  # 调用实例属性
​
​
a = Test()
a.func()
​
# 类对象.类属性的值: 100
# self.类属性的值 100
# self.实例属性的值 100
​
b = Test()
b.func()
​
# 类对象.类属性的值: 100
# self.类属性的值 100
# self.实例属性的值 100
​
a.class_attr = 200
a.sl_attr = 200
a.func()
​
# 类对象.类属性的值: 100
# self.类属性的值 200
# self.实例属性的值 200
​
b.func()
​
# 类对象.类属性的值: 100
# self.类属性的值 100
# self.实例属性的值 100
​
Test.class_attr = 300
a.func()
​
# 类对象.类属性的值: 300
# self.类属性的值 200
# self.实例属性的值 200
​
b.func()
# 类对象.类属性的值: 300
# self.类属性的值 300
# self.实例属性的值 100&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;类对象.类属性的值: 100&lt;br&gt;self.类属性的值 100&lt;br&gt;self.实例属性的值 100&lt;br&gt;类对象.类属性的值: 100&lt;br&gt;self.类属性的值 100&lt;br&gt;self.实例属性的值 100&lt;br&gt;类对象.类属性的值: 100&lt;br&gt;self.类属性的值 200&lt;br&gt;self.实例属性的值 200&lt;br&gt;类对象.类属性的值: 100&lt;br&gt;self.类属性的值 100&lt;br&gt;self.实例属性的值 100&lt;br&gt;类对象.类属性的值: 300&lt;br&gt;self.类属性的值 200&lt;br&gt;self.实例属性的值 200&lt;br&gt;类对象.类属性的值: 300&lt;br&gt;self.类属性的值 300&lt;br&gt;self.实例属性的值 100&lt;br&gt;注意：属性与方法名相同，属性会覆盖方法。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class A:
    def x(self):
        print(&amp;#39;x_man&amp;#39;)
​
​
aa = A()
aa.x()  # x_man
aa.x = 1
print(aa.x)  # 1
aa.x()
# TypeError: &amp;#39;int&amp;#39; object is not callable&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;x_man&lt;br&gt;1&lt;br&gt;什么是绑定？&lt;br&gt;Python 严格要求方法需要有实例才能被调用，这种限制其实就是 Python 所谓的绑定概念。&lt;/p&gt;
&lt;p&gt;Python 对象的数据属性通常存储在名为.__ dict__的字典中，我们可以直接访问&lt;strong&gt;dict__，或利用 Python 的内置函数vars()获取.&lt;/strong&gt; dict__。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class CC:
    def setXY(self, x, y):
        self.x = x
        self.y = y
​
    def printXY(self):
        print(self.x, self.y)
​
​
dd = CC()
print(dd.__dict__)
# &amp;#123;&amp;#125;
​
print(vars(dd))
# &amp;#123;&amp;#125;
​
print(CC.__dict__)
# &amp;#123;&amp;#39;__module__&amp;#39;: &amp;#39;__main__&amp;#39;, &amp;#39;setXY&amp;#39;: &amp;lt;function CC.setXY at 0x000000C3473DA048&amp;gt;, &amp;#39;printXY&amp;#39;: &amp;lt;function CC.printXY at 0x000000C3473C4F28&amp;gt;, &amp;#39;__dict__&amp;#39;: &amp;lt;attribute &amp;#39;__dict__&amp;#39; of &amp;#39;CC&amp;#39; objects&amp;gt;, &amp;#39;__weakref__&amp;#39;: &amp;lt;attribute &amp;#39;__weakref__&amp;#39; of &amp;#39;CC&amp;#39; objects&amp;gt;, &amp;#39;__doc__&amp;#39;: None&amp;#125;
​
dd.setXY(4, 5)
print(dd.__dict__)
# &amp;#123;&amp;#39;x&amp;#39;: 4, &amp;#39;y&amp;#39;: 5&amp;#125;
​
print(vars(CC))
# &amp;#123;&amp;#39;__module__&amp;#39;: &amp;#39;__main__&amp;#39;, &amp;#39;setXY&amp;#39;: &amp;lt;function CC.setXY at 0x000000632CA9B048&amp;gt;, &amp;#39;printXY&amp;#39;: &amp;lt;function CC.printXY at 0x000000632CA83048&amp;gt;, &amp;#39;__dict__&amp;#39;: &amp;lt;attribute &amp;#39;__dict__&amp;#39; of &amp;#39;CC&amp;#39; objects&amp;gt;, &amp;#39;__weakref__&amp;#39;: &amp;lt;attribute &amp;#39;__weakref__&amp;#39; of &amp;#39;CC&amp;#39; objects&amp;gt;, &amp;#39;__doc__&amp;#39;: None&amp;#125;
​
print(CC.__dict__)
# &amp;#123;&amp;#39;__module__&amp;#39;: &amp;#39;__main__&amp;#39;, &amp;#39;setXY&amp;#39;: &amp;lt;function CC.setXY at 0x000000632CA9B048&amp;gt;, &amp;#39;printXY&amp;#39;: &amp;lt;function CC.printXY at 0x000000632CA83048&amp;gt;, &amp;#39;__dict__&amp;#39;: &amp;lt;attribute &amp;#39;__dict__&amp;#39; of &amp;#39;CC&amp;#39; objects&amp;gt;, &amp;#39;__weakref__&amp;#39;: &amp;lt;attribute &amp;#39;__weakref__&amp;#39; of &amp;#39;CC&amp;#39; objects&amp;gt;, &amp;#39;__doc__&amp;#39;: None&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;{}&lt;br&gt;{}&lt;br&gt;{‘&lt;strong&gt;module&lt;/strong&gt;‘: ‘&lt;strong&gt;main&lt;/strong&gt;‘, ‘setXY’: &amp;lt;function CC.setXY at 0x000002200822BD08&amp;gt;, ‘printXY’: &amp;lt;function CC.printXY at 0x000002200822BF28&amp;gt;, ‘&lt;strong&gt;dict&lt;/strong&gt;‘: &amp;lt;attribute ‘__dict__’ of ‘CC’ objects&amp;gt;, ‘&lt;strong&gt;weakref&lt;/strong&gt;‘: &amp;lt;attribute ‘__weakref__’ of ‘CC’ objects&amp;gt;, ‘&lt;strong&gt;doc&lt;/strong&gt;‘: None}&lt;br&gt;{‘x’: 4, ‘y’: 5}&lt;br&gt;{‘&lt;strong&gt;module&lt;/strong&gt;‘: ‘&lt;strong&gt;main&lt;/strong&gt;‘, ‘setXY’: &amp;lt;function CC.setXY at 0x000002200822BD08&amp;gt;, ‘printXY’: &amp;lt;function CC.printXY at 0x000002200822BF28&amp;gt;, ‘&lt;strong&gt;dict&lt;/strong&gt;‘: &amp;lt;attribute ‘__dict__’ of ‘CC’ objects&amp;gt;, ‘&lt;strong&gt;weakref&lt;/strong&gt;‘: &amp;lt;attribute ‘__weakref__’ of ‘CC’ objects&amp;gt;, ‘&lt;strong&gt;doc&lt;/strong&gt;‘: None}&lt;br&gt;{‘&lt;strong&gt;module&lt;/strong&gt;‘: ‘&lt;strong&gt;main&lt;/strong&gt;‘, ‘setXY’: &amp;lt;function CC.setXY at 0x000002200822BD08&amp;gt;, ‘printXY’: &amp;lt;function CC.printXY at 0x000002200822BF28&amp;gt;, ‘&lt;strong&gt;dict&lt;/strong&gt;‘: &amp;lt;attribute ‘__dict__’ of ‘CC’ objects&amp;gt;, ‘&lt;strong&gt;weakref&lt;/strong&gt;‘: &amp;lt;attribute ‘__weakref__’ of ‘CC’ objects&amp;gt;, ‘&lt;strong&gt;doc&lt;/strong&gt;‘: None}&lt;br&gt;一些相关的内置函数（BIF）&lt;br&gt;issubclass(class, classinfo) 方法用于判断参数 class 是否是类型参数 classinfo 的子类。&lt;br&gt;一个类被认为是其自身的子类。&lt;br&gt;classinfo可以是类对象的元组，只要class是其中任何一个候选类的子类，则返回True。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class A:
    pass
​
​
class B(A):
    pass
​
​
print(issubclass(B, A))  # True
print(issubclass(B, B))  # True
print(issubclass(A, B))  # False
print(issubclass(B, object))  # True&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;True&lt;br&gt;True&lt;br&gt;False&lt;br&gt;True&lt;br&gt;isinstance(object, classinfo) 方法用于判断一个对象是否是一个已知的类型，类似type()。&lt;br&gt;type()不会认为子类是一种父类类型，不考虑继承关系。&lt;br&gt;isinstance()会认为子类是一种父类类型，考虑继承关系。&lt;br&gt;如果第一个参数不是对象，则永远返回False。&lt;br&gt;如果第二个参数不是类或者由类对象组成的元组，会抛出一个TypeError异常。&lt;br&gt;【例子】&lt;/p&gt;
&lt;p&gt;a = 2&lt;br&gt;print(isinstance(a, int))  # True&lt;br&gt;print(isinstance(a, str))  # False&lt;br&gt;print(isinstance(a, (str, int, list)))  # True&lt;br&gt;​&lt;br&gt;​&lt;br&gt;class A:&lt;br&gt;    pass&lt;br&gt;​&lt;br&gt;​&lt;br&gt;class B(A):&lt;br&gt;    pass&lt;br&gt;​&lt;br&gt;​&lt;br&gt;print(isinstance(A(), A))  # True&lt;br&gt;print(type(A()) == A)  # True&lt;br&gt;print(isinstance(B(), A))  # True&lt;br&gt;print(type(B()) == A)  # False&lt;br&gt;True&lt;br&gt;False&lt;br&gt;True&lt;br&gt;True&lt;br&gt;True&lt;br&gt;True&lt;br&gt;False&lt;br&gt;hasattr(object, name)用于判断对象是否包含对应的属性。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class Coordinate:
    x = 10
    y = -5
    z = 0
​
​
point1 = Coordinate()
print(hasattr(point1, &amp;#39;x&amp;#39;))  # True
print(hasattr(point1, &amp;#39;y&amp;#39;))  # True
print(hasattr(point1, &amp;#39;z&amp;#39;))  # True
print(hasattr(point1, &amp;#39;no&amp;#39;))  # False&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;True&lt;br&gt;True&lt;br&gt;True&lt;br&gt;False&lt;br&gt;getattr(object, name[, default])用于返回一个对象属性值。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class A(object):
    bar = 1
​
​
a = A()
print(getattr(a, &amp;#39;bar&amp;#39;))  # 1
print(getattr(a, &amp;#39;bar2&amp;#39;, 3))  # 3
print(getattr(a, &amp;#39;bar2&amp;#39;))
# AttributeError: &amp;#39;A&amp;#39; object has no attribute &amp;#39;bar2&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1&lt;br&gt;3&lt;br&gt;【例子】这个例子很酷！&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class A(object):
    def set(self, a, b):
        x = a
        a = b
        b = x
        print(a, b)
​
​
a = A()
c = getattr(a, &amp;#39;set&amp;#39;)
c(a=&amp;#39;1&amp;#39;, b=&amp;#39;2&amp;#39;)  # 2 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​&lt;br&gt;2 1&lt;br&gt;setattr(object, name, value)对应函数 getattr()，用于设置属性值，该属性不一定是存在的。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class A(object):
    bar = 1
​
​
a = A()
print(getattr(a, &amp;#39;bar&amp;#39;))  # 1
setattr(a, &amp;#39;bar&amp;#39;, 5)
print(a.bar)  # 5
setattr(a, &amp;quot;age&amp;quot;, 28)
print(a.age)  # 28&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1&lt;br&gt;5&lt;br&gt;28&lt;br&gt;delattr(object, name)用于删除属性。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class Coordinate:
    x = 10
    y = -5
    z = 0
​
​
point1 = Coordinate()
​
print(&amp;#39;x = &amp;#39;, point1.x)  # x =  10
print(&amp;#39;y = &amp;#39;, point1.y)  # y =  -5
print(&amp;#39;z = &amp;#39;, point1.z)  # z =  0
​
delattr(Coordinate, &amp;#39;z&amp;#39;)
​
print(&amp;#39;--删除 z 属性后--&amp;#39;)  # --删除 z 属性后--
print(&amp;#39;x = &amp;#39;, point1.x)  # x =  10
print(&amp;#39;y = &amp;#39;, point1.y)  # y =  -5
​
# 触发错误
print(&amp;#39;z = &amp;#39;, point1.z)
# AttributeError: &amp;#39;Coordinate&amp;#39; object has no attribute &amp;#39;z&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;x =  10&lt;br&gt;y =  -5&lt;br&gt;z =  0&lt;br&gt;–删除 z 属性后–&lt;br&gt;x =  10&lt;br&gt;y =  -5&lt;br&gt;class property([fget[, fset[, fdel[, doc]]]])用于在新式类中返回属性值。&lt;br&gt;fget – 获取属性值的函数&lt;br&gt;fset – 设置属性值的函数&lt;br&gt;fdel – 删除属性值函数&lt;br&gt;doc – 属性描述信息&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class C(object):
    def __init__(self):
        self.__x = None
​
    def getx(self):
        return self.__x
​
    def setx(self, value):
        self.__x = value
​
    def delx(self):
        del self.__x
​
    x = property(getx, setx, delx, &amp;quot;I&amp;#39;m the &amp;#39;x&amp;#39; property.&amp;quot;)
​
​
cc = C()
cc.x = 2
print(cc.x)  # 2
​
del cc.x
print(cc.x)
# AttributeError: &amp;#39;C&amp;#39; object has no attribute &amp;#39;_C__x&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2&lt;br&gt;魔法方法&lt;br&gt;魔法方法总是被双下划线包围，例如__init__。&lt;/p&gt;
&lt;p&gt;魔法方法是面向对象的 Python 的一切，如果你不知道魔法方法，说明你还没能意识到面向对象的 Python 的强大。&lt;/p&gt;
&lt;p&gt;魔法方法的“魔力”体现在它们总能够在适当的时候被自动调用。&lt;/p&gt;
&lt;p&gt;魔法方法的第一个参数应为cls（类方法） 或者self（实例方法）。&lt;/p&gt;
&lt;p&gt;cls：代表一个类的名称&lt;br&gt;self：代表一个实例对象的名称&lt;br&gt;基本的魔法方法&lt;br&gt;&lt;strong&gt;init&lt;/strong&gt;(self[, …]) 构造器，当一个实例被创建的时候调用的初始化方法&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class Rectangle:
    def __init__(self, x, y):
        self.x = x
        self.y = y
​
    def getPeri(self):
        return (self.x + self.y) * 2
​
    def getArea(self):
        return self.x * self.y
​
​
rect = Rectangle(4, 5)
print(rect.getPeri())  # 18
print(rect.getArea())  # 20&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;18&lt;br&gt;20&lt;br&gt;&lt;strong&gt;new&lt;/strong&gt;(cls[, …]) 在一个对象实例化的时候所调用的第一个方法，在调用__init__初始化前，先调用__new__。&lt;br&gt;__new__至少要有一个参数cls，代表要实例化的类，此参数在实例化时由 Python 解释器自动提供，后面的参数直接传递给__init__。&lt;br&gt;__new__对当前类进行了实例化，并将实例返回，传给__init__的self。但是，执行了__new__，并不一定会进入__init__，只有__new__返回了，当前类cls的实例，当前类的__init__才会进入。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class A(object):
    def __init__(self, value):
        print(&amp;quot;into A __init__&amp;quot;)
        self.value = value
​
    def __new__(cls, *args, **kwargs):
        print(&amp;quot;into A __new__&amp;quot;)
        print(cls)
        return object.__new__(cls)
​
​
class B(A):
    def __init__(self, value):
        print(&amp;quot;into B __init__&amp;quot;)
        self.value = value
​
    def __new__(cls, *args, **kwargs):
        print(&amp;quot;into B __new__&amp;quot;)
        print(cls)
        return super().__new__(cls, *args, **kwargs)
​
​
b = B(10)
​
# 结果：
# into B __new__
# &amp;lt;class &amp;#39;__main__.B&amp;#39;&amp;gt;
# into A __new__
# &amp;lt;class &amp;#39;__main__.B&amp;#39;&amp;gt;
# into B __init__
​
class A(object):
    def __init__(self, value):
        print(&amp;quot;into A __init__&amp;quot;)
        self.value = value
​
    def __new__(cls, *args, **kwargs):
        print(&amp;quot;into A __new__&amp;quot;)
        print(cls)
        return object.__new__(cls)
​
​
class B(A):
    def __init__(self, value):
        print(&amp;quot;into B __init__&amp;quot;)
        self.value = value
​
    def __new__(cls, *args, **kwargs):
        print(&amp;quot;into B __new__&amp;quot;)
        print(cls)
        return super().__new__(A, *args, **kwargs)  # 改动了cls变为A
​
​
b = B(10)
​
# 结果：
# into B __new__
# &amp;lt;class &amp;#39;__main__.B&amp;#39;&amp;gt;
# into A __new__
# &amp;lt;class &amp;#39;__main__.A&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;into B &lt;strong&gt;new&lt;/strong&gt;&lt;br&gt;&amp;lt;class ‘__main__.B’&amp;gt;&lt;br&gt;into A &lt;strong&gt;new&lt;/strong&gt;&lt;br&gt;&amp;lt;class ‘__main__.B’&amp;gt;&lt;br&gt;into B &lt;strong&gt;init&lt;/strong&gt;&lt;br&gt;into B &lt;strong&gt;new&lt;/strong&gt;&lt;br&gt;&amp;lt;class ‘__main__.B’&amp;gt;&lt;br&gt;into A &lt;strong&gt;new&lt;/strong&gt;&lt;br&gt;&amp;lt;class ‘__main__.A’&amp;gt;&lt;br&gt;若__new__没有正确返回当前类cls的实例，那__init__是不会被调用的，即使是父类的实例也不行，将没有__init__被调用。&lt;br&gt;【例子】利用__new__实现单例模式。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class Earth:
    pass
​
​
a = Earth()
print(id(a))  # 260728291456
b = Earth()
print(id(b))  # 260728291624
​
class Earth:
    __instance = None  # 定义一个类属性做判断
​
    def __new__(cls):
        if cls.__instance is None:
            cls.__instance = object.__new__(cls)
            return cls.__instance
        else:
            return cls.__instance
​
​
a = Earth()
print(id(a))  # 512320401648
b = Earth()
print(id(b))  # 512320401648&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2336598724336&lt;br&gt;2336598528464&lt;br&gt;2336598467752&lt;br&gt;2336598467752&lt;br&gt;__new__方法主要是当你继承一些不可变的 class 时（比如int, str, tuple）， 提供给你一个自定义这些类的实例化过程的途径。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class CapStr(str):
    def __new__(cls, string):
        string = string.upper()
        return str.__new__(cls, string)
​
​
a = CapStr(&amp;quot;i love lsgogroup&amp;quot;)
print(a)  # I LOVE LSGOGROUP&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I LOVE LSGOGROUP&lt;br&gt;&lt;strong&gt;del&lt;/strong&gt;(self) 析构器，当一个对象将要被系统回收之时调用的方法。&lt;br&gt;Python 采用自动引用计数（ARC）方式来回收对象所占用的空间，当程序中有一个变量引用该 Python 对象时，Python 会自动保证该对象引用计数为 1；当程序中有两个变量引用该 Python 对象时，Python 会自动保证该对象引用计数为 2，依此类推，如果一个对象的引用计数变成了 0，则说明程序中不再有变量引用该对象，表明程序不再需要该对象，因此 Python 就会回收该对象。&lt;/p&gt;
&lt;p&gt;大部分时候，Python 的 ARC 都能准确、高效地回收系统中的每个对象。但如果系统中出现循环引用的情况，比如对象 a 持有一个实例变量引用对象 b，而对象 b 又持有一个实例变量引用对象 a，此时两个对象的引用计数都是 1，而实际上程序已经不再有变量引用它们，系统应该回收它们，此时 Python 的垃圾回收器就可能没那么快，要等专门的循环垃圾回收器（Cyclic Garbage Collector）来检测并回收这种引用循环。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class C(object):
    def __init__(self):
        print(&amp;#39;into C __init__&amp;#39;)
​
    def __del__(self):
        print(&amp;#39;into C __del__&amp;#39;)
​
​
c1 = C()
# into C __init__
c2 = c1
c3 = c2
del c3
del c2
del c1
# into C __del__&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;into C &lt;strong&gt;init&lt;/strong&gt;&lt;br&gt;into C &lt;strong&gt;del&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;str&lt;/strong&gt;(self):&lt;/p&gt;
&lt;p&gt;当你打印一个对象的时候，触发&lt;strong&gt;str&lt;/strong&gt;&lt;br&gt;当你使用%s格式化的时候，触发&lt;strong&gt;str&lt;/strong&gt;&lt;br&gt;str强转数据类型的时候，触发&lt;strong&gt;str&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;repr&lt;/strong&gt;(self)：&lt;/p&gt;
&lt;p&gt;repr是str的备胎&lt;br&gt;有&lt;strong&gt;str__的时候执行__str&lt;/strong&gt;,没有实现&lt;strong&gt;str__的时候，执行__repr&lt;/strong&gt;&lt;br&gt;repr(obj)内置函数对应的结果是&lt;strong&gt;repr__的返回值&lt;br&gt;当你使用%r格式化的时候 触发__repr&lt;/strong&gt;&lt;br&gt;【例子】&lt;/p&gt;
&lt;p&gt;class Cat:&lt;br&gt;    “””定义一个猫类”””&lt;br&gt;​&lt;br&gt;    def &lt;strong&gt;init&lt;/strong&gt;(self, new_name, new_age):&lt;br&gt;        “””在创建完对象之后 会自动调用, 它完成对象的初始化的功能”””&lt;br&gt;        self.name = new_name&lt;br&gt;        self.age = new_age&lt;br&gt;​&lt;br&gt;    def &lt;strong&gt;str&lt;/strong&gt;(self):&lt;br&gt;        “””返回一个对象的描述信息”””&lt;br&gt;        return “名字是:%s , 年龄是:%d” % (self.name, self.age)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def __repr__(self):
    &amp;quot;&amp;quot;&amp;quot;返回一个对象的描述信息&amp;quot;&amp;quot;&amp;quot;
    return &amp;quot;Cat:(%s,%d)&amp;quot; % (self.name, self.age)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​&lt;br&gt;    def eat(self):&lt;br&gt;        print(“%s在吃鱼….” % self.name)&lt;br&gt;​&lt;br&gt;    def drink(self):&lt;br&gt;        print(“%s在喝可乐…” % self.name)&lt;br&gt;​&lt;br&gt;    def introduce(self):&lt;br&gt;        print(“名字是:%s, 年龄是:%d” % (self.name, self.age))&lt;br&gt;​&lt;br&gt;​&lt;/p&gt;
&lt;h1 id=&#34;创建了一个对象&#34;&gt;&lt;a href=&#34;#创建了一个对象&#34; class=&#34;headerlink&#34; title=&#34;创建了一个对象&#34;&gt;&lt;/a&gt;创建了一个对象&lt;/h1&gt;&lt;p&gt;tom = Cat(“汤姆”, 30)&lt;br&gt;print(tom)  # 名字是:汤姆 , 年龄是:30&lt;br&gt;print(str(tom)) # 名字是:汤姆 , 年龄是:30&lt;br&gt;print(repr(tom))  # Cat:(汤姆,30)&lt;br&gt;tom.eat()  # 汤姆在吃鱼….&lt;br&gt;tom.introduce()  # 名字是:汤姆, 年龄是:30&lt;br&gt;名字是:汤姆 , 年龄是:30&lt;br&gt;名字是:汤姆 , 年龄是:30&lt;br&gt;Cat:(汤姆,30)&lt;br&gt;汤姆在吃鱼….&lt;br&gt;名字是:汤姆, 年龄是:30&lt;br&gt;&lt;strong&gt;str&lt;/strong&gt;(self) 的返回结果可读性强。也就是说，&lt;strong&gt;str&lt;/strong&gt; 的意义是得到便于人们阅读的信息，就像下面的 ‘2019-10-11’ 一样。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;repr&lt;/strong&gt;(self) 的返回结果应更准确。怎么说，&lt;strong&gt;repr&lt;/strong&gt; 存在的目的在于调试，便于开发者使用。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;import datetime
​
today = datetime.date.today()
print(str(today))  # 2019-10-11
print(repr(today))  # datetime.date(2019, 10, 11)
print(&amp;#39;%s&amp;#39; %today)  # 2019-10-11
print(&amp;#39;%r&amp;#39; %today)  # datetime.date(2019, 10, 11)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2020-08-01&lt;br&gt;datetime.date(2020, 8, 1)&lt;br&gt;2020-08-01&lt;br&gt;datetime.date(2020, 8, 1)&lt;br&gt;算术运算符&lt;br&gt;类型工厂函数，指的是“不通过类而是通过函数来创建对象”。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class C:
    pass
​
​
print(type(len))  # &amp;lt;class &amp;#39;builtin_function_or_method&amp;#39;&amp;gt;
print(type(dir))  # &amp;lt;class &amp;#39;builtin_function_or_method&amp;#39;&amp;gt;
print(type(int))  # &amp;lt;class &amp;#39;type&amp;#39;&amp;gt;
print(type(list))  # &amp;lt;class &amp;#39;type&amp;#39;&amp;gt;
print(type(tuple))  # &amp;lt;class &amp;#39;type&amp;#39;&amp;gt;
print(type(C))  # &amp;lt;class &amp;#39;type&amp;#39;&amp;gt;
print(int(&amp;#39;123&amp;#39;))  # 123
​
# 这个例子中list工厂函数把一个元祖对象加工成了一个列表对象。
print(list((1, 2, 3)))  # [1, 2, 3]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;class ‘builtin_function_or_method’&amp;gt;&lt;br&gt;&amp;lt;class ‘builtin_function_or_method’&amp;gt;&lt;br&gt;&amp;lt;class ‘type’&amp;gt;&lt;br&gt;&amp;lt;class ‘type’&amp;gt;&lt;br&gt;&amp;lt;class ‘type’&amp;gt;&lt;br&gt;&amp;lt;class ‘type’&amp;gt;&lt;br&gt;123&lt;br&gt;[1, 2, 3]&lt;br&gt;&lt;strong&gt;add&lt;/strong&gt;(self, other)定义加法的行为：+&lt;br&gt;&lt;strong&gt;sub&lt;/strong&gt;(self, other)定义减法的行为：-&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class MyClass:
​
    def __init__(self, height, weight):
        self.height = height
        self.weight = weight
​
    # 两个对象的长相加，宽不变.返回一个新的类
    def __add__(self, others):
        return MyClass(self.height + others.height, self.weight + others.weight)
​
    # 两个对象的宽相减，长不变.返回一个新的类
    def __sub__(self, others):
        return MyClass(self.height - others.height, self.weight - others.weight)
​
    # 说一下自己的参数
    def intro(self):
        print(&amp;quot;高为&amp;quot;, self.height, &amp;quot; 重为&amp;quot;, self.weight)
​
​
def main():
    a = MyClass(height=10, weight=5)
    a.intro()
​
    b = MyClass(height=20, weight=10)
    b.intro()
​
    c = b - a
    c.intro()
​
    d = a + b
    d.intro()
​
​
if __name__ == &amp;#39;__main__&amp;#39;:
    main()
​
# 高为 10  重为 5
# 高为 20  重为 10
# 高为 10  重为 5
# 高为 30  重为 15&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;高为 10  重为 5&lt;br&gt;高为 20  重为 10&lt;br&gt;高为 10  重为 5&lt;br&gt;高为 30  重为 15&lt;br&gt;&lt;strong&gt;mul&lt;/strong&gt;(self, other)定义乘法的行为：*&lt;br&gt;&lt;strong&gt;truediv&lt;/strong&gt;(self, other)定义真除法的行为：/&lt;br&gt;&lt;strong&gt;floordiv&lt;/strong&gt;(self, other)定义整数除法的行为：//&lt;br&gt;&lt;strong&gt;mod&lt;/strong&gt;(self, other) 定义取模算法的行为：%&lt;br&gt;&lt;strong&gt;divmod&lt;/strong&gt;(self, other)定义当被 divmod() 调用时的行为&lt;br&gt;divmod(a, b)把除数和余数运算结果结合起来，返回一个包含商和余数的元组(a // b, a % b)。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;print(divmod(7, 2))  # (3, 1)
print(divmod(8, 2))  # (4, 0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(3, 1)&lt;br&gt;(4, 0)&lt;br&gt;&lt;strong&gt;pow&lt;/strong&gt;(self, other[, module])定义当被 power() 调用或 ** 运算时的行为&lt;br&gt;&lt;strong&gt;lshift&lt;/strong&gt;(self, other)定义按位左移位的行为：&amp;lt;&amp;lt;&lt;br&gt;__rshift__(self, other)定义按位右移位的行为：&amp;gt;&amp;gt;&lt;br&gt;&lt;strong&gt;and&lt;/strong&gt;(self, other)定义按位与操作的行为：&amp;amp;&lt;br&gt;&lt;strong&gt;xor&lt;/strong&gt;(self, other)定义按位异或操作的行为：^&lt;br&gt;&lt;strong&gt;or&lt;/strong&gt;(self, other)定义按位或操作的行为：|&lt;br&gt;反算术运算符&lt;br&gt;反运算魔方方法，与算术运算符保持一一对应，不同之处就是反运算的魔法方法多了一个“r”。当文件左操作不支持相应的操作时被调用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;radd&lt;/strong&gt;(self, other)定义加法的行为：+&lt;br&gt;&lt;strong&gt;rsub&lt;/strong&gt;(self, other)定义减法的行为：-&lt;br&gt;&lt;strong&gt;rmul&lt;/strong&gt;(self, other)定义乘法的行为：*&lt;br&gt;&lt;strong&gt;rtruediv&lt;/strong&gt;(self, other)定义真除法的行为：/&lt;br&gt;&lt;strong&gt;rfloordiv&lt;/strong&gt;(self, other)定义整数除法的行为：//&lt;br&gt;&lt;strong&gt;rmod&lt;/strong&gt;(self, other) 定义取模算法的行为：%&lt;br&gt;&lt;strong&gt;rdivmod&lt;/strong&gt;(self, other)定义当被 divmod() 调用时的行为&lt;br&gt;&lt;strong&gt;rpow&lt;/strong&gt;(self, other[, module])定义当被 power() 调用或 ** 运算时的行为&lt;br&gt;&lt;strong&gt;rlshift&lt;/strong&gt;(self, other)定义按位左移位的行为：&amp;lt;&amp;lt;&lt;br&gt;__rrshift__(self, other)定义按位右移位的行为：&amp;gt;&amp;gt;&lt;br&gt;&lt;strong&gt;rand&lt;/strong&gt;(self, other)定义按位与操作的行为：&amp;amp;&lt;br&gt;&lt;strong&gt;rxor&lt;/strong&gt;(self, other)定义按位异或操作的行为：^&lt;br&gt;&lt;strong&gt;ror&lt;/strong&gt;(self, other)定义按位或操作的行为：|&lt;br&gt;a + b&lt;/p&gt;
&lt;p&gt;这里加数是a，被加数是b，因此是a主动，反运算就是如果a对象的&lt;strong&gt;add&lt;/strong&gt;()方法没有实现或者不支持相应的操作，那么 Python 就会调用b的&lt;strong&gt;radd&lt;/strong&gt;()方法。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class Nint(int):
    def __radd__(self, other):
        return int.__sub__(other, self) # 注意 self 在后面
​
​
a = Nint(5)
b = Nint(3)
print(a + b)  # 8
print(1 + b)  # -2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;8&lt;br&gt;-2&lt;br&gt;增量赋值运算符&lt;br&gt;&lt;strong&gt;iadd&lt;/strong&gt;(self, other)定义赋值加法的行为：+=&lt;br&gt;&lt;strong&gt;isub&lt;/strong&gt;(self, other)定义赋值减法的行为：-=&lt;br&gt;&lt;strong&gt;imul&lt;/strong&gt;(self, other)定义赋值乘法的行为：*=&lt;br&gt;&lt;strong&gt;itruediv&lt;/strong&gt;(self, other)定义赋值真除法的行为：/=&lt;br&gt;&lt;strong&gt;ifloordiv&lt;/strong&gt;(self, other)定义赋值整数除法的行为：//=&lt;br&gt;&lt;strong&gt;imod&lt;/strong&gt;(self, other)定义赋值取模算法的行为：%=&lt;br&gt;&lt;strong&gt;ipow&lt;/strong&gt;(self, other[, modulo])定义赋值幂运算的行为：**=&lt;br&gt;&lt;strong&gt;ilshift&lt;/strong&gt;(self, other)定义赋值按位左移位的行为：&amp;lt;&amp;lt;=&lt;br&gt;__irshift__(self, other)定义赋值按位右移位的行为：&amp;gt;&amp;gt;=&lt;br&gt;&lt;strong&gt;iand&lt;/strong&gt;(self, other)定义赋值按位与操作的行为：&amp;amp;=&lt;br&gt;&lt;strong&gt;ixor&lt;/strong&gt;(self, other)定义赋值按位异或操作的行为：^=&lt;br&gt;&lt;strong&gt;ior&lt;/strong&gt;(self, other)定义赋值按位或操作的行为：|=&lt;br&gt;一元运算符&lt;br&gt;&lt;strong&gt;neg&lt;/strong&gt;(self)定义正号的行为：+x&lt;br&gt;&lt;strong&gt;pos&lt;/strong&gt;(self)定义负号的行为：-x&lt;br&gt;&lt;strong&gt;abs&lt;/strong&gt;(self)定义当被abs()调用时的行为&lt;br&gt;&lt;strong&gt;invert&lt;/strong&gt;(self)定义按位求反的行为：~x&lt;br&gt;属性访问&lt;br&gt;&lt;strong&gt;getattr&lt;/strong&gt;(self, name): 定义当用户试图获取一个不存在的属性时的行为。&lt;br&gt;&lt;strong&gt;getattribute&lt;/strong&gt;(self, name)：定义当该类的属性被访问时的行为（先调用该方法，查看是否存在该属性，若不存在，接着去调用&lt;strong&gt;getattr__）。&lt;br&gt;__setattr&lt;/strong&gt;(self, name, value)：定义当一个属性被设置时的行为。&lt;br&gt;&lt;strong&gt;delattr&lt;/strong&gt;(self, name)：定义当一个属性被删除时的行为。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class C:
    def __getattribute__(self, item):
        print(&amp;#39;__getattribute__&amp;#39;)
        return super().__getattribute__(item)
​
    def __getattr__(self, item):
        print(&amp;#39;__getattr__&amp;#39;)
​
    def __setattr__(self, key, value):
        print(&amp;#39;__setattr__&amp;#39;)
        super().__setattr__(key, value)
​
    def __delattr__(self, item):
        print(&amp;#39;__delattr__&amp;#39;)
        super().__delattr__(item)
​
​
c = C()
c.x
# __getattribute__
# __getattr__
​
c.x = 1
# __setattr__
​
del c.x
# __delattr__&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;getattribute&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;getattr&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;setattr&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;delattr&lt;/strong&gt;&lt;br&gt;描述符&lt;br&gt;描述符就是将某种特殊类型的类的实例指派给另一个类的属性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;get&lt;/strong&gt;(self, instance, owner)用于访问属性，它返回属性的值。&lt;br&gt;&lt;strong&gt;set&lt;/strong&gt;(self, instance, value)将在属性分配操作中调用，不返回任何内容。&lt;br&gt;&lt;strong&gt;del&lt;/strong&gt;(self, instance)控制删除操作，不返回任何内容。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class MyDecriptor:
    def __get__(self, instance, owner):
        print(&amp;#39;__get__&amp;#39;, self, instance, owner)
​
    def __set__(self, instance, value):
        print(&amp;#39;__set__&amp;#39;, self, instance, value)
​
    def __delete__(self, instance):
        print(&amp;#39;__delete__&amp;#39;, self, instance)
​
​
class Test:
    x = MyDecriptor()
​
​
t = Test()
t.x
# __get__ &amp;lt;__main__.MyDecriptor object at 0x000000CEAAEB6B00&amp;gt; &amp;lt;__main__.Test object at 0x000000CEABDC0898&amp;gt; &amp;lt;class &amp;#39;__main__.Test&amp;#39;&amp;gt;
​
t.x = &amp;#39;x-man&amp;#39;
# __set__ &amp;lt;__main__.MyDecriptor object at 0x00000023687C6B00&amp;gt; &amp;lt;__main__.Test object at 0x00000023696B0940&amp;gt; x-man
​
del t.x
# __delete__ &amp;lt;__main__.MyDecriptor object at 0x000000EC9B160A90&amp;gt; &amp;lt;__main__.Test object at 0x000000EC9B160B38&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;get&lt;/strong&gt; &amp;lt;__main__.MyDecriptor object at 0x0000022008242668&amp;gt; &amp;lt;__main__.Test object at 0x00000220082427B8&amp;gt; &amp;lt;class ‘__main__.Test’&amp;gt;&lt;br&gt;&lt;strong&gt;set&lt;/strong&gt; &amp;lt;__main__.MyDecriptor object at 0x0000022008242668&amp;gt; &amp;lt;__main__.Test object at 0x00000220082427B8&amp;gt; x-man&lt;br&gt;&lt;strong&gt;delete&lt;/strong&gt; &amp;lt;__main__.MyDecriptor object at 0x0000022008242668&amp;gt; &amp;lt;__main__.Test object at 0x00000220082427B8&amp;gt;&lt;br&gt;定制序列&lt;br&gt;协议（Protocols）与其它编程语言中的接口很相似，它规定你哪些方法必须要定义。然而，在 Python 中的协议就显得不那么正式。事实上，在 Python 中，协议更像是一种指南。&lt;/p&gt;
&lt;p&gt;容器类型的协议&lt;/p&gt;
&lt;p&gt;如果说你希望定制的容器是不可变的话，你只需要定义&lt;strong&gt;len&lt;/strong&gt;()和&lt;strong&gt;getitem&lt;/strong&gt;()方法。&lt;br&gt;如果你希望定制的容器是可变的话，除了&lt;strong&gt;len&lt;/strong&gt;()和&lt;strong&gt;getitem&lt;/strong&gt;()方法，你还需要定义&lt;strong&gt;setitem&lt;/strong&gt;()和&lt;strong&gt;delitem&lt;/strong&gt;()两个方法。&lt;br&gt;【例子】编写一个不可改变的自定义列表，要求记录列表中每个元素被访问的次数。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class CountList:
    def __init__(self, *args):
        self.values = [x for x in args]
        self.count = &amp;#123;&amp;#125;.fromkeys(range(len(self.values)), 0)
​
    def __len__(self):
        return len(self.values)
​
    def __getitem__(self, item):
        self.count[item] += 1
        return self.values[item]
​
​
c1 = CountList(1, 3, 5, 7, 9)
c2 = CountList(2, 4, 6, 8, 10)
print(c1[1])  # 3
print(c2[2])  # 6
print(c1[1] + c2[1])  # 7
​
print(c1.count)
# &amp;#123;0: 0, 1: 2, 2: 0, 3: 0, 4: 0&amp;#125;
​
print(c2.count)
# &amp;#123;0: 0, 1: 1, 2: 1, 3: 0, 4: 0&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3&lt;br&gt;6&lt;br&gt;7&lt;br&gt;{0: 0, 1: 2, 2: 0, 3: 0, 4: 0}&lt;br&gt;{0: 0, 1: 1, 2: 1, 3: 0, 4: 0}&lt;br&gt;&lt;strong&gt;len&lt;/strong&gt;(self)定义当被len()调用时的行为（返回容器中元素的个数）。&lt;br&gt;&lt;strong&gt;getitem&lt;/strong&gt;(self, key)定义获取容器中元素的行为，相当于self[key]。&lt;br&gt;&lt;strong&gt;setitem&lt;/strong&gt;(self, key, value)定义设置容器中指定元素的行为，相当于self[key] = value。&lt;br&gt;&lt;strong&gt;delitem&lt;/strong&gt;(self, key)定义删除容器中指定元素的行为，相当于del self[key]。&lt;br&gt;【例子】编写一个可改变的自定义列表，要求记录列表中每个元素被访问的次数。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class CountList:
    def __init__(self, *args):
        self.values = [x for x in args]
        self.count = &amp;#123;&amp;#125;.fromkeys(range(len(self.values)), 0)
​
    def __len__(self):
        return len(self.values)
​
    def __getitem__(self, item):
        self.count[item] += 1
        return self.values[item]
​
    def __setitem__(self, key, value):
        self.values[key] = value
​
    def __delitem__(self, key):
        del self.values[key]
        for i in range(0, len(self.values)):
            if i &amp;gt;= key:
                self.count[i] = self.count[i + 1]
        self.count.pop(len(self.values))
​
​
c1 = CountList(1, 3, 5, 7, 9)
c2 = CountList(2, 4, 6, 8, 10)
print(c1[1])  # 3
print(c2[2])  # 6
c2[2] = 12
print(c1[1] + c2[2])  # 15
print(c1.count)
# &amp;#123;0: 0, 1: 2, 2: 0, 3: 0, 4: 0&amp;#125;
print(c2.count)
# &amp;#123;0: 0, 1: 0, 2: 2, 3: 0, 4: 0&amp;#125;
del c1[1]
print(c1.count)
# &amp;#123;0: 0, 1: 0, 2: 0, 3: 0&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3&lt;br&gt;6&lt;br&gt;15&lt;br&gt;{0: 0, 1: 2, 2: 0, 3: 0, 4: 0}&lt;br&gt;{0: 0, 1: 0, 2: 2, 3: 0, 4: 0}&lt;br&gt;{0: 0, 1: 0, 2: 0, 3: 0}&lt;br&gt;迭代器&lt;br&gt;迭代是 Python 最强大的功能之一，是访问集合元素的一种方式。&lt;br&gt;迭代器是一个可以记住遍历的位置的对象。&lt;br&gt;迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。&lt;br&gt;迭代器只能往前不会后退。&lt;br&gt;字符串，列表或元组对象都可用于创建迭代器：&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;string = &amp;#39;lsgogroup&amp;#39;
for c in string:
    print(c)
​
&amp;#39;&amp;#39;&amp;#39;
l
s
g
o
g
r
o
u
p
&amp;#39;&amp;#39;&amp;#39;
​
for c in iter(string):
    print(c)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;l&lt;br&gt;s&lt;br&gt;g&lt;br&gt;o&lt;br&gt;g&lt;br&gt;r&lt;br&gt;o&lt;br&gt;u&lt;br&gt;p&lt;br&gt;l&lt;br&gt;s&lt;br&gt;g&lt;br&gt;o&lt;br&gt;g&lt;br&gt;r&lt;br&gt;o&lt;br&gt;u&lt;br&gt;p&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;links = &amp;#123;&amp;#39;B&amp;#39;: &amp;#39;百度&amp;#39;, &amp;#39;A&amp;#39;: &amp;#39;阿里&amp;#39;, &amp;#39;T&amp;#39;: &amp;#39;腾讯&amp;#39;&amp;#125;
for each in links:
    print(&amp;#39;%s -&amp;gt; %s&amp;#39; % (each, links[each]))

&amp;#39;&amp;#39;&amp;#39;
B -&amp;gt; 百度
A -&amp;gt; 阿里
T -&amp;gt; 腾讯
&amp;#39;&amp;#39;&amp;#39;
​
for each in iter(links):
    print(&amp;#39;%s -&amp;gt; %s&amp;#39; % (each, links[each]))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;B -&amp;gt; 百度&lt;br&gt;A -&amp;gt; 阿里&lt;br&gt;T -&amp;gt; 腾讯&lt;br&gt;B -&amp;gt; 百度&lt;br&gt;A -&amp;gt; 阿里&lt;br&gt;T -&amp;gt; 腾讯&lt;br&gt;迭代器有两个基本的方法：iter() 和 next()。&lt;br&gt;iter(object) 函数用来生成迭代器。&lt;br&gt;next(iterator[, default]) 返回迭代器的下一个项目。&lt;br&gt;iterator – 可迭代对象&lt;br&gt;default – 可选，用于设置在没有下一个元素时返回该默认值，如果不设置，又没有下一个元素则会触发 StopIteration 异常。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;links = &amp;#123;&amp;#39;B&amp;#39;: &amp;#39;百度&amp;#39;, &amp;#39;A&amp;#39;: &amp;#39;阿里&amp;#39;, &amp;#39;T&amp;#39;: &amp;#39;腾讯&amp;#39;&amp;#125;
​
it = iter(links)
while True:
    try:
        each = next(it)
    except StopIteration:
        break
    print(each)
​
# B
# A
# T
​
it = iter(links)
print(next(it))  # B
print(next(it))  # A
print(next(it))  # T
print(next(it))  # StopIteration&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;B&lt;br&gt;A&lt;br&gt;T&lt;br&gt;B&lt;br&gt;A&lt;br&gt;T&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;StopIteration                             Traceback (most recent call last)&lt;br&gt;&lt;ipython-input-2-682f811edce7&gt; in &lt;module&gt;()&lt;br&gt;     17 print(next(it))  # A&lt;br&gt;     18 print(next(it))  # T&lt;br&gt;—&amp;gt; 19 print(next(it))  # StopIteration&lt;/p&gt;
&lt;p&gt;StopIteration:&lt;br&gt;把一个类作为一个迭代器使用需要在类中实现两个魔法方法 &lt;strong&gt;iter&lt;/strong&gt;() 与 &lt;strong&gt;next&lt;/strong&gt;() 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;iter&lt;/strong&gt;(self)定义当迭代容器中的元素的行为，返回一个特殊的迭代器对象， 这个迭代器对象实现了 &lt;strong&gt;next&lt;/strong&gt;() 方法并通过 StopIteration 异常标识迭代的完成。&lt;br&gt;&lt;strong&gt;next&lt;/strong&gt;() 返回下一个迭代器对象。&lt;br&gt;StopIteration 异常用于标识迭代的完成，防止出现无限循环的情况，在 &lt;strong&gt;next&lt;/strong&gt;() 方法中我们可以设置在完成指定循环次数后触发 StopIteration 异常来结束迭代。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;class Fibs:
    def __init__(self, n=10):
        self.a = 0
        self.b = 1
        self.n = n
​
    def __iter__(self):
        return self
​
    def __next__(self):
        self.a, self.b = self.b, self.a + self.b
        if self.a &amp;gt; self.n:
            raise StopIteration
        return self.a
​
​
fibs = Fibs(100)
for each in fibs:
    print(each, end=&amp;#39; &amp;#39;)
​
# 1 1 2 3 5 8 13 21 34 55 89&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1 1 2 3 5 8 13 21 34 55 89&lt;br&gt;4.10 生成器&lt;/p&gt;
&lt;p&gt;在 Python 中，使用了 yield 的函数被称为生成器（generator）。&lt;br&gt;跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。&lt;br&gt;在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值, 并在下一次执行 next() 方法时从当前位置继续运行。&lt;br&gt;调用一个生成器函数，返回的是一个迭代器对象。&lt;br&gt;【例子】&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;def myGen():
    print(&amp;#39;生成器执行！&amp;#39;)
    yield 1
    yield 2

myG = myGen()
for each in myG:
    print(each)
​
&amp;#39;&amp;#39;&amp;#39;
生成器执行！
1
2
&amp;#39;&amp;#39;&amp;#39;
​
myG = myGen()
print(next(myG))  
# 生成器执行！
# 1
​
print(next(myG))  # 2
print(next(myG))  # StopIteration&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;生成器执行！&lt;br&gt;1&lt;br&gt;2&lt;br&gt;生成器执行！&lt;br&gt;1&lt;br&gt;2&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;StopIteration                             Traceback (most recent call last)&lt;br&gt;&lt;ipython-input-6-56bfa60ce8de&gt; in &lt;module&gt;()&lt;br&gt;     14&lt;br&gt;     15 print(next(myG))  # 2&lt;br&gt;—&amp;gt; 16 print(next(myG))  # StopIteration&lt;/p&gt;
&lt;p&gt;StopIteration:&lt;br&gt;【例子】用生成器实现斐波那契数列。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;def libs(n):
    a = 0
    b = 1
    while True:
        a, b = b, a + b
        if a &amp;gt; n:
            return
        yield a
​
​
for each in libs(100):
    print(each, end=&amp;#39; &amp;#39;)
​
# 1 1 2 3 5 8 13 21 34 55 89&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1 1 2 3 5 8 13 21 34 55 89&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://47.97.229.110/2021/01/26/2020-1-26/</guid>
            <title>2020-1-26</title>
            <link>http://47.97.229.110/2021/01/26/2020-1-26/</link>
            <category term="日志" scheme="http://47.97.229.110/categories/%E6%97%A5%E5%BF%97/" />
            <pubDate>Tue, 26 Jan 2021 10:55:39 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;2020-1-26&lt;br&gt;开发出了Hexo站点&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://47.97.229.110/2021/01/26/%E7%89%B9%E6%AE%8A%E5%8A%9F%E8%83%BD/</guid>
            <title>特殊功能</title>
            <link>http://47.97.229.110/2021/01/26/%E7%89%B9%E6%AE%8A%E5%8A%9F%E8%83%BD/</link>
            <category term="Hexo" scheme="http://47.97.229.110/categories/Hexo/" />
            <pubDate>Tue, 26 Jan 2021 09:27:48 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;links 链接块&lt;br&gt;本功能参考 NexT，基于 Hexo Tag 功能，用来建立友链或其他网址链接功能。&lt;/p&gt;
&lt;p&gt;文章中的使用格式：&lt;/p&gt;
&lt;p&gt;使用 links 标签块，包围 yml 语法书写的内容，字段包括&lt;br&gt;site    站点名称    必填&lt;br&gt;owner    管理员名字    可选，默认为 site 的值&lt;br&gt;url        站点链接    必填&lt;br&gt;desc    站点描述    可选，默认为 url 的值&lt;br&gt;image    站点图片    可选，默认为 images/404.png&lt;br&gt;color    方块颜色    可选，默认为 #666&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;&amp;#123;% links %&amp;#125;
- site: #站点名称
  owner: #管理员名字
  url: #站点网址
  desc: #简短描述
  image: #一张图片
  color: #颜色代码
&amp;#123;% endlinks %&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;举个栗子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;&amp;#123;% links %&amp;#125;
- site: 優萌初華
  owner: 霜月琉璃
  url: https://shoka.lostyu.me
  desc: 琉璃的医学 &amp; 编程笔记
  image: https://cdn.jsdelivr.net/gh/amehime/shoka@latest/images/avatar.jpg
  color: &#34;#e9546b&#34;

- site: 優萌初華
  owner: 霜月琉璃
  url: https://shoka.lostyu.me
  image: images/avatar.jpg

- site: 優萌初華
  url: https://shoka.lostyu.me
  desc: 琉璃的医学 &amp; 编程笔记
  color: &#34;#9d5b8b&#34;
&amp;#123;% endlinks %&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;霜月琉璃&#34; style=&#34;--block-color:#e9546b;&#34;&gt;&lt;span class=&#34;exturl image&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=&#34; data-background-image=&#34;https://cdn.jsdelivr.net/gh/amehime/shoka@latest/images/avatar.jpg&#34;&gt;&lt;/span&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;span class=&#34;exturl title&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=&#34;&gt;優萌初華&lt;/span&gt;
          &lt;p class=&#34;desc&#34;&gt;琉璃的医学 &amp; 编程笔记&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;item&#34; title=&#34;霜月琉璃&#34;&gt;&lt;span class=&#34;exturl image&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=&#34; data-background-image=&#34;/images/avatar.jpg&#34;&gt;&lt;/span&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;span class=&#34;exturl title&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=&#34;&gt;優萌初華&lt;/span&gt;
          &lt;p class=&#34;desc&#34;&gt;https://shoka.lostyu.me&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;item&#34; title=&#34;優萌初華&#34; style=&#34;--block-color:#9d5b8b;&#34;&gt;&lt;span class=&#34;exturl image&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=&#34; data-background-image=&#34;/images/404.png&#34;&gt;&lt;/span&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;span class=&#34;exturl title&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=&#34;&gt;優萌初華&lt;/span&gt;
          &lt;p class=&#34;desc&#34;&gt;琉璃的医学 &amp; 编程笔记&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以上标签块里的内容，还可以保存到一个 yml 文件中，然后使用 linksfile 标签。&lt;br&gt;其中， path 位于 &lt;root&gt;/source 目录下。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;&amp;#123;% linksfile [path] %&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;举个栗子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;&amp;#123;% linksfile friends/_data.yml %&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;code 代码块&lt;/p&gt;
&lt;p&gt;使用 markdown-it-prism 进行代码高亮，支持显示行号、行高亮 mark 、命令行提示符 command 、代码块标题。&lt;/p&gt;
&lt;p&gt;基本格式： [language] [title] [url] [link text] [mark] [command]&lt;/p&gt;
&lt;p&gt;选项    描述    默认值&lt;br&gt;language&lt;/p&gt;
&lt;p&gt;支持的语言戳此&lt;br&gt;如果不需要代码高亮，但希望显示代码块样式，则设为 raw&lt;br&gt;留空或设为 info ，将不显示代码高亮和代码块样式&lt;br&gt;null&lt;/p&gt;
&lt;p&gt;title    代码块的标题文字    null&lt;br&gt;url    代码块标题右侧显示的链接    null&lt;br&gt;link text    上述链接显示的标题    link&lt;br&gt;mark&lt;/p&gt;
&lt;p&gt;行高亮显示，格式为 mark:行号,行号开始-行号结束,其他行号 。&lt;br&gt;例如 mark:1,4-7,10 ，将高亮显示第 1、4、5、6、7、10 行&lt;/p&gt;
&lt;p&gt;null&lt;/p&gt;
&lt;p&gt;command&lt;/p&gt;
&lt;p&gt;命令行提示符，格式为 command:(“提示内容”:行号,行号||”提示内容”:行号开始-行号结束)&lt;br&gt;例如 command:(“[root@localhost] $”:1,9-10||”[admin@remotehost] #”:4-6)&lt;/p&gt;
&lt;p&gt;null&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;```java 行高亮 https://shoka.lostyu.me 参考链接 mark:1,6-7
import java.util.Scanner;
...
Scanner in = new Scanner (System.in);
// 输入 Scan 之后，按下键盘 Alt + “/” 键，Eclipse 下自动补全。

System.out.println (in.nextLine ());
System.out.println (&amp;quot;Hello&amp;quot; + &amp;quot;world.&amp;quot;);&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;pwd
/usr/home/chris/bin
ls -la
total 2
drwxr-xr-x   2 chris  chris     11 Jan 10 16:48 .
drwxr--r-x  45 chris  chris     92 Feb 14 11:10 ..
-rwxr-xr-x   1 chris  chris    444 Aug 25  2013 backup
-rwxr-xr-x   1 chris  chris    642 Jan 17 14:42 deploy
git add -A
git commit -m &amp;quot;update&amp;quot;
git push&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;import java.util.Scanner;
...
Scanner in = new Scanner(System.in);
// 输入 Scan 之后，按下键盘 Alt + “/” 键，Eclipse 下自动补全。

System.out.println(in.nextLine());
System.out.println(&amp;quot;Hello&amp;quot; + &amp;quot; world.&amp;quot;);&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;pwd
/usr/home/chris/bin
ls -la
total 2
drwxr-xr-x   2 chris  chris     11 Jan 10 16:48 .
drwxr--r-x  45 chris  chris     92 Feb 14 11:10 ..
-rwxr-xr-x   1 chris  chris    444 Aug 25  2013 backup
-rwxr-xr-x   1 chris  chris    642 Jan 17 14:42 deploy
git add -A
git commit -m &amp;quot;update&amp;quot;
git push&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;quiz 练习题与答案&lt;br&gt;这个功能是用来显示练习题的。&lt;br&gt;需要在 Front Matter 中添加 quiz: true ，以正确显示题型标签。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;---
title: 练习题与答案
quiz: true
---

1. 编译时多态主要指运算符重载与函数重载，而运行时多态主要指虚函数。 &amp;#123;.quiz .true&amp;#125;

2. 有基类 `SHAPE`，派生类 `CIRCLE`，声明如下变量：  &amp;#123;.quiz .multi&amp;#125;
    ```cpp
    SHAPE shape1,*p1;
    CIRCLE circle1,*q1;
    ```
    下列哪些项是 “派生类对象替换基类对象”。
    - `p1=&amp;amp;circle1;` &amp;#123;.correct&amp;#125;
    - `q1=&amp;amp;shape1;`
    - `shape1=circle1;` &amp;#123;.correct&amp;#125;
    - `circle1=shape1;`
&amp;#123;.options&amp;#125;
    &amp;gt; - :heavy_check_mark: 令基类对象的指针指向派生类对象
    &amp;gt; - :x: 派生类指针指向基类的引用
    &amp;gt; - :heavy_check_mark: 派生类对象给基类对象赋值
    &amp;gt; - :x: 基类对象给派生类对象赋值
    &amp;gt; &amp;#123;.options&amp;#125;

3. 下列叙述正确的是 []&amp;#123;.gap&amp;#125; 。 &amp;#123;.quiz&amp;#125;
    - 虚函数只能定义成无参函数
    - 虚函数不能有返回值
    - 能定义虚构造函数
    - A、B、C 都不对 &amp;#123;.correct&amp;#125;
&amp;#123;.options&amp;#125;

10. 如果定义 `int e=8; double f=6.4, g=8.9;`，则表达式 `f+int (e/3*int (f+g)/2)%4` 的值为 [9.4]&amp;#123;.gap&amp;#125;。 &amp;#123;.quiz .fill&amp;#125;
    &amp;gt; 注意运算顺序和数据类型
    &amp;gt; [8.4]&amp;#123;.mistake&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;title: 练习题与答案&lt;br&gt;quiz: true&lt;/p&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;编译时多态主要指运算符重载与函数重载，而运行时多态主要指虚函数。 {.quiz .true}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有基类 &lt;code&gt;SHAPE&lt;/code&gt;，派生类 &lt;code&gt;CIRCLE&lt;/code&gt;，声明如下变量：  {.quiz .multi}&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;SHAPE shape1,*p1;
CIRCLE circle1,*q1;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 下列哪些项是 “派生类对象替换基类对象”。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;p1=&amp;amp;circle1;&lt;/code&gt; {.correct}&lt;/li&gt;
&lt;li&gt;&lt;code&gt;q1=&amp;amp;shape1;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shape1=circle1;&lt;/code&gt; {.correct}&lt;/li&gt;
&lt;li&gt;&lt;code&gt;circle1=shape1;&lt;/code&gt;&lt;br&gt;{.options}&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;:heavy_check_mark: 令基类对象的指针指向派生类对象&lt;/li&gt;
&lt;li&gt;:x: 派生类指针指向基类的引用&lt;/li&gt;
&lt;li&gt;:heavy_check_mark: 派生类对象给基类对象赋值&lt;/li&gt;
&lt;li&gt;:x: 基类对象给派生类对象赋值&lt;br&gt;{.options}&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下列叙述正确的是 []{.gap} 。 {.quiz}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虚函数只能定义成无参函数&lt;/li&gt;
&lt;li&gt;虚函数不能有返回值&lt;/li&gt;
&lt;li&gt;能定义虚构造函数&lt;/li&gt;
&lt;li&gt;A、B、C 都不对 {.correct}&lt;br&gt;{.options}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果定义 &lt;code&gt;int e=8; double f=6.4, g=8.9;&lt;/code&gt;，则表达式 &lt;code&gt;f+int (e/3*int (f+g)/2)%4&lt;/code&gt; 的值为 [9.4]{.gap}。 {.quiz .fill}&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意运算顺序和数据类型&lt;br&gt;[8.4]{.mistake}&lt;br&gt;有基类 SHAPE ，派生类 CIRCLE ，声明如下变量：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;SHAPE shape1,*p1;
CIRCLE circle1,*q1;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用说明&lt;br&gt;本功能基于 markdown-it-bracketed-spans 和 markdown-it-attrs&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;
标签    含义
&amp;#123;.quiz&amp;#125;    选择题
&amp;#123;.quiz .multi&amp;#125;    多选题
&amp;#123;.quiz .true&amp;#125;    正确的判断题
&amp;#123;.quiz .false&amp;#125;    错误的判断题
&amp;#123;.quiz .fill&amp;#125;    填空题
[]&amp;#123;.gap&amp;#125;    空白下划线
[答案内容]&amp;#123;.gap&amp;#125;    答案内容带下划线
&amp;#123;.options&amp;#125;    ABCDE 选项
&amp;#123;.correct&amp;#125;    选择题的正确选项
&amp;gt;    答案解析
[8.4]&amp;#123;.mistake&amp;#125;    错题备注&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;#emoji 绘文字&lt;/p&gt;
&lt;p&gt;本功能基于 markdown-it-emoji ，所有标签参考戳此&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;:kissing_heart:
:ring:
:notes:&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;effects 文字特效&lt;br&gt;本功能基于 markdown-it-ins 、 markdown-it-bracketed-spans 和 markdown-it-attrs&lt;/p&gt;
&lt;p&gt;本主题风格颜色通用样式：default、primary、success、info、warning、danger&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;++ 下划线 ++
++ 波浪线 ++&amp;#123;.wavy&amp;#125;
++ 着重点 ++&amp;#123;.dot&amp;#125;
++ 紫色下划线 ++&amp;#123;.primary&amp;#125;
++ 绿色波浪线 ++&amp;#123;.wavy .success&amp;#125;
++ 黄色着重点 ++&amp;#123;.dot .warning&amp;#125;
~~ 删除线～～
~~ 红色删除线～～&amp;#123;.danger&amp;#125;
== 荧光高亮 ==
[赤橙黄绿青蓝紫]&amp;#123;.rainbow&amp;#125;
[红色]&amp;#123;.red&amp;#125;
[粉色]&amp;#123;.pink&amp;#125;
[橙色]&amp;#123;.orange&amp;#125;
[红色]&amp;#123;.yellow&amp;#125;
[绿色]&amp;#123;.green&amp;#125;
[靛青]&amp;#123;.aqua&amp;#125;
[蓝色]&amp;#123;.blue&amp;#125;
[紫色]&amp;#123;.purple&amp;#125;
[灰色]&amp;#123;.grey&amp;#125;
快捷键 [Ctrl]&amp;#123;.kbd&amp;#125; + [C]&amp;#123;.kbd .red&amp;#125;
H~2~0
29^th^&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;++ 下划线 ++&lt;br&gt;++ 波浪线 ++{.wavy}&lt;br&gt;++ 着重点 ++{.dot}&lt;br&gt;++ 紫色下划线 ++{.primary}&lt;br&gt;++ 绿色波浪线 ++{.wavy .success}&lt;br&gt;++ 黄色着重点 ++{.dot .warning}&lt;br&gt;~~ 删除线～～&lt;br&gt;~~ 红色删除线～～{.danger}&lt;br&gt;== 荧光高亮 ==&lt;br&gt;[赤橙黄绿青蓝紫]{.rainbow}&lt;br&gt;[红色]{.red}&lt;br&gt;[粉色]{.pink}&lt;br&gt;[橙色]{.orange}&lt;br&gt;[红色]{.yellow}&lt;br&gt;[绿色]{.green}&lt;br&gt;[靛青]{.aqua}&lt;br&gt;[蓝色]{.blue}&lt;br&gt;[紫色]{.purple}&lt;br&gt;[灰色]{.grey}&lt;br&gt;快捷键 [Ctrl]{.kbd} + [C]{.kbd .red}&lt;br&gt;H&lt;del&gt;2&lt;/del&gt;0&lt;br&gt;29^th^&lt;/p&gt;
&lt;p&gt;spoiler 隐藏文字&lt;br&gt;本功能基于 markdown-it-spoiler 和 markdown-it-attrs&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;!! 黑幕黑幕黑幕黑幕黑幕黑幕！！： 鼠标滑过显示内容
!! 模糊模糊模糊模糊模糊模糊！！&amp;#123;.bulr&amp;#125; ： 选中文字显示内容&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;!! 黑幕黑幕黑幕黑幕黑幕黑幕！！： 鼠标滑过显示内容&lt;br&gt;!! 模糊模糊模糊模糊模糊模糊！！{.bulr} ： 选中文字显示内容&lt;/p&gt;
&lt;p&gt;#label 标签块&lt;br&gt;本功能基于 markdown-it-bracketed-spans 和 markdown-it-attrs&lt;br&gt;有以下颜色可选&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;[default]&amp;#123;.label&amp;#125;
[primary]&amp;#123;.label .primary&amp;#125;
[info]&amp;#123;.label .info&amp;#125;
[:heavy_check_mark:success]&amp;#123;.label .success&amp;#125;
[warning]&amp;#123;.label .warning&amp;#125;
[:broken_heart:danger]&amp;#123;.label .danger&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[default]{.label}&lt;br&gt;[primary]{.label .primary}&lt;br&gt;[info]{.label .info}&lt;br&gt;[:heavy_check_mark:success]{.label .success}&lt;br&gt;[warning]{.label .warning}&lt;br&gt;[:broken_heart:danger]{.label .danger}&lt;/p&gt;
&lt;p&gt;note 提醒块&lt;br&gt;本功能基于 markdown-it-container&lt;br&gt;标签为：&lt;/p&gt;
&lt;p&gt;开始行    :::[风格颜色]&lt;br&gt;结束行&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;:::default
默认默认
:::

:::primary
基本基本
:::

:::info
提示提示
:::

:::success
成功成功
:::

:::warning
警告警告
:::

:::danger
危险危险
:::

:::danger no-icon
危险危险
:::&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:::default&lt;br&gt;默认默认&lt;br&gt;:::&lt;/p&gt;
&lt;p&gt;:::primary&lt;br&gt;基本基本&lt;br&gt;:::&lt;/p&gt;
&lt;p&gt;:::info&lt;br&gt;提示提示&lt;br&gt;:::&lt;/p&gt;
&lt;p&gt;:::success&lt;br&gt;成功成功&lt;br&gt;:::&lt;/p&gt;
&lt;p&gt;:::warning&lt;br&gt;警告警告&lt;br&gt;:::&lt;/p&gt;
&lt;p&gt;:::danger&lt;br&gt;危险危险&lt;br&gt;:::&lt;/p&gt;
&lt;p&gt;:::danger no-icon&lt;br&gt;危险危险&lt;br&gt;:::&lt;/p&gt;
&lt;p&gt;tab 标签卡&lt;br&gt;本功能基于 markdown-it-container&lt;br&gt;标签为：&lt;/p&gt;
&lt;p&gt;开始行    ;;;[同一ID] [标签名称]&lt;br&gt;结束行    ;;;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;;;;id1 卡片 1
这里是卡片 1 的内容
** 加粗 **
[success]&amp;#123;.label .success&amp;#125;

&amp;#123;% links %&amp;#125;
- site: 優萌初華
  owner: 霜月琉璃
  url: https://shoka.lostyu.me
  desc: 琉璃的医学 &amp; 编程笔记
  image: https://cdn.jsdelivr.net/gh/amehime/shoka@latest/images/avatar.jpg
  color: &#34;#e9546b&#34;
&amp;#123;% endlinks %&amp;#125;
;;;

;;;id1 卡片 2
这里是卡片 2 的内容
:::danger
危险危险
:::
- 第一行
- 第二行
;;;

;;;id2 ②号标签卡片 1
这里是卡片 1 的内容
;;;

;;;id2 ②号标签卡片 2
这里是卡片 2 的内容
;;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;;;;id1 卡片 1&lt;br&gt;这里是卡片 1 的内容&lt;br&gt;** 加粗 **&lt;br&gt;[success]{.label .success}&lt;/p&gt;
&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;霜月琉璃&#34; style=&#34;--block-color:#e9546b;&#34;&gt;&lt;span class=&#34;exturl image&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=&#34; data-background-image=&#34;https://cdn.jsdelivr.net/gh/amehime/shoka@latest/images/avatar.jpg&#34;&gt;&lt;/span&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;span class=&#34;exturl title&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=&#34;&gt;優萌初華&lt;/span&gt;
          &lt;p class=&#34;desc&#34;&gt;琉璃的医学 &amp; 编程笔记&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;;;;&lt;/p&gt;
&lt;p&gt;;;;id1 卡片 2&lt;br&gt;这里是卡片 2 的内容&lt;br&gt;:::danger&lt;br&gt;危险危险&lt;br&gt;:::&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一行&lt;/li&gt;
&lt;li&gt;第二行&lt;br&gt;;;;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;;;;id2 ②号标签卡片 1&lt;br&gt;这里是卡片 1 的内容&lt;br&gt;;;;&lt;/p&gt;
&lt;p&gt;;;;id2 ②号标签卡片 2&lt;br&gt;这里是卡片 2 的内容&lt;br&gt;;;;&lt;/p&gt;
&lt;p&gt;#collapse 折叠块&lt;br&gt;本功能基于 markdown-it-container&lt;br&gt;标签为：&lt;/p&gt;
&lt;p&gt;开始行    +++[风格颜色] [标题文字]&lt;br&gt;结束行    +++&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;+++ 默认默认 这里是一段文字
++ 下划线 ++
+++


+++primary 紫色
:::info
参考信息
:::

- 第一行
- 第二行
+++


+++info  蓝色
;;;id3 卡片 1
这里是卡片 1 的内容
;;;

;;;id3 卡片 2
这里是卡片 2 的内容
;;;
+++

+++success 绿色
&amp;#123;% links %&amp;#125;
- site: 優萌初華
  url: https://shoka.lostyu.me
  color: &#34;#e9546b&#34;
&amp;#123;% endlinks %&amp;#125;
+++

+++warning 黄色
!! 警告警告警告警告警告！！&amp;#123;.bulr&amp;#125;
[label]&amp;#123;.label .success&amp;#125;
+++

+++danger 红色
[danger]&amp;#123;.label .danger&amp;#125;
+++&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;+++ 默认默认 这里是一段文字&lt;br&gt;++ 下划线 ++&lt;br&gt;+++&lt;/p&gt;
&lt;p&gt;+++primary 紫色&lt;br&gt;:::info&lt;br&gt;参考信息&lt;br&gt;:::&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一行&lt;/li&gt;
&lt;li&gt;第二行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;+++info  蓝色&lt;br&gt;;;;id3 卡片 1&lt;br&gt;这里是卡片 1 的内容&lt;br&gt;;;;&lt;/p&gt;
&lt;p&gt;;;;id3 卡片 2&lt;br&gt;这里是卡片 2 的内容&lt;br&gt;;;;&lt;br&gt;+++&lt;/p&gt;
&lt;p&gt;+++success 绿色&lt;/p&gt;
&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;優萌初華&#34; style=&#34;--block-color:#e9546b;&#34;&gt;&lt;span class=&#34;exturl image&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=&#34; data-background-image=&#34;/images/404.png&#34;&gt;&lt;/span&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;span class=&#34;exturl title&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=&#34;&gt;優萌初華&lt;/span&gt;
          &lt;p class=&#34;desc&#34;&gt;https://shoka.lostyu.me&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;+++warning 黄色&lt;br&gt;!! 警告警告警告警告警告！！{.bulr}&lt;br&gt;[label]{.label .success}&lt;br&gt;+++&lt;/p&gt;
&lt;p&gt;+++danger 红色&lt;br&gt;[danger]{.label .danger}&lt;br&gt;+++&lt;/p&gt;
&lt;p&gt;taskList 待办事项&lt;br&gt;本功能基于 markdown-it-task-checkbox 。&lt;br&gt;可以利用 markdown-it-attrs 添加风格颜色，只可以给 ul 标签添加，需要新建两行。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;- [ ] 这是一个小叉叉
- [x] 这是一个红色勾勾

&amp;#123;.danger&amp;#125;

- [ ] 未完成
- [x] 完成

&amp;#123;.primary&amp;#125;

- [ ] 未完成
- [x] 默认颜色&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 这是一个小叉叉&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 这是一个红色勾勾&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;{.danger}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 未完成&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 完成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;{.primary}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 未完成&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 默认颜色&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;furigana 文字注音&lt;br&gt;原本用于日语汉字假名注音，但别的注音也可以。&lt;br&gt;为了兼容性，采用 markdown-it-ruby 的基本格式： {文字^注音} ，并且为了兼容表格，将分隔符由 | 换成了 ^ 。&lt;br&gt;注音分隔基于 furigana-markdown-it 显示说明看这里&lt;/p&gt;
&lt;p&gt;{取り返す^とりかえす}    取とり返かえす&lt;br&gt;{可愛い犬^か+わい・い・いぬ}    可愛かわいい犬いぬ&lt;br&gt;{可愛い犬^か・わい・いいぬ}    可か愛わいい犬いぬ&lt;br&gt;{アクセラレータ^accelerator}    アクセラレータaccelerator&lt;br&gt;{accelerator^アクセラレータ}    acceleratorアクセラレータ&lt;br&gt;{食べる^たべる}    食たべる&lt;br&gt;{食べる^=たべる}    食べるたべる&lt;br&gt;{あいうえお^*}    あ●い●う●え●お●&lt;br&gt;{あいうえお^*❤}    あ❤い❤う❤え❤お❤&lt;br&gt;{常用账号^contact}    常用账号&lt;/p&gt;
&lt;p&gt;media 多媒体&lt;br&gt;本功能基于 Hexo Tag 功能，使用 media 标签，目前可选择两种类型，即 audio 和 video 。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;&amp;#123;% media audio %&amp;#125;
... 音频列表
&amp;#123;% endmedia %&amp;#125;

&amp;#123;% media video %&amp;#125;
... 视频列表
&amp;#123;% endmedia %&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;标签包绕一段 yml 格式的内容，格式与背景音乐的配置类似。&lt;/p&gt;
&lt;p&gt;亦可以直接使用网易云、虾米、QQ 音乐的播放列表、单曲。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;&amp;#123;% media audio %&amp;#125;
- title: 列表 1
  list:
    - https://music.163.com/#/playlist?id=2943811283
    - https://music.163.com/#/playlist?id=2297706586
- title: 列表 2
  list:
    - https://music.163.com/#/playlist?id=2031842656
&amp;#123;% endmedia %&amp;#125;


&amp;#123;% media video %&amp;#125;
- name: &#34;测试 1&#34;
  url: https://cdn.kastatic.org/ka-youtube-converted/O_nY1TM2RZM.mp4/O_nY1TM2RZM.mp4#t=0
- name: &#34;测试 2&#34;
  url: https://cdn.kastatic.org/ka-youtube-converted/O_nY1TM2RZM.mp4/O_nY1TM2RZM.mp4#t=0
&amp;#123;% endmedia %&amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;math 数学公式&lt;br&gt;本功能基于 markdown-it-katex&lt;br&gt;在 Front Matter 中添加 math: true 以支持 KaTex&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;---
title: 数学公式显示
math: true
---

行内公式：$\sqrt &amp;#123;3x-1&amp;#125;+(1+x)^2$

独立块显示：
$$\begin &amp;#123;array&amp;#125;&amp;#123;c&amp;#125;

\nabla \times \vec &amp;#123;\mathbf &amp;#123;B&amp;#125;&amp;#125; -\, \frac1c\, \frac &amp;#123;\partial\vec &amp;#123;\mathbf &amp;#123;E&amp;#125;&amp;#125;&amp;#125;&amp;#123;\partial t&amp;#125; &amp;amp;
= \frac &amp;#123;4\pi&amp;#125;&amp;#123;c&amp;#125;\vec &amp;#123;\mathbf &amp;#123;j&amp;#125;&amp;#125;    \nabla \cdot \vec &amp;#123;\mathbf &amp;#123;E&amp;#125;&amp;#125; &amp;amp; = 4 \pi \rho \\

\nabla \times \vec &amp;#123;\mathbf &amp;#123;E&amp;#125;&amp;#125;\, +\, \frac1c\, \frac &amp;#123;\partial\vec &amp;#123;\mathbf &amp;#123;B&amp;#125;&amp;#125;&amp;#125;&amp;#123;\partial t&amp;#125; &amp;amp; = \vec &amp;#123;\mathbf &amp;#123;0&amp;#125;&amp;#125; \\

\nabla \cdot \vec &amp;#123;\mathbf &amp;#123;B&amp;#125;&amp;#125; &amp;amp; = 0

\end &amp;#123;array&amp;#125;$$&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;mermaid 流程图&lt;br&gt;本功能基于 markdown-it-mermaid&lt;br&gt;在 Front Matter 中添加 mermaid: true 以支持 Mermaid&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;---
title: 流程图显示
mermaid: true
---

```mermaid
graph LR
    A [Square Rect] -- Link text --&amp;gt; B ((Circle))
    A --&amp;gt; C (Round Rect)
    B --&amp;gt; D &amp;#123;Rhombus&amp;#125;
    C --&amp;gt; D&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;mermaid&#34;&gt;sequenceDiagram
    loop Daily query
        Alice-&amp;gt;&amp;gt;Bob: Hello Bob, how are you?
        alt is sick
            Bob-&amp;gt;&amp;gt;Alice: Not so good :(
        else is well
            Bob-&amp;gt;&amp;gt;Alice: Feeling fresh like a daisy
        end

        opt Extra response
            Bob-&amp;gt;&amp;gt;Alice: Thanks for asking
        end
    end&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---
title: 流程图显示
mermaid: true
---

```mermaid
graph LR
    A [Square Rect] -- Link text --&amp;gt; B ((Circle))
    A --&amp;gt; C (Round Rect)
    B --&amp;gt; D &amp;#123;Rhombus&amp;#125;
    C --&amp;gt; D&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;mermaid&#34;&gt;sequenceDiagram
    loop Daily query
        Alice-&amp;gt;&amp;gt;Bob: Hello Bob, how are you?
        alt is sick
            Bob-&amp;gt;&amp;gt;Alice: Not so good :(
        else is well
            Bob-&amp;gt;&amp;gt;Alice: Feeling fresh like a daisy
        end

        opt Extra response
            Bob-&amp;gt;&amp;gt;Alice: Thanks for asking
        end
    end&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://47.97.229.110/2021/01/25/Linux%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</guid>
            <title>Linux搭建博客</title>
            <link>http://47.97.229.110/2021/01/25/Linux%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</link>
            <category term="Hexo" scheme="http://47.97.229.110/categories/Hexo/" />
            <pubDate>Mon, 25 Jan 2021 13:58:22 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;Hexo简介&lt;br&gt;Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Gitee上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看&lt;/p&gt;
&lt;p&gt;安装Git&lt;br&gt;Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ apt-get install git -y&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装nodejs&lt;br&gt;Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具&lt;/p&gt;
&lt;p&gt;wp-block-code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ apt-get install nodejs npm -y&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装完后，输入命令&lt;/p&gt;
&lt;p&gt;wp-block-code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ node -v&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;wp-block-code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ npm -v&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;检查是否安装成功&lt;/p&gt;
&lt;p&gt;更换npm源为淘宝源&lt;/p&gt;
&lt;p&gt;wp-block-code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ npm config set registry https://registry.npm.taobao.org&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装hexo&lt;br&gt;前面git和nodejs安装好后，就可以安装hexo了，先创建一个文件夹filename，然后cd到这个文件夹下&lt;/p&gt;
&lt;p&gt;输入命令&lt;/p&gt;
&lt;p&gt;wp-block-code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ npm install -g hexo-cli&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入命令&lt;/p&gt;
&lt;p&gt;wp-block-code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ hexo -v&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看版本信息&lt;/p&gt;
&lt;p&gt;初始化hexo&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;wp-block-code
$ hexo init filename(文件名随意定义)
wp-block-code
$ cd filename //进入这个文件夹
wp-block-code
$ npm install&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ cd &amp;lt;folder&amp;gt; #说明：将操作位置转移到将要存放项目的文件夹目录（便于区分，我的项目文件夹名为hexo,~/root/hexo以下将使用这个文件夹）
$ hexo init #说明：自动在文件夹（hexo1）中创建项目所需的文件
$ npm install #说明：安装依赖包
$ hexo generate #说明：构建，会在hexo1中创建public文件夹&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行完以上命令后，会多出以下文件和文件夹&lt;br&gt;例如&lt;br&gt;新建完成后，指定文件夹目录下有：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;_config.yml：站点的配置文件，需要备份
themes：主题文件夹，需要备份
source：博客文章的 .md 文件，需要备份
scaffolds：文章的模板，需要备份
package.json：安装包的名称，需要备份
.gitignore：限定在 push 时哪些文件可以忽略，需要备份
.git：主题和站点都有，标志这是一个 git 项目，不需要备份
node_modules：是安装包的目录，在执行 npm install 的时候会重新生成，不需要备份
public：是 hexo g 生成的静态网页，不需要备份
.deploy_git：同上，hexo g 也会生成，不需要备份&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;db.json：文件，不需要备份&lt;br&gt;输入命令&lt;br&gt;wp-block-code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ hexo g&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入命令&lt;br&gt;wp-block-code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ hexo s&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;打开hexo的服务&lt;br&gt;在浏览器输入&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ http://localhost:4000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;就可以看到你生成的博客&lt;br&gt;使用ctrl+c停止服务&lt;br&gt;Hexo+Github&lt;br&gt;GitHub创建个人仓库&lt;br&gt;注册登录github官网，点击右上角加号，点击New repository，新建仓库&lt;br&gt;创建一个和用户名相同的仓库,即&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3h4eHguZ2l0aHViLmlvLOWFtuS4rXh4eOaYr2dpdGh1YueahOeUqOaIt+WQjS8=&#34;&gt;http://xxxx.github.io，其中xxx是github的用户名&lt;/span&gt;&lt;br&gt;点击create repository&lt;br&gt;Git初始化设置&lt;br&gt;输入命令&lt;br&gt;wp-block-code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ git config --global user.name &amp;quot;yourname&amp;quot; &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;wp-block-code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ git config --global user.email &amp;quot;youremail&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;yourname是github用户名，youremail是注册github的邮箱&lt;br&gt;wp-block-code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ git config user.name &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;wp-block-code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ git config user.email&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;检查是否正确，输入命令&lt;br&gt;生成SSH添加到GitHub&lt;br&gt;输入命令，创建SSH,一路回车&lt;br&gt;wp-block-code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ ssh-keygen -t rsa -C &amp;quot;youremail&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看SSH KEY，输入命令&lt;br&gt;wp-block-code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ cat ~/.ssh/id_rsa.pub&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;复制id_rsa.pub里面的全部内容&lt;br&gt;在github的setting中，找到SSH keys的设置选项，点击New SSH key，粘贴id_rsa.pub里面的全部内容&lt;br&gt;输入命令&lt;br&gt;wp-block-code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ ssh -T git@github.com&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看是否连接成功&lt;br&gt;打开站点配置文件 _config.yml，修改添加以下内容&lt;br&gt;wp-block-code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;deploy:
  type: git
  repo: git@github.com:yourgithubname/yourgithubname.github.io.git
  branch: master&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装deploy-git ，也就是部署的命令,这样才能用命令部署到github&lt;br&gt;wp-block-code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ npm install hexo-deployer-git --save&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入命令&lt;br&gt;wp-block-code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ hexo clean 第一次安装不用清缓存
$ hexo clean &amp;amp;&amp;amp;　hexo g -d 　缩写
$ hexo g = hexo generate 生成静态文件
$ hexo generate -deploy 生成静态文件后立即部署网站&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;打开下面的网址&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ http://yourname.github.io&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;就可看到和&lt;br&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xvY2FsaG9zdDo0MDAwLw==&#34;&gt;http://localhost:4000&lt;/span&gt;&lt;br&gt;一样的了！&lt;br&gt;关联Git仓库&lt;br&gt;wp-block-code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ git clone https://github.com/你的用户名/你的用户名.github.io.git&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行之后会在当前目录生成’你的用户名.github.io’的文件夹，这是关联github仓库的文件夹，需要上传的文件都会移动到这里&lt;br&gt;更多精彩内容请点击hexo官网&lt;br&gt;(附上我的博客链接)&lt;br&gt;Hexo+Gitee&lt;br&gt;Gitee创建个人仓库&lt;br&gt;打开码云官网，注册登陆，创建项目，点击右上角加号，新建仓库&lt;br&gt;开启 Gitee Pages&lt;br&gt;点击启动&lt;br&gt;启动后，点击蓝色链接打开网址&lt;br&gt;初始化Git设置&lt;br&gt;输入命令&lt;br&gt;wp-block-code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ git config --global user.name &amp;quot;这里输入你的Gitee注册名&amp;quot;// 按回车
$ git config --global user.email &amp;quot;这里输你的Gitee邮箱&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;生成SSH密钥文件&lt;br&gt;wp-block-code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ ssh-keygen -t rsa -C &amp;quot;你的Gitee注册邮箱&amp;quot;
$ // 可不输入，三个回车&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;复制粘贴到码云&lt;br&gt;配置 _config.yml&lt;br&gt;点击复制克隆/下载里面的https的内容&lt;br&gt;修改添加_config.yml以下内容&lt;br&gt;wp-block-code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;url: Gitee Pages 服务，网站地址： https://空间名.gitee.io/仓库名(粘贴)
root: /仓库名/
wp-block-code
deploy:
  type: git
  repo: https://gitee.com/空间名/仓库名(粘贴)
  branch: master&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;基础配置可以参考官方文档的配置说明&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ wp-block-code
$ hexo clean &amp;amp;&amp;amp;　hexo g -d 　缩写 清缓存
$ hexo g = hexo generate 生成静态文件
$ hexo generate -deploy 生成静态文件后立即部署网站自动上传到gitee&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;打开Gitee Pages 服务 ，每次上传或改动，都要点击“更新”打开网址访问&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
