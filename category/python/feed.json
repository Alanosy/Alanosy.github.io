{
    "version": "https://jsonfeed.org/version/1",
    "title": "Alan • All posts by \"python\" category",
    "description": "",
    "home_page_url": "https://alanosy.github.io",
    "items": [
        {
            "id": "https://alanosy.github.io/2021/01/26/computer-science/java/course-1/python-day-1/",
            "url": "https://alanosy.github.io/2021/01/26/computer-science/java/course-1/python-day-1/",
            "title": "python_day_1",
            "date_published": "2021-01-26T05:39:02.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>Python 是一种通用编程语言，其在科学计算和机器学习领域具有广泛的应用。如果我们打算利用 Python 来执行机器学习，那么对 Python 有一些基本的了解就是至关重要的。本 Python 入门系列体验就是为这样的初学者精心准备的。</p>\n<p>本实验包括以下内容：</p>\n<ul>\n<li>\n<p>变量、运算符与数据类型</p>\n<ul>\n<li>\n<p><strong>注释</strong></p>\n<p>在 python 中，# 表示注释，作用于整行</p>\n<p>例如：</p>\n<pre><code class=\"language-bashs\">print(&quot;Hello World&quot;)\n#我的第一个程序\n</code></pre>\n<p>其中” 我的第一个程序 “在代码不起运行作用</p>\n<p>另外还有多行注释用 ``` 来标注</p>\n<p>例如</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>​```</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>这是一个多引号注释</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>用于注释多行</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>···</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>print<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello china\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>运算符</strong></p>\n<p><strong>算术运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th><code>&gt;</code></th>\n<th>大于</th>\n<th><code>2 &gt; 1</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&gt;=</code></td>\n<td>大于等于</td>\n<td><code>2 &gt;= 4</code></td>\n</tr>\n<tr>\n<td><code>&lt;</code></td>\n<td>小于</td>\n<td><code>1 &lt; 2</code></td>\n</tr>\n<tr>\n<td><code>&lt;=</code></td>\n<td>小于等于</td>\n<td><code>5 &lt;= 2</code></td>\n</tr>\n<tr>\n<td><code>==</code></td>\n<td>等于</td>\n<td><code>3 == 4</code></td>\n</tr>\n<tr>\n<td><code>!=</code></td>\n<td>不等于</td>\n<td><code>3 != 5</code></td>\n</tr>\n</tbody>\n</table>\n<p>例子</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 12</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 0.75</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">//</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">%</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 3</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 8</span></pre></td></tr></table></figure><p><strong>比较运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th><code>and</code></th>\n<th>与</th>\n<th><code>(3 &gt; 2) and (3 &lt; 5)</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>or</code></td>\n<td>或</td>\n<td><code>(1 &gt; 3) or (9 &lt; 2)</code></td>\n</tr>\n<tr>\n<td><code>not</code></td>\n<td>非</td>\n<td><code>not (2 &gt; 1)</code></td>\n</tr>\n</tbody>\n</table>\n<p>例子</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">>=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">!=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr></table></figure><p><strong>逻辑运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th><code>and</code></th>\n<th>与</th>\n<th style=\"text-align:center\"><code>(3 &gt; 2) and (3 &lt; 5)</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>or</code></td>\n<td>或</td>\n<td style=\"text-align:center\"><code>(1 &gt; 3) or (9 &lt; 2)</code></td>\n</tr>\n<tr>\n<td><code>not</code></td>\n<td>非</td>\n<td style=\"text-align:center\"><code>not (2 &gt; 1)</code></td>\n</tr>\n</tbody>\n</table>\n<p>例子</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>on</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span><span class=\"token number\">9</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">not</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False</span></pre></td></tr></table></figure><p><strong>位运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th><code>~</code></th>\n<th>按位取反</th>\n<th><code>~4</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&amp;</code></td>\n<td>按位与</td>\n<td><code>4 &amp; 5</code></td>\n</tr>\n<tr>\n<td><code>   |</code></td>\n<td>按位或</td>\n</tr>\n<tr>\n<td><code>^</code></td>\n<td>按位异或</td>\n<td><code>4 ^ 5</code></td>\n</tr>\n<tr>\n<td><code>&lt;&lt;</code></td>\n<td>左移</td>\n<td><code>4 &lt;&lt; 2</code></td>\n</tr>\n<tr>\n<td><code>&gt;&gt;</code></td>\n<td>右移</td>\n<td><code>4 &gt;&gt; 2</code></td>\n</tr>\n</tbody>\n</table>\n<p>例子</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bin</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 0b100</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bin</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 0b101</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bin</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">~</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># -0b101 -5</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bin</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 0b100 4</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bin</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">|</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token operator\">|</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 0b101 5</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bin</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">^</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token operator\">^</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 0b1 1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bin</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 0b10000 16</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bin</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">>></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token operator\">>></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 0b1 1</span></pre></td></tr></table></figure><p><strong>三元运算符</strong></p>\n<p>例子</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> x <span class=\"token operator\">&lt;</span> y<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    small <span class=\"token operator\">=</span> x</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    small <span class=\"token operator\">=</span> y</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>small<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 4</span></pre></td></tr></table></figure><p><strong>其他运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th><code>in</code></th>\n<th>存在</th>\n<th><code>'A' in ['A', 'B', 'C']</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>not in</code></td>\n<td>不存在</td>\n<td><code>'h' not in ['A', 'B', 'C']</code></td>\n</tr>\n<tr>\n<td><code>is</code></td>\n<td>是</td>\n<td><code>&quot;hello&quot; is &quot;hello&quot;</code></td>\n</tr>\n<tr>\n<td><code>not is</code></td>\n<td>不是</td>\n<td><code>&quot;hello&quot; is not &quot;hello&quot;</code></td>\n</tr>\n</tbody>\n</table>\n<p>例子</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>letters <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token string\">'A'</span> <span class=\"token keyword\">in</span> letters<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span> <span class=\"token operator\">+</span> <span class=\"token string\">' exists'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token string\">'h'</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> letters<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h'</span> <span class=\"token operator\">+</span> <span class=\"token string\">' not exists'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># A exists</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># h not exists</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token keyword\">is</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True True</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">!=</span> b<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False False</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token keyword\">is</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># False True</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">!=</span> b<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True False</span></pre></td></tr></table></figure><p>注意：</p>\n<ul>\n<li>is, is not 对比的是两个变量的内存地址</li>\n<li>==, != 对比的是两个变量的值</li>\n<li>比较的两个变量，指向的都是地址不可变的类型（str 等），那么 is，is not 和 ==，！= 是完全等价的。</li>\n<li>对比的两个变量，指向的是地址可变的类型（list，dict，tuple 等），则两者是有区别的。</li>\n</ul>\n<p><strong>运算符的优先级</strong></p>\n<table>\n<thead>\n<tr>\n<th>**</th>\n<th>指数（最高优先级）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>~±</td>\n<td>按位翻转，一元加号和减号</td>\n</tr>\n<tr>\n<td>* / % //</td>\n<td>乘，除，取模和取整除）</td>\n</tr>\n<tr>\n<td>+ -</td>\n<td>加法减法</td>\n</tr>\n<tr>\n<td>&gt;&gt; &lt;&lt;</td>\n<td>右移，左移运算符</td>\n</tr>\n<tr>\n<td>&amp;</td>\n<td>位‘AND’</td>\n</tr>\n<tr>\n<td>^|</td>\n<td>位运算符</td>\n</tr>\n<tr>\n<td>&lt;=&lt;&gt;&gt;=</td>\n<td>比较运算符</td>\n</tr>\n<tr>\n<td>&lt;&gt;==!=</td>\n<td>等于运算符</td>\n</tr>\n<tr>\n<td>=%=/=//=-=+=*=**=</td>\n<td>赋值运算符</td>\n</tr>\n<tr>\n<td>is is not</td>\n<td>身份运算符</td>\n</tr>\n<tr>\n<td>in not in</td>\n<td>成员运算符</td>\n</tr>\n<tr>\n<td>not and or</td>\n<td>逻辑运算符</td>\n</tr>\n</tbody>\n</table>\n<p>例子</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">3</span> <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># -9</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">**</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 0.1111111111111111</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span> <span class=\"token operator\">/</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># -12.5</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span> <span class=\"token keyword\">and</span> <span class=\"token number\">4</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>变量和赋值</strong></p>\n</li>\n<li>\n<p>在使用变量之前，需要对其先赋值。</p>\n</li>\n<li>\n<p>变量名可以包括字母、数字、下划线、但变量名不能以数字开头。</p>\n</li>\n<li>\n<p>Python 变量名是大小写敏感的，foo != Foo。</p>\n<p>例子</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>first <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>second <span class=\"token operator\">=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>third <span class=\"token operator\">=</span> first + second</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>print<span class=\"token punctuation\">(</span>third<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 5</span></pre></td></tr></table></figure><p><strong>数据类型与转换</strong></p>\n</li>\n<li>\n<table>\n<thead>\n<tr>\n<th>int</th>\n<th>整型  <code>&lt;class 'int'&gt;</code></th>\n<th><code>-876, 10</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>float</td>\n<td>浮点型 <code>&lt;class 'float'&gt;</code></td>\n<td><code>3.149, 11.11</code></td>\n</tr>\n<tr>\n<td>bool</td>\n<td>布尔型 <code>&lt;class 'bool'&gt;</code></td>\n<td><code>True, False</code></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>i <span class=\"token operator\">=</span> input<span class=\"token punctuation\">(</span><span class=\"token string\">\"i=\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>print<span class=\"token punctuation\">(</span>i,type<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">))</span>可以查看i的类型</pre></td></tr></table></figure><ul>\n<li>获取类型信息  <code>type(object)</code></li>\n</ul>\n<p>type ()` 不会认为子类是一种父类类型，不考虑继承关系。</p>\n<p>isinstance ()` 会认为子类是一种父类类型，考虑继承关系。</p>\n<p>如果要判断两个类型是否相同推荐使用  <code>isinstance()</code> 。</p>\n<p><strong>类型转换</strong></p>\n<ul>\n<li>转换为整型  <code>int(x, base=10)</code></li>\n<li>转换为字符串  <code>str(object='')</code></li>\n<li>转换为浮点型  <code>float(x)</code></li>\n</ul>\n</li>\n<li>\n<p><strong>print () 函数</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>print<span class=\"token punctuation\">(</span>*objects, <span class=\"token assign-left variable\">sep</span><span class=\"token operator\">=</span><span class=\"token string\">' '</span>, <span class=\"token assign-left variable\">end</span><span class=\"token operator\">=</span><span class=\"token string\">'<span class=\"token entity\" title=\"\\n\">\\n</span>'</span>, <span class=\"token assign-left variable\">file</span><span class=\"token operator\">=</span>sys.stdout, <span class=\"token assign-left variable\">flush</span><span class=\"token operator\">=</span>False<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>将对象以字符串表示的方式格式化输出到流文件对象 file 里。其中所有非关键字参数都按 <code>str()</code>  方式进行转换为字符串输出；</li>\n<li>关键字参数 <code>sep</code>  是实现分隔符，比如多个参数输出时想要输出中间的分隔字符；</li>\n<li>关键字参数 <code>end</code>  是输出结束时的字符，默认是换行符 <code>\\n</code> ；</li>\n<li>关键字参数 <code>file</code>  是定义流输出的文件，可以是标准的系统输出 <code>sys.stdout</code> ，也可以重定义为别的文件；</li>\n<li>关键字参数 <code>flush</code>  是立即把内容输出到流文件，不作缓存。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>位运算</p>\n<ul>\n<li>\n<p>原码、反码和补码</p>\n</li>\n<li>\n<p>二进制有三种不同的表示形式：原码、反码和补码，计算机内部使用补码来表示。</p>\n<p><strong>原码</strong>：就是其二进制表示（注意，有一位符号位）。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">11</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">10</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">11</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">3</span></pre></td></tr></table></figure><p><strong>反码</strong>：正数的反码就是原码，负数的反码是符号位不变，其余位取反（对应正数按位取反）。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">11</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">11</span> <span class=\"token number\">11</span> <span class=\"token number\">11</span> <span class=\"token number\">00</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">3</span></pre></td></tr></table></figure><p><strong>补码</strong>：正数的补码就是原码，负数的补码是反码 + 1。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">11</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">11</span> <span class=\"token number\">11</span> <span class=\"token number\">11</span> <span class=\"token number\">01</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">3</span></pre></td></tr></table></figure></li>\n<li></li>\n<li>\n<p>按位非操作～</p>\n</li>\n<li>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">~</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">~</span> <span class=\"token number\">0</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr></table></figure></li>\n<li>\n<p>按位与操作 &amp;</p>\n</li>\n<li>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">0</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">0</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr></table></figure></li>\n<li>\n<p>按位或操作 |</p>\n</li>\n<li>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token number\">0</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">0</span> <span class=\"token operator\">|</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">0</span> <span class=\"token operator\">|</span> <span class=\"token number\">0</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr></table></figure></li>\n<li>\n<p>按位异或操作 ^</p>\n</li>\n<li>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token operator\">^</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token operator\">^</span> <span class=\"token number\">0</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">0</span> <span class=\"token operator\">^</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">0</span> <span class=\"token operator\">^</span> <span class=\"token number\">0</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr></table></figure></li>\n<li>\n<p>按位左移操作 &lt;&lt;</p>\n</li>\n<li>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">10</span> <span class=\"token number\">11</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">11</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">11</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">01</span> <span class=\"token number\">01</span> <span class=\"token number\">10</span> <span class=\"token number\">00</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">88</span></pre></td></tr></table></figure></li>\n<li>\n<p>按位右移操作 &gt;&gt;</p>\n</li>\n<li>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">10</span> <span class=\"token number\">11</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">11</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">11</span> <span class=\"token operator\">>></span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">10</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">2</span></pre></td></tr></table></figure></li>\n<li>\n<p>利用位运算实现快速计算</p>\n</li>\n<li>\n<p>通过  <code>&lt;&lt;</code> ， <code>&gt;&gt;</code>  快速计算 2 的倍数问题。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>n <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> 计算 n<span class=\"token operator\">*</span><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>n <span class=\"token operator\">>></span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> 计算 n<span class=\"token operator\">/</span><span class=\"token number\">2</span>，负奇数的运算不可用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>n <span class=\"token operator\">&lt;&lt;</span> m <span class=\"token operator\">-</span><span class=\"token operator\">></span> 计算 n<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">^</span>m<span class=\"token punctuation\">)</span>，即乘以 <span class=\"token number\">2</span> 的 m 次方</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>n <span class=\"token operator\">>></span> m <span class=\"token operator\">-</span><span class=\"token operator\">></span> 计算 n<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">^</span>m<span class=\"token punctuation\">)</span>，即除以 <span class=\"token number\">2</span> 的 m 次方</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token operator\">^</span>n</pre></td></tr></table></figure><p>通过  <code>^</code>  快速交换两个整数。 通过  <code>^</code>  快速交换两个整数。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">^</span><span class=\"token operator\">=</span> b</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">^</span><span class=\"token operator\">=</span> a</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a <span class=\"token operator\">^</span><span class=\"token operator\">=</span> b</pre></td></tr></table></figure><p>通过  <code>a &amp; (-a)</code>  快速获取 <code>a</code>  的最后为 1 位置的整数。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">01</span> <span class=\"token number\">01</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">11</span> <span class=\"token number\">11</span> <span class=\"token number\">10</span> <span class=\"token number\">11</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">01</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">11</span> <span class=\"token number\">10</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">14</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">11</span> <span class=\"token number\">11</span> <span class=\"token number\">00</span> <span class=\"token number\">10</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">14</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">10</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">2</span></pre></td></tr></table></figure></li>\n<li>\n<p>利用位运算实现整数集合</p>\n</li>\n<li>\n<p>一个数的二进制表示可以看作是一个集合（0 表示不在集合中，1 表示在集合中）。</p>\n<p>比如集合  <code>&#123;1, 3, 4, 8&#125;</code> ，可以表示成  <code>01 00 01 10 10</code>  而对应的位运算也就可以看作是对集合进行的操作。</p>\n<p>元素与集合的操作：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token punctuation\">)</span>  <span class=\"token operator\">-</span><span class=\"token operator\">></span> 把 i 插入到集合中</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> 把 i 从集合中删除</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token punctuation\">)</span>  <span class=\"token operator\">-</span><span class=\"token operator\">></span> 判断 i 是否属于该集合（零不属于，非零属于）</pre></td></tr></table></figure><p>集合之间的操作：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a 补   <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token operator\">~</span>a</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a 交 b <span class=\"token operator\">-</span><span class=\"token operator\">></span> a <span class=\"token operator\">&amp;</span> b</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a 并 b <span class=\"token operator\">-</span><span class=\"token operator\">></span> a <span class=\"token operator\">|</span> b</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a 差 b <span class=\"token operator\">-</span><span class=\"token operator\">></span> a <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>b<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意：整数在内存中是以补码的形式存在的，输出自然也是按照补码输出。</p>\n<p>【例子】 Python 的 <code>bin()</code>  输出。</p>\n<p>[37]:</p>\n<pre><code>print(bin(3))  # 0b11\nprint(bin(-3))  # -0b11\n\nprint(bin(-3 &amp; 0xffffffff))  \n# 0b11111111111111111111111111111101\n\nprint(bin(0xfffffffd))       \n# 0b11111111111111111111111111111101\n\nprint(0xfffffffd)  # 4294967293\n</code></pre>\n</li>\n<li>\n<p>Python 中 <code>bin</code>  一个负数（十进制表示），输出的是它的原码的二进制表示加上个负号，巨坑。</p>\n</li>\n<li>\n<p>Python 中的整型是补码形式存储的。</p>\n</li>\n<li>\n<p>Python 中整型是不限制长度的不会超范围溢出。</p>\n</li>\n</ul>\n<p>所以为了获得负数（十进制表示）的补码，需要手动将其和十六进制数 <code>0xffffffff</code>  进行按位与操作，再交给 <code>bin()</code>  进行输出，得到的才是负数的补码表示。</p>\n</li>\n<li>\n<p>条件语句</p>\n<ul>\n<li>\n<h2 id=\"if-语句\"><a class=\"markdownIt-Anchor\" href=\"#if-语句\">#</a> if 语句</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> expression<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    expr_true_suite</pre></td></tr></table></figure><ul>\n<li>\n<p>if 语句的  <code>expr_true_suite</code>  代码块只有当条件表达式  <code>expression</code>  结果为真时才执行，否则将继续执行紧跟在该代码块后面的语句。</p>\n</li>\n<li>\n<p>单个 if 语句中的  <code>expression</code>  条件表达式可以通过布尔操作符  <code>and</code> ， <code>or</code>  和 <code>not</code>  实现多重条件判断。</p>\n</li>\n<li>\n<p>【例子】</p>\n<p>[38]:</p>\n<pre><code>if 2 &gt; 1 and not 2 &gt; 3:\n    print('Correct Judgement!')\n\n# Correct Judgement!\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<h2 id=\"2-if-else-语句\"><a class=\"markdownIt-Anchor\" href=\"#2-if-else-语句\">#</a> 2. if - else 语句</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> expression<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    expr_true_suite</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    expr_false_suite</pre></td></tr></table></figure><ul>\n<li>Python 提供与 if 搭配使用的 else，如果 if 语句的条件表达式结果布尔值为假，那么程序将执行 else 语句后的代码。</li>\n</ul>\n<p>【例子】</p>\n<p>[39]:</p>\n<pre><code>temp = input(&quot;猜一猜小姐姐想的是哪个数字？&quot;)\nguess = int(temp) # input 函数将接收的任何数据类型都默认为 str。\nif guess == 666:\n    print(&quot;你太了解小姐姐的心思了！&quot;)\n    print(&quot;哼，猜对也没有奖励！&quot;)\nelse:\n    print(&quot;猜错了，小姐姐现在心里想的是666！&quot;)\nprint(&quot;游戏结束，不玩儿啦！&quot;)\n猜一猜小姐姐想的是哪个数字？666\n你太了解小姐姐的心思了！\n哼，猜对也没有奖励！\n游戏结束，不玩儿啦！\n</code></pre>\n<p><code>if</code>  语句支持嵌套，即在一个 <code>if</code>  语句中嵌入另一个 <code>if</code>  语句，从而构成不同层次的选择结构。</p>\n<p>【例子】Python 使用缩进而不是大括号来标记代码块边界，因此要特别注意 <code>else</code>  的悬挂问题。</p>\n<p>[40]:</p>\n<pre><code>hi = 6\nif hi &gt; 2:\n    if hi &gt; 7:\n        print('好棒!好棒!')\nelse:\n    print('切~')\n\n# 无输出\n</code></pre>\n<p>【例子】</p>\n<p>[41]:</p>\n<pre><code>temp = input(&quot;猜一猜小姐姐想的是哪个数字？&quot;)\nguess = int(temp)\nif guess &gt; 8:\n    print(&quot;大了，大了&quot;)\nelse:\n    if guess == 8:\n        print(&quot;你太了解小姐姐的心思了！&quot;)\n        print(&quot;哼，猜对也没有奖励！&quot;)\n    else:\n        print(&quot;小了，小了&quot;)\nprint(&quot;游戏结束，不玩儿啦！&quot;)\n猜一猜小姐姐想的是哪个数字？8\n你太了解小姐姐的心思了！\n哼，猜对也没有奖励！\n游戏结束，不玩儿啦！\n</code></pre>\n<h2 id=\"3-if-elif-else-语句\"><a class=\"markdownIt-Anchor\" href=\"#3-if-elif-else-语句\">#</a> 3. if - elif - else 语句</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> expression1<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    expr1_true_suite</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">elif</span> expression2<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    expr2_true_suite</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">elif</span> expressionN<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    exprN_true_suite</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    expr_false_suite</pre></td></tr></table></figure><ul>\n<li>elif 语句即为 else if，用来检查多个表达式是否为真，并在为真时执行特定代码块中的代码。</li>\n</ul>\n<p>【例子】</p>\n<p>[42]:</p>\n<pre><code>temp = input('请输入成绩:')\nsource = int(temp)\nif 100 &gt;= source &gt;= 90:\n    print('A')\nelif 90 &gt; source &gt;= 80:\n    print('B')\nelif 80 &gt; source &gt;= 60:\n    print('C')\nelif 60 &gt; source &gt;= 0:\n    print('D')\nelse:\n    print('输入错误！')\n请输入成绩:99\nA\n</code></pre>\n<h2 id=\"4-assert-关键词\"><a class=\"markdownIt-Anchor\" href=\"#4-assert-关键词\">#</a> 4. assert 关键词</h2>\n<ul>\n<li><code>assert</code>  这个关键词我们称之为 “断言”，当这个关键词后边的条件为 False 时，程序自动崩溃并抛出 <code>AssertionError</code>  的异常。</li>\n</ul>\n<p>【例子】</p>\n<p>[ ]:</p>\n<pre><code>my_list = ['lsgogroup']\nmy_list.pop(0)\nassert len(my_list) &gt; 0\n\n# AssertionError\n</code></pre>\n<p>【例子】在进行单元测试时，可以用来在程序中置入检查点，只有条件为 True 才能让程序正常工作。</p>\n<p>[ ]:</p>\n<pre><code>assert 3 &gt; 7\n\n# AssertionError\n</code></pre>\n<h1 id=\"循环语句\"><a class=\"markdownIt-Anchor\" href=\"#循环语句\">#</a> 循环语句</h1>\n<h2 id=\"1-while-循环\"><a class=\"markdownIt-Anchor\" href=\"#1-while-循环\">#</a> 1. while 循环</h2>\n<p><code>while</code>  语句最基本的形式包括一个位于顶部的布尔表达式，一个或多个属于 <code>while</code>  代码块的缩进语句。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> 布尔表达式<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    代码块</pre></td></tr></table></figure><p><code>while</code>  循环的代码块会一直循环执行，直到布尔表达式的值为布尔假。</p>\n<p>如果布尔表达式不带有 <code>&lt;、&gt;、==、！=、in、not in</code>  等运算符，仅仅给出数值之类的条件，也是可以的。当 <code>while</code>  后写入一个非零整数时，视为真值，执行循环体；写入 <code>0</code>  时，视为假值，不执行循环体。也可以写入 <code>str、list</code>  或任何序列，长度非零则视为真值，执行循环体；否则视为假值，不执行循环体。</p>\n<p>【例子】</p>\n<p>[44]:</p>\n<pre><code>count = 0\nwhile count &lt; 3:\n    temp = input(&quot;猜一猜小姐姐想的是哪个数字？&quot;)\n    guess = int(temp)\n    if guess &gt; 8:\n        print(&quot;大了，大了&quot;)\n    else:\n        if guess == 8:\n            print(&quot;你太了解小姐姐的心思了！&quot;)\n            print(&quot;哼，猜对也没有奖励！&quot;)\n            count = 3\n        else:\n            print(&quot;小了，小了&quot;)\n    count = count + 1\nprint(&quot;游戏结束，不玩儿啦！&quot;)\n猜一猜小姐姐想的是哪个数字？8\n你太了解小姐姐的心思了！\n哼，猜对也没有奖励！\n游戏结束，不玩儿啦！\n</code></pre>\n<p>【例子】布尔表达式返回 0，循环终止。</p>\n<p>[45]:</p>\n<pre><code>string = 'abcd'\nwhile string:\n    print(string)\n    string = string[1:]\n\n# abcd\n# bcd\n# cd\n# d\nabcd\nbcd\ncd\nd\n</code></pre>\n<hr>\n<h2 id=\"2-while-else-循环\"><a class=\"markdownIt-Anchor\" href=\"#2-while-else-循环\">#</a> 2. while - else 循环</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> 布尔表达式<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    代码块</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    代码块</pre></td></tr></table></figure><p>当 <code>while</code>  循环正常执行完的情况下，执行 <code>else</code>  输出，如果 <code>while</code>  循环中执行了跳出循环的语句，比如  <code>break</code> ，将不执行 <code>else</code>  代码块的内容。</p>\n<p>【例子】</p>\n<p>[46]:</p>\n<pre><code>count = 0\nwhile count &lt; 5:\n    print(&quot;%d is  less than 5&quot; % count)\n    count = count + 1\nelse:\n    print(&quot;%d is not less than 5&quot; % count)\n    \n# 0 is  less than 5\n# 1 is  less than 5\n# 2 is  less than 5\n# 3 is  less than 5\n# 4 is  less than 5\n# 5 is not less than 5\n0 is  less than 5\n1 is  less than 5\n2 is  less than 5\n3 is  less than 5\n4 is  less than 5\n5 is not less than 5\n</code></pre>\n<p>【例子】</p>\n<p>[47]:</p>\n<pre><code>count = 0\nwhile count &lt; 5:\n    print(&quot;%d is  less than 5&quot; % count)\n    count = 6\n    break\nelse:\n    print(&quot;%d is not less than 5&quot; % count)\n\n# 0 is  less than 5\n0 is  less than 5\n</code></pre>\n<hr>\n<h2 id=\"3-for-循环\"><a class=\"markdownIt-Anchor\" href=\"#3-for-循环\">#</a> 3. for 循环</h2>\n<p><code>for</code>  循环是迭代循环，在 Python 中相当于一个通用的序列迭代器，可以遍历任何有序序列，如 <code>str、list、tuple</code>  等，也可以遍历任何可迭代对象，如 <code>dict</code> 。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> 迭代变量 <span class=\"token keyword\">in</span> 可迭代对象<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    代码块</pre></td></tr></table></figure><p>每次循环，迭代变量被设置为可迭代对象的当前元素，提供给代码块使用。</p>\n<p>【例子】</p>\n<p>[48]:</p>\n<pre><code>for i in 'ILoveLSGO':\n    print(i, end=' ')  # 不换行输出\n\n# I L o v e L S G O\nI L o v e L S G O \n</code></pre>\n<p>【例子】</p>\n<p>[49]:</p>\n<pre><code>member = ['张三', '李四', '刘德华', '刘六', '周润发']\nfor each in member:\n    print(each)\n\n# 张三\n# 李四\n# 刘德华\n# 刘六\n# 周润发\n\nfor i in range(len(member)):\n    print(member[i])\n\n# 张三\n# 李四\n# 刘德华\n# 刘六\n# 周润发\n张三\n李四\n刘德华\n刘六\n周润发\n张三\n李四\n刘德华\n刘六\n周润发\n</code></pre>\n<p>【例子】</p>\n<p>[50]:</p>\n<pre><code>dic = &#123;'a': 1, 'b': 2, 'c': 3, 'd': 4&#125;\n\nfor key, value in dic.items():\n    print(key, value, sep=':', end=' ')\n    \n# a:1 b:2 c:3 d:4 \na:1 b:2 c:3 d:4 \n</code></pre>\n<p>【例子】</p>\n<p>[51]:</p>\n<pre><code>dic = &#123;'a': 1, 'b': 2, 'c': 3, 'd': 4&#125;\n\nfor key in dic.keys():\n    print(key, end=' ')\n    \n# a b c d \na b c d \n</code></pre>\n<p>【例子】</p>\n<p>[52]:</p>\n<pre><code>dic = &#123;'a': 1, 'b': 2, 'c': 3, 'd': 4&#125;\n\nfor value in dic.values():\n    print(value, end=' ')\n    \n# 1 2 3 4\n1 2 3 4 \n</code></pre>\n<hr>\n<h2 id=\"4-for-else-循环\"><a class=\"markdownIt-Anchor\" href=\"#4-for-else-循环\">#</a> 4. for - else 循环</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> 迭代变量 <span class=\"token keyword\">in</span> 可迭代对象<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    代码块</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    代码块</pre></td></tr></table></figure><p>当 <code>for</code>  循环正常执行完的情况下，执行 <code>else</code>  输出，如果 <code>for</code>  循环中执行了跳出循环的语句，比如  <code>break</code> ，将不执行 <code>else</code>  代码块的内容，与 <code>while - else</code>  语句一样。</p>\n<p>【例子】</p>\n<p>[53]:</p>\n<pre><code>for num in range(10, 20):  # 迭代 10 到 20 之间的数字\n    for i in range(2, num):  # 根据因子迭代\n        if num % i == 0:  # 确定第一个因子\n            j = num / i  # 计算第二个因子\n            print('%d 等于 %d * %d' % (num, i, j))\n            break  # 跳出当前循环\n    else:  # 循环的 else 部分\n        print(num, '是一个质数')\n\n# 10 等于 2 * 5\n# 11 是一个质数\n# 12 等于 2 * 6\n# 13 是一个质数\n# 14 等于 2 * 7\n# 15 等于 3 * 5\n# 16 等于 2 * 8\n# 17 是一个质数\n# 18 等于 2 * 9\n# 19 是一个质数\n10 等于 2 * 5\n11 是一个质数\n12 等于 2 * 6\n13 是一个质数\n14 等于 2 * 7\n15 等于 3 * 5\n16 等于 2 * 8\n17 是一个质数\n18 等于 2 * 9\n19 是一个质数\n</code></pre>\n<hr>\n<h2 id=\"5-range-函数\"><a class=\"markdownIt-Anchor\" href=\"#5-range-函数\">#</a> 5. range () 函数</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span> stop<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> step<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>这个 BIF（Built-in functions）有三个参数，其中用中括号括起来的两个表示这两个参数是可选的。</li>\n<li><code>step=1</code>  表示第三个参数的默认值是 1。</li>\n<li><code>range</code>  这个 BIF 的作用是生成一个从 <code>start</code>  参数的值开始到 <code>stop</code>  参数的值结束的数字序列，该序列包含 <code>start</code>  的值但不包含 <code>stop</code>  的值。</li>\n</ul>\n<p>【例子】</p>\n<p>[54]:</p>\n<pre><code>for i in range(2, 9):  # 不包含9\n    print(i)\n\n# 2\n# 3\n# 4\n# 5\n# 6\n# 7\n# 8\n2\n3\n4\n5\n6\n7\n8\n</code></pre>\n<p>【例子】</p>\n<p>[55]:</p>\n<pre><code>for i in range(1, 10, 2):\n    print(i)\n\n# 1\n# 3\n# 5\n# 7\n# 9\n1\n3\n5\n7\n9\n</code></pre>\n<hr>\n<h2 id=\"6-enumerate函数\"><a class=\"markdownIt-Anchor\" href=\"#6-enumerate函数\">#</a> 6. enumerate () 函数</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>sequence<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>start<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>sequence：一个序列、迭代器或其他支持迭代对象。</li>\n<li>start：下标起始位置。</li>\n<li>返回 enumerate (枚举) 对象</li>\n</ul>\n<p>【例子】</p>\n<p>[56]:</p>\n<pre><code>seasons = ['Spring', 'Summer', 'Fall', 'Winter']\nlst = list(enumerate(seasons))\nprint(lst)\n# [(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]\nlst = list(enumerate(seasons, start=1))  # 下标从 1 开始\nprint(lst)\n# [(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]\n[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]\n[(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]\n</code></pre>\n<p><code>enumerate()</code>  与 for 循环的结合使用。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> a <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    do something <span class=\"token keyword\">with</span> a</pre></td></tr></table></figure><p>用  <code>enumerate(A)</code>  不仅返回了  <code>A</code>  中的元素，还顺便给该元素一个索引值 (默认从 0 开始)。此外，用  <code>enumerate(A, j)</code>  还可以确定索引起始值为  <code>j</code> 。</p>\n<p>【例子】</p>\n<p>[57]:</p>\n<pre><code>languages = ['Python', 'R', 'Matlab', 'C++']\nfor language in languages:\n    print('I love', language)\nprint('Done!')\n# I love Python\n# I love R\n# I love Matlab\n# I love C++\n# Done!\n\n\nfor i, language in enumerate(languages, 2):\n    print(i, 'I love', language)\nprint('Done!')\n# 2 I love Python\n# 3 I love R\n# 4 I love Matlab\n# 5 I love C++\n# Done!\nI love Python\nI love R\nI love Matlab\nI love C++\nDone!\n2 I love Python\n3 I love R\n4 I love Matlab\n5 I love C++\nDone!\n</code></pre>\n<hr>\n<h2 id=\"7-break-语句\"><a class=\"markdownIt-Anchor\" href=\"#7-break-语句\">#</a> 7. break 语句</h2>\n<p><code>break</code>  语句可以跳出当前所在层的循环。</p>\n<p>【例子】</p>\n<p>[59]:</p>\n<pre><code>import random\nsecret = random.randint(1, 10) #[1,10]之间的随机数\n\nwhile True:\n    temp = input(&quot;猜一猜小姐姐想的是哪个数字？&quot;)\n    guess = int(temp)\n    if guess &gt; secret:\n        print(&quot;大了，大了&quot;)\n    else:\n        if guess == secret:\n            print(&quot;你太了解小姐姐的心思了！&quot;)\n            print(&quot;哼，猜对也没有奖励！&quot;)\n            break\n        else:\n            print(&quot;小了，小了&quot;)\nprint(&quot;游戏结束，不玩儿啦！&quot;)\n猜一猜小姐姐想的是哪个数字？8\n你太了解小姐姐的心思了！\n哼，猜对也没有奖励！\n游戏结束，不玩儿啦！\n</code></pre>\n<hr>\n<h2 id=\"8-continue-语句\"><a class=\"markdownIt-Anchor\" href=\"#8-continue-语句\">#</a> 8. continue 语句</h2>\n<p><code>continue</code>  终止本轮循环并开始下一轮循环。</p>\n<p>【例子】</p>\n<p>[60]:</p>\n<pre><code>for i in range(10):\n    if i % 2 != 0:\n        print(i)\n        continue\n    i += 2\n    print(i)\n\n# 2\n# 1\n# 4\n# 3\n# 6\n# 5\n# 8\n# 7\n# 10\n# 9\n2\n1\n4\n3\n6\n5\n8\n7\n10\n9\n</code></pre>\n<hr>\n<h2 id=\"9-pass-语句\"><a class=\"markdownIt-Anchor\" href=\"#9-pass-语句\">#</a> 9. pass 语句</h2>\n<p><code>pass</code>  语句的意思是 “不做任何事”，如果你在需要有语句的地方不写任何语句，那么解释器会提示出错，而  <code>pass</code>  语句就是用来解决这些问题的。</p>\n<p>【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">a_func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># SyntaxError: unexpected EOF while parsing</span></pre></td></tr></table></figure><p>【例子】</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">a_func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr></table></figure><p><code>pass</code>  是空语句，不做任何操作，只起到占位的作用，其作用是为了保持程序结构的完整性。尽管 <code>pass</code>  语句不做任何操作，但如果暂时不确定要在一个位置放上什么样的代码，可以先放置一个 <code>pass</code>  语句，让代码可以正常运行。</p>\n<hr>\n<h2 id=\"10-推导式\"><a class=\"markdownIt-Anchor\" href=\"#10-推导式\">#</a> 10. 推导式</h2>\n<p><strong>列表推导式</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span> expr <span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> collection <span class=\"token punctuation\">[</span><span class=\"token keyword\">if</span> condition<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>【例子】</p>\n<p>[61]:</p>\n<pre><code>x = [-4, -2, 0, 2, 4]\ny = [a * 2 for a in x]\nprint(y)\n# [-8, -4, 0, 4, 8]\n[-8, -4, 0, 4, 8]\n</code></pre>\n<p>【例子】</p>\n<p>[63]:</p>\n<pre><code>x = [i ** 2 for i in range(1, 10)]\nprint(x)\n# [1, 4, 9, 16, 25, 36, 49, 64, 81]\n[1, 4, 9, 16, 25, 36, 49, 64, 81]\n</code></pre>\n<p>【例子】</p>\n<p>[64]:</p>\n<pre><code>x = [(i, i ** 2) for i in range(6)]\nprint(x)\n\n# [(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]\n[(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]\n</code></pre>\n<p>【例子】</p>\n<p>[65]:</p>\n<pre><code>x = [i for i in range(100) if (i % 2) != 0 and (i % 3) == 0]\nprint(x)\n\n# [3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93, 99]\n[3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93, 99]\n</code></pre>\n<p>【例子】</p>\n<p>[66]:</p>\n<pre><code>a = [(i, j) for i in range(0, 3) for j in range(0, 3)]\nprint(a)\n\n# [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]\n[(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]\n</code></pre>\n<p>【例子】</p>\n<p>[67]:</p>\n<pre><code>x = [[i, j] for i in range(0, 3) for j in range(0, 3)]\nprint(x)\n# [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]\n\nx[0][0] = 10\nprint(x)\n# [[10, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]\n[[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]\n[[10, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]\n</code></pre>\n<p>【例子】</p>\n<p>[68]:</p>\n<pre><code>a = [(i, j) for i in range(0, 3) if i &lt; 1 for j in range(0, 3) if j &gt; 1]\nprint(a)\n\n# [(0, 2)]\n[(0, 2)]\n</code></pre>\n<p><strong>元组推导式</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span> expr <span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> collection <span class=\"token punctuation\">[</span><span class=\"token keyword\">if</span> condition<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>【例子】</p>\n<p>[69]:</p>\n<pre><code>a = (x for x in range(10))\nprint(a)\n\n# &lt;generator object &lt;genexpr&gt; at 0x0000025BE511CC48&gt;\n\nprint(tuple(a))\n\n# (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n&lt;generator object &lt;genexpr&gt; at 0x0000014CEC2E28B8&gt;\n(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n</code></pre>\n<p><strong>字典推导式</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span> key_expr<span class=\"token punctuation\">:</span> value_expr <span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> collection <span class=\"token punctuation\">[</span><span class=\"token keyword\">if</span> condition<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>【例子】</p>\n<p>[70]:</p>\n<pre><code>b = &#123;i: i % 2 == 0 for i in range(10) if i % 3 == 0&#125;\nprint(b)\n# &#123;0: True, 3: False, 6: True, 9: False&#125;\n&#123;0: True, 3: False, 6: True, 9: False&#125;\n</code></pre>\n<p><strong>集合推导式</strong></p>\n<pre><code>&#123; expr for value in collection [if condition] &#125;\n</code></pre>\n<p>【例子】</p>\n<p>[71]:</p>\n<pre><code>c = &#123;i for i in [1, 2, 3, 4, 5, 5, 6, 4, 3, 2, 1]&#125;\nprint(c)\n# &#123;1, 2, 3, 4, 5, 6&#125;\n&#123;1, 2, 3, 4, 5, 6&#125;\n</code></pre>\n<p><strong>其它</strong></p>\n<ul>\n<li><code>next(iterator[, default])</code>  Return the next item from the iterator. If default is given and the iterator is exhausted, it is returned instead of raising StopIteration.</li>\n</ul>\n<p>【例子】</p>\n<p>[72]:</p>\n<pre><code>e = (i for i in range(10))\nprint(e)\n# &lt;generator object &lt;genexpr&gt; at 0x0000007A0B8D01B0&gt;\n\nprint(next(e))  # 0\nprint(next(e))  # 1\n\nfor each in e:\n    print(each, end=' ')\n\n# 2 3 4 5 6 7 8 9\n&lt;generator object &lt;genexpr&gt; at 0x0000014CEC389C78&gt;\n0\n1\n2 3 4 5 6 7 8 9 \n</code></pre>\n<p>【例子】</p>\n<p>[73]:</p>\n<pre><code>s = sum([i for i in range(101)])\nprint(s)  # 5050\ns = sum((i for i in range(101)))\nprint(s)  # 5050\n5050\n5050\n</code></pre>\n<h1 id=\"异常处理\"><a class=\"markdownIt-Anchor\" href=\"#异常处理\">#</a> 异常处理</h1>\n<p>异常就是运行期检测到的错误。计算机语言针对可能出现的错误定义了异常类型，某种错误引发对应的异常时，异常处理程序将被启动，从而恢复程序的正常运行。</p>\n<h2 id=\"1-python-标准异常总结\"><a class=\"markdownIt-Anchor\" href=\"#1-python-标准异常总结\">#</a> 1. Python 标准异常总结</h2>\n<ul>\n<li>BaseException：所有异常的 <strong>基类</strong></li>\n<li>Exception：常规异常的 <strong>基类</strong></li>\n<li>StandardError：所有的内建标准异常的基类</li>\n<li>ArithmeticError：所有数值计算异常的基类</li>\n<li>FloatingPointError：浮点计算异常</li>\n<li>OverflowError：数值运算超出最大限制</li>\n<li>ZeroDivisionError：除数为零</li>\n<li>AssertionError：断言语句（assert）失败</li>\n<li>AttributeError：尝试访问未知的对象属性</li>\n<li>EOFError：没有内建输入，到达 EOF 标记</li>\n<li>EnvironmentError：操作系统异常的基类</li>\n<li>IOError：输入 / 输出操作失败</li>\n<li>OSError：操作系统产生的异常（例如打开一个不存在的文件）</li>\n<li>WindowsError：系统调用失败</li>\n<li>ImportError：导入模块失败的时候</li>\n<li>KeyboardInterrupt：用户中断执行</li>\n<li>LookupError：无效数据查询的基类</li>\n<li>IndexError：索引超出序列的范围</li>\n<li>KeyError：字典中查找一个不存在的关键字</li>\n<li>MemoryError：内存溢出（可通过删除对象释放内存）</li>\n<li>NameError：尝试访问一个不存在的变量</li>\n<li>UnboundLocalError：访问未初始化的本地变量</li>\n<li>ReferenceError：弱引用试图访问已经垃圾回收了的对象</li>\n<li>RuntimeError：一般的运行时异常</li>\n<li>NotImplementedError：尚未实现的方法</li>\n<li>SyntaxError：语法错误导致的异常</li>\n<li>IndentationError：缩进错误导致的异常</li>\n<li>TabError：Tab 和空格混用</li>\n<li>SystemError：一般的解释器系统异常</li>\n<li>TypeError：不同类型间的无效操作</li>\n<li>ValueError：传入无效的参数</li>\n<li>UnicodeError：Unicode 相关的异常</li>\n<li>UnicodeDecodeError：Unicode 解码时的异常</li>\n<li>UnicodeEncodeError：Unicode 编码错误导致的异常</li>\n<li>UnicodeTranslateError：Unicode 转换错误导致的异常</li>\n</ul>\n<p>异常体系内部有层次关系，Python 异常体系中的部分关系如下所示：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20200710131404548.png\" alt=\"Image\"></p>\n<hr>\n<h2 id=\"2-python标准警告总结\"><a class=\"markdownIt-Anchor\" href=\"#2-python标准警告总结\">#</a> 2. Python 标准警告总结</h2>\n<ul>\n<li>Warning：警告的基类</li>\n<li>DeprecationWarning：关于被弃用的特征的警告</li>\n<li>FutureWarning：关于构造将来语义会有改变的警告</li>\n<li>UserWarning：用户代码生成的警告</li>\n<li>PendingDeprecationWarning：关于特性将会被废弃的警告</li>\n<li>RuntimeWarning：可疑的运行时行为 (runtime behavior) 的警告</li>\n<li>SyntaxWarning：可疑语法的警告</li>\n<li>ImportWarning：用于在导入模块过程中触发的警告</li>\n<li>UnicodeWarning：与 Unicode 相关的警告</li>\n<li>BytesWarning：与字节或字节码相关的警告</li>\n<li>ResourceWarning：与资源使用相关的警告</li>\n</ul>\n<hr>\n<h2 id=\"3-try-except-语句\"><a class=\"markdownIt-Anchor\" href=\"#3-try-except-语句\">#</a> 3. try - except 语句</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    检测范围</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">except</span> Exception<span class=\"token punctuation\">[</span><span class=\"token keyword\">as</span> reason<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    出现异常后的处理代码</pre></td></tr></table></figure><p>try 语句按照如下方式工作：</p>\n<ul>\n<li>首先，执行 <code>try</code>  子句（在关键字 <code>try</code>  和关键字 <code>except</code>  之间的语句）</li>\n<li>如果没有异常发生，忽略 <code>except</code>  子句， <code>try</code>  子句执行后结束。</li>\n<li>如果在执行 <code>try</code>  子句的过程中发生了异常，那么 <code>try</code>  子句余下的部分将被忽略。如果异常的类型和 <code>except</code>  之后的名称相符，那么对应的 <code>except</code>  子句将被执行。最后执行 <code>try - except</code>  语句之后的代码。</li>\n<li>如果一个异常没有与任何的 <code>except</code>  匹配，那么这个异常将会传递给上层的 <code>try</code>  中。</li>\n</ul>\n<p>【例子】</p>\n<p>[2]:</p>\n<pre><code>try:\n    f = open('test.txt')\n    print(f.read())\n    f.close()\nexcept OSError:\n    print('打开文件出错')\n\n# 打开文件出错\n打开文件出错\n</code></pre>\n<p>【例子】</p>\n<p>[3]:</p>\n<pre><code>try:\n    f = open('test.txt')\n    print(f.read())\n    f.close()\nexcept OSError as error:\n    print('打开文件出错\\n原因是：' + str(error))\n\n# 打开文件出错\n# 原因是：[Errno 2] No such file or directory: 'test.txt'\n打开文件出错\n原因是：[Errno 2] No such file or directory: 'test.txt'\n</code></pre>\n<p>一个 <code>try</code>  语句可能包含多个 <code>except</code>  子句，分别来处理不同的特定的异常。最多只有一个分支会被执行。</p>\n<p>【例子】</p>\n<p>[4]:</p>\n<pre><code>try:\n    int(&quot;abc&quot;)\n    s = 1 + '1'\n    f = open('test.txt')\n    print(f.read())\n    f.close()\nexcept OSError as error:\n    print('打开文件出错\\n原因是：' + str(error))\nexcept TypeError as error:\n    print('类型出错\\n原因是：' + str(error))\nexcept ValueError as error:\n    print('数值出错\\n原因是：' + str(error))\n\n# 数值出错\n# 原因是：invalid literal for int() with base 10: 'abc'\n数值出错\n原因是：invalid literal for int() with base 10: 'abc'\n</code></pre>\n<p>【例子】</p>\n<p>[5]:</p>\n<pre><code>dict1 = &#123;'a': 1, 'b': 2, 'v': 22&#125;\ntry:\n    x = dict1['y']\nexcept LookupError:\n    print('查询错误')\nexcept KeyError:\n    print('键错误')\nelse:\n    print(x)\n\n# 查询错误\n查询错误\n</code></pre>\n<p><code>try-except-else</code>  语句尝试查询不在 <code>dict</code>  中的键值对，从而引发了异常。这一异常准确地说应属于 <code>KeyError</code> ，但由于 <code>KeyError</code>  是 <code>LookupError</code>  的子类，且将 <code>LookupError</code>  置于 <code>KeyError</code>  之前，因此程序优先执行该 <code>except</code>  代码块。所以，使用多个 <code>except</code>  代码块时，必须坚持对其规范排序，要从最具针对性的异常到最通用的异常。</p>\n<p>【例子】</p>\n<p>[6]:</p>\n<pre><code>dict1 = &#123;'a': 1, 'b': 2, 'v': 22&#125;\ntry:\n    x = dict1['y']\nexcept KeyError:\n    print('键错误')\nexcept LookupError:\n    print('查询错误')\nelse:\n    print(x)\n\n# 键错误\n键错误\n</code></pre>\n<p>【例子】一个  <code>except</code>  子句可以同时处理多个异常，这些异常将被放在一个括号里成为一个元组。</p>\n<p>[7]:</p>\n<pre><code>try:\n    s = 1 + '1'\n    int(&quot;abc&quot;)\n    f = open('test.txt')\n    print(f.read())\n    f.close()\nexcept (OSError, TypeError, ValueError) as error:\n    print('出错了！\\n原因是：' + str(error))\n\n# 出错了！\n# 原因是：unsupported operand type(s) for +: 'int' and 'str'\n出错了！\n原因是：unsupported operand type(s) for +: 'int' and 'str'\n</code></pre>\n<hr>\n<h2 id=\"4-try-except-finally-语句\"><a class=\"markdownIt-Anchor\" href=\"#4-try-except-finally-语句\">#</a> 4. try - except - finally 语句</h2>\n<p>try: 检测范围 except Exception [as reason]: 出现异常后的处理代码 finally: 无论如何都会被执行的代码</p>\n<p>不管 <code>try</code>  子句里面有没有发生异常， <code>finally</code>  子句都会执行。</p>\n<p>【例子】如果一个异常在 <code>try</code>  子句里被抛出，而又没有任何的 <code>except</code>  把它截住，那么这个异常会在 <code>finally</code>  子句执行后被抛出。</p>\n<p>[10]:</p>\n<pre><code>def divide(x, y):\n    try:\n        result = x / y\n        print(&quot;result is&quot;, result)\n    except ZeroDivisionError:\n        print(&quot;division by zero!&quot;)\n    finally:\n        print(&quot;executing finally clause&quot;)\n\n\ndivide(2, 1)\n# result is 2.0\n# executing finally clause\ndivide(2, 0)\n# division by zero!\n# executing finally clause\ndivide(&quot;2&quot;, &quot;1&quot;)\n# executing finally clause\n# TypeError: unsupported operand type(s) for /: 'str' and 'str'\nresult is 2.0\nexecuting finally clause\ndivision by zero!\nexecuting finally clause\n</code></pre>\n<hr>\n<h2 id=\"5-try-except-else-语句\"><a class=\"markdownIt-Anchor\" href=\"#5-try-except-else-语句\">#</a> 5. try - except - else 语句</h2>\n<p>如果在 <code>try</code>  子句执行时没有发生异常，Python 将执行 <code>else</code>  语句后的语句。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    检测范围</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    出现异常后的处理代码</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    如果没有异常执行这块代码</pre></td></tr></table></figure><p>使用 <code>except</code>  而不带任何异常类型，这不是一个很好的方式，我们不能通过该程序识别出具体的异常信息，因为它捕获所有的异常。</p>\n<p>try: 检测范围 except (Exception1 [, Exception2 [,…ExceptionN]]]): 发生以上多个异常中的一个，执行这块代码 else: 如果没有异常执行这块代码</p>\n<p>【例子】</p>\n<p>[12]:</p>\n<pre><code>try:\n    fh = open(&quot;testfile.txt&quot;, &quot;w&quot;)\n    fh.write(&quot;这是一个测试文件，用于测试异常!!&quot;)\nexcept IOError:\n    print(&quot;Error: 没有找到文件或读取文件失败&quot;)\nelse:\n    print(&quot;内容写入文件成功&quot;)\n    fh.close()\n\n# 内容写入文件成功\n内容写入文件成功\n</code></pre>\n<p>注意： <code>else</code>  语句的存在必须以 <code>except</code>  语句的存在为前提，在没有 <code>except</code>  语句的 <code>try</code>  语句中使用 <code>else</code>  语句，会引发语法错误。</p>\n<hr>\n<h2 id=\"6-raise语句\"><a class=\"markdownIt-Anchor\" href=\"#6-raise语句\">#</a> 6. raise 语句</h2>\n<p>Python 使用 <code>raise</code>  语句抛出一个指定的异常。</p>\n<p>【例子】</p>\n<p>[13]:</p>\n<pre><code>try:\n    raise NameError('HiThere')\nexcept NameError:\n    print('An exception flew by!')\n    \n# An exception flew by!\nAn exception flew by!\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n",
            "tags": []
        }
    ]
}