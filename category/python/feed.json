{
    "version": "https://jsonfeed.org/version/1",
    "title": "Alan • All posts by \"python\" category",
    "description": "",
    "home_page_url": "https://alanosy.github.io",
    "items": [
        {
            "id": "https://alanosy.github.io/2021/01/26/python-day-1/",
            "url": "https://alanosy.github.io/2021/01/26/python-day-1/",
            "title": "python_day_1",
            "date_published": "2021-01-26T05:39:02.000Z",
            "content_html": "<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>Python 是一种通用编程语言，其在科学计算和机器学习领域具有广泛的应用。如果我们打算利用 Python 来执行机器学习，那么对 Python 有一些基本的了解就是至关重要的。本 Python 入门系列体验就是为这样的初学者精心准备的。</p>\n<p>本实验包括以下内容：</p>\n<ul>\n<li><p>变量、运算符与数据类型</p>\n<ul>\n<li><p><strong>注释</strong></p>\n<p>在python中，#表示注释，作用于整行</p>\n<p>例如：</p>\n<pre><code class=\"bashs\">print(&quot;Hello World&quot;)\n#我的第一个程序</code></pre>\n<p>其中”我的第一个程序“在代码不起运行作用</p>\n<p>另外还有多行注释用```来标注</p>\n<p>例如</p>\n<pre><code class=\"bash\">​```\n这是一个多引号注释\n用于注释多行\n···\nprint(&quot;Hello china&quot;)</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p><strong>运算符</strong></p>\n<p><strong>算术运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th><code>&gt;</code></th>\n<th>大于</th>\n<th><code>2 &gt; 1</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>&gt;=</code></td>\n<td>大于等于</td>\n<td><code>2 &gt;= 4</code></td>\n</tr>\n<tr>\n<td><code>&lt;</code></td>\n<td>小于</td>\n<td><code>1 &lt; 2</code></td>\n</tr>\n<tr>\n<td><code>&lt;=</code></td>\n<td>小于等于</td>\n<td><code>5 &lt;= 2</code></td>\n</tr>\n<tr>\n<td><code>==</code></td>\n<td>等于</td>\n<td><code>3 == 4</code></td>\n</tr>\n<tr>\n<td><code>!=</code></td>\n<td>不等于</td>\n<td><code>3 != 5</code></td>\n</tr>\n</tbody></table>\n<p>例子</p>\n<pre><code class=\"python\">print(1 + 1)  # 2\nprint(2 - 1)  # 1\nprint(3 * 4)  # 12\nprint(3 / 4)  # 0.75\nprint(3 // 4)  # 0\nprint(3 % 4)  # 3\nprint(2 ** 3)  # 8</code></pre>\n<p><strong>比较运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th><code>and</code></th>\n<th>与</th>\n<th><code>(3 &gt; 2) and (3 &lt; 5)</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>or</code></td>\n<td>或</td>\n<td><code>(1 &gt; 3) or (9 &lt; 2)</code></td>\n</tr>\n<tr>\n<td><code>not</code></td>\n<td>非</td>\n<td><code>not (2 &gt; 1)</code></td>\n</tr>\n</tbody></table>\n<p>例子</p>\n<pre><code class=\"python\">print(2 &gt; 1)  # True\nprint(2 &gt;= 4)  # False\nprint(1 &lt; 2)  # True\nprint(5 &lt;= 2)  # False\nprint(3 == 4)  # False\nprint(3 != 5)  # True</code></pre>\n<p><strong>逻辑运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th><code>and</code></th>\n<th>与</th>\n<th align=\"center\"><code>(3 &gt; 2) and (3 &lt; 5)</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>or</code></td>\n<td>或</td>\n<td align=\"center\"><code>(1 &gt; 3) or (9 &lt; 2)</code></td>\n</tr>\n<tr>\n<td><code>not</code></td>\n<td>非</td>\n<td align=\"center\"><code>not (2 &gt; 1)</code></td>\n</tr>\n</tbody></table>\n<p>例子</p>\n<pre><code class=\"python\">print((3 &gt; 2) and (3 &lt; 5))  # True\nprint((1 &gt; 3) or (9 &lt; 2))  # False\nprint(not (2 &gt; 1))  # False</code></pre>\n<p><strong>位运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th><code>~</code></th>\n<th>按位取反</th>\n<th><code>~4</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>&amp;</code></td>\n<td>按位与</td>\n<td><code>4 &amp; 5</code></td>\n</tr>\n<tr>\n<td>`</td>\n<td>`</td>\n<td>按位或</td>\n</tr>\n<tr>\n<td><code>^</code></td>\n<td>按位异或</td>\n<td><code>4 ^ 5</code></td>\n</tr>\n<tr>\n<td><code>&lt;&lt;</code></td>\n<td>左移</td>\n<td><code>4 &lt;&lt; 2</code></td>\n</tr>\n<tr>\n<td><code>&gt;&gt;</code></td>\n<td>右移</td>\n<td><code>4 &gt;&gt; 2</code></td>\n</tr>\n</tbody></table>\n<p>例子</p>\n<pre><code class=\"python\">print(bin(4))  # 0b100\nprint(bin(5))  # 0b101\nprint(bin(~4), ~4)  # -0b101 -5\nprint(bin(4 &amp; 5), 4 &amp; 5)  # 0b100 4\nprint(bin(4 | 5), 4 | 5)  # 0b101 5\nprint(bin(4 ^ 5), 4 ^ 5)  # 0b1 1\nprint(bin(4 &lt;&lt; 2), 4 &lt;&lt; 2)  # 0b10000 16\nprint(bin(4 &gt;&gt; 2), 4 &gt;&gt; 2)  # 0b1 1</code></pre>\n<p><strong>三元运算符</strong></p>\n<p>例子</p>\n<pre><code class=\"python\">x, y = 4, 5\nif x &lt; y:\n    small = x\nelse:\n    small = y\n\nprint(small)  # 4</code></pre>\n</li>\n</ul>\n<pre><code>**其他运算符**\n\n| `in`     | 存在   | `&#39;A&#39; in [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]`     |\n| -------- | ------ | ---------------------------- |\n| `not in` | 不存在 | `&#39;h&#39; not in [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]` |\n| `is`     | 是     | `&quot;hello&quot; is &quot;hello&quot;`         |\n| `not is` | 不是   | `&quot;hello&quot; is not &quot;hello&quot;`     |\n\n例子\n\n``` python\nletters = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]\nif &#39;A&#39; in letters:\n    print(&#39;A&#39; + &#39; exists&#39;)\nif &#39;h&#39; not in letters:\n    print(&#39;h&#39; + &#39; not exists&#39;)\n\n# A exists\n# h not exists\n```\n\n``` python\na = &quot;hello&quot;\nb = &quot;hello&quot;\nprint(a is b, a == b)  # True True\nprint(a is not b, a != b)  # False False\n```\n\n``` python\na = [&quot;hello&quot;]\nb = [&quot;hello&quot;]\nprint(a is b, a == b)  # False True\nprint(a is not b, a != b)  # True False\n```\n\n\n\n注意：\n\n- is, is not 对比的是两个变量的内存地址\n- ==, != 对比的是两个变量的值\n- 比较的两个变量，指向的都是地址不可变的类型（str等），那么is，is not 和 ==，！= 是完全等价的。\n- 对比的两个变量，指向的是地址可变的类型（list，dict，tuple等），则两者是有区别的。\n\n**运算符的优先级**\n\n| **                | 指数（最高优先级）       |\n| ----------------- | ------------------------ |\n| ~+-               | 按位翻转，一元加号和减号 |\n| * / % //          | 乘，除，取模和取整除）   |\n| + -               | 加法减法                 |\n| &gt;&gt; &lt;&lt;             | 右移，左移运算符         |\n| &amp;                 | 位‘AND’                  |\n| ^\\|               | 位运算符                 |\n| &lt;=&lt;&gt;&gt;=            | 比较运算符               |\n| &lt;&gt;==!=            | 等于运算符               |\n| =%=/=//=-=+=*=**= | 赋值运算符               |\n| is is not         | 身份运算符               |\n| in not in         | 成员运算符               |\n| not and or        | 逻辑运算符               |\n\n例子\n\n``` python\nprint(-3 ** 2)  # -9\nprint(3 ** -2)  # 0.1111111111111111\nprint(1 &lt;&lt; 3 + 2 &amp; 7)  # 0\nprint(-3 * 2 + 5 / -2 - 4)  # -12.5\nprint(3 &lt; 4 and 4 &lt; 5)  # True\n```</code></pre>\n<ul>\n<li><p><strong>变量和赋值</strong></p>\n</li>\n<li><p>在使用变量之前，需要对其先赋值。</p>\n</li>\n<li><p>变量名可以包括字母、数字、下划线、但变量名不能以数字开头。</p>\n</li>\n<li><p>Python 变量名是大小写敏感的，foo != Foo。</p>\n<p>例子</p>\n<pre><code class=\"bash\">first = 2\nsecond = 3\nthird = first + second\nprint(third)  # 5</code></pre>\n</li>\n</ul>\n<pre><code>**数据类型与转换**</code></pre>\n<ul>\n<li><table>\n<thead>\n<tr>\n<th>int</th>\n<th>整型 <code>&lt;class &#39;int&#39;&gt;</code></th>\n<th><code>-876, 10</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>float</td>\n<td>浮点型<code>&lt;class &#39;float&#39;&gt;</code></td>\n<td><code>3.149, 11.11</code></td>\n</tr>\n<tr>\n<td>bool</td>\n<td>布尔型<code>&lt;class &#39;bool&#39;&gt;</code></td>\n<td><code>True, False</code></td>\n</tr>\n</tbody></table>\n<pre><code class=\"bash\">i = input(&quot;i=&quot;)\nprint(i,type(i))可以查看i的类型</code></pre>\n<ul>\n<li>获取类型信息 <code>type(object)</code></li>\n</ul>\n<p>type()` 不会认为子类是一种父类类型，不考虑继承关系。</p>\n<p>isinstance()` 会认为子类是一种父类类型，考虑继承关系。</p>\n<p>如果要判断两个类型是否相同推荐使用 <code>isinstance()</code>。</p>\n<p><strong>类型转换</strong></p>\n<ul>\n<li>转换为整型 <code>int(x, base=10)</code></li>\n<li>转换为字符串 <code>str(object=&#39;&#39;)</code></li>\n<li>转换为浮点型 <code>float(x)</code></li>\n</ul>\n</li>\n<li><p><strong>print() 函数</strong></p>\n<pre><code class=\"bash\">print(*objects, sep=&#39; &#39;, end=&#39;\\n&#39;, file=sys.stdout, flush=False)</code></pre>\n<ul>\n<li>将对象以字符串表示的方式格式化输出到流文件对象file里。其中所有非关键字参数都按<code>str()</code>方式进行转换为字符串输出；</li>\n<li>关键字参数<code>sep</code>是实现分隔符，比如多个参数输出时想要输出中间的分隔字符；</li>\n<li>关键字参数<code>end</code>是输出结束时的字符，默认是换行符<code>\\n</code>；</li>\n<li>关键字参数<code>file</code>是定义流输出的文件，可以是标准的系统输出<code>sys.stdout</code>，也可以重定义为别的文件；</li>\n<li>关键字参数<code>flush</code>是立即把内容输出到流文件，不作缓存。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>位运算</p>\n<ul>\n<li><p>原码、反码和补码</p>\n</li>\n<li><p>二进制有三种不同的表示形式：原码、反码和补码，计算机内部使用补码来表示。</p>\n<p><strong>原码</strong>：就是其二进制表示（注意，有一位符号位）。</p>\n<pre><code class=\"python\">00 00 00 11 -&gt; 3\n10 00 00 11 -&gt; -3</code></pre>\n<p><strong>反码</strong>：正数的反码就是原码，负数的反码是符号位不变，其余位取反（对应正数按位取反）。</p>\n<pre><code class=\"python\">00 00 00 11 -&gt; 3\n11 11 11 00 -&gt; -3</code></pre>\n<p><strong>补码</strong>：正数的补码就是原码，负数的补码是反码+1。</p>\n<pre><code class=\"python\">00 00 00 11 -&gt; 3\n11 11 11 01 -&gt; -3</code></pre>\n</li>\n<li></li>\n<li><p>按位非操作 ~</p>\n</li>\n<li><pre><code class=\"python\">~ 1 = 0\n~ 0 = 1</code></pre>\n</li>\n<li><p>按位与操作 &amp;</p>\n</li>\n<li><pre><code class=\"python\">1 &amp; 1 = 1\n1 &amp; 0 = 0\n0 &amp; 1 = 0\n0 &amp; 0 = 0</code></pre>\n</li>\n<li><p>按位或操作 |</p>\n</li>\n<li><pre><code class=\"python\">1 | 1 = 1\n1 | 0 = 1\n0 | 1 = 1\n0 | 0 = 0</code></pre>\n</li>\n<li><p>按位异或操作 ^</p>\n</li>\n<li><pre><code class=\"python\">1 ^ 1 = 0\n1 ^ 0 = 1\n0 ^ 1 = 1\n0 ^ 0 = 0</code></pre>\n</li>\n<li><p>按位左移操作 &lt;&lt;</p>\n</li>\n<li><pre><code class=\"python\">00 00 10 11 -&gt; 11\n11 &lt;&lt; 3\n---\n01 01 10 00 -&gt; 88 </code></pre>\n</li>\n<li><p>按位右移操作 &gt;&gt;</p>\n</li>\n<li><pre><code class=\"python\">00 00 10 11 -&gt; 11\n11 &gt;&gt; 2\n---\n00 00 00 10 -&gt; 2 </code></pre>\n</li>\n<li><p>利用位运算实现快速计算</p>\n</li>\n<li><p>通过 <code>&lt;&lt;</code>，<code>&gt;&gt;</code> 快速计算2的倍数问题。</p>\n<pre><code class=\"python\">n &lt;&lt; 1 -&gt; 计算 n*2\nn &gt;&gt; 1 -&gt; 计算 n/2，负奇数的运算不可用\nn &lt;&lt; m -&gt; 计算 n*(2^m)，即乘以 2 的 m 次方\nn &gt;&gt; m -&gt; 计算 n/(2^m)，即除以 2 的 m 次方\n1 &lt;&lt; n -&gt; 2^n</code></pre>\n<p>通过 <code>^</code> 快速交换两个整数。 通过 <code>^</code> 快速交换两个整数。</p>\n<pre><code class=\"python\">a ^= b\nb ^= a\na ^= b</code></pre>\n<p>通过 <code>a &amp; (-a)</code> 快速获取<code>a</code>的最后为 1 位置的整数。</p>\n<pre><code class=\"python\">00 00 01 01 -&gt; 5\n&amp;\n11 11 10 11 -&gt; -5\n---\n00 00 00 01 -&gt; 1\n\n00 00 11 10 -&gt; 14\n&amp;\n11 11 00 10 -&gt; -14\n---\n00 00 00 10 -&gt; 2</code></pre>\n</li>\n<li><p>利用位运算实现整数集合</p>\n</li>\n<li><p>一个数的二进制表示可以看作是一个集合（0 表示不在集合中，1 表示在集合中）。</p>\n<p>比如集合 <code>&#123;1, 3, 4, 8&#125;</code>，可以表示成 <code>01 00 01 10 10</code> 而对应的位运算也就可以看作是对集合进行的操作。</p>\n<p>元素与集合的操作：</p>\n<pre><code class=\"python\">a | (1&lt;&lt;i)  -&gt; 把 i 插入到集合中\na &amp; ~(1&lt;&lt;i) -&gt; 把 i 从集合中删除\na &amp; (1&lt;&lt;i)  -&gt; 判断 i 是否属于该集合（零不属于，非零属于）</code></pre>\n<p>集合之间的操作：</p>\n<pre><code class=\"python\">a 补   -&gt; ~a\na 交 b -&gt; a &amp; b\na 并 b -&gt; a | b\na 差 b -&gt; a &amp; (~b)</code></pre>\n<p>注意：整数在内存中是以补码的形式存在的，输出自然也是按照补码输出。</p>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>【例子】 Python 的`bin()` 输出。\n\n[37]:\n\n```\nprint(bin(3))  # 0b11\nprint(bin(-3))  # -0b11\n\nprint(bin(-3 &amp; 0xffffffff))  \n# 0b11111111111111111111111111111101\n\nprint(bin(0xfffffffd))       \n# 0b11111111111111111111111111111101\n\nprint(0xfffffffd)  # 4294967293\n```</code></pre>\n<ul>\n<li><p>Python中<code>bin</code>一个负数（十进制表示），输出的是它的原码的二进制表示加上个负号，巨坑。</p>\n</li>\n<li><p>Python中的整型是补码形式存储的。</p>\n</li>\n<li><p>Python中整型是不限制长度的不会超范围溢出。</p>\n<p>所以为了获得负数（十进制表示）的补码，需要手动将其和十六进制数<code>0xffffffff</code>进行按位与操作，再交给<code>bin()</code>进行输出，得到的才是负数的补码表示。</p>\n</li>\n<li><p>条件语句</p>\n</li>\n</ul>\n<ul>\n<li><h2 id=\"if-语句\"><a href=\"#if-语句\" class=\"headerlink\" title=\"if 语句\"></a>if 语句</h2><pre><code class=\"python\">if expression:\n    expr_true_suite</code></pre>\n<ul>\n<li><p>if 语句的 <code>expr_true_suite</code> 代码块只有当条件表达式 <code>expression</code> 结果为真时才执行，否则将继续执行紧跟在该代码块后面的语句。</p>\n</li>\n<li><p>单个 if 语句中的 <code>expression</code> 条件表达式可以通过布尔操作符 <code>and</code>，<code>or</code>和<code>not</code> 实现多重条件判断。</p>\n</li>\n<li><p>【例子】</p>\n<p>[38]:</p>\n<pre><code>if 2 &gt; 1 and not 2 &gt; 3:\n    print(&#39;Correct Judgement!&#39;)\n\n# Correct Judgement!</code></pre>\n</li>\n</ul>\n</li>\n<li><h2 id=\"2-if-else-语句\"><a href=\"#2-if-else-语句\" class=\"headerlink\" title=\"2. if - else 语句\"></a>2. if - else 语句</h2><pre><code class=\"python\">if expression:\n    expr_true_suite\nelse:\n    expr_false_suite</code></pre>\n<ul>\n<li>Python 提供与 if 搭配使用的 else，如果 if 语句的条件表达式结果布尔值为假，那么程序将执行 else 语句后的代码。</li>\n</ul>\n<p>【例子】</p>\n<p>[39]:</p>\n<pre><code>temp = input(&quot;猜一猜小姐姐想的是哪个数字？&quot;)\nguess = int(temp) # input 函数将接收的任何数据类型都默认为 str。\nif guess == 666:\n    print(&quot;你太了解小姐姐的心思了！&quot;)\n    print(&quot;哼，猜对也没有奖励！&quot;)\nelse:\n    print(&quot;猜错了，小姐姐现在心里想的是666！&quot;)\nprint(&quot;游戏结束，不玩儿啦！&quot;)\n猜一猜小姐姐想的是哪个数字？666\n你太了解小姐姐的心思了！\n哼，猜对也没有奖励！\n游戏结束，不玩儿啦！</code></pre>\n<p><code>if</code>语句支持嵌套，即在一个<code>if</code>语句中嵌入另一个<code>if</code>语句，从而构成不同层次的选择结构。</p>\n<p>【例子】Python 使用缩进而不是大括号来标记代码块边界，因此要特别注意<code>else</code>的悬挂问题。</p>\n<p>[40]:</p>\n<pre><code>hi = 6\nif hi &gt; 2:\n    if hi &gt; 7:\n        print(&#39;好棒!好棒!&#39;)\nelse:\n    print(&#39;切~&#39;)\n\n# 无输出</code></pre>\n<p>【例子】</p>\n<p>[41]:</p>\n<pre><code>temp = input(&quot;猜一猜小姐姐想的是哪个数字？&quot;)\nguess = int(temp)\nif guess &gt; 8:\n    print(&quot;大了，大了&quot;)\nelse:\n    if guess == 8:\n        print(&quot;你太了解小姐姐的心思了！&quot;)\n        print(&quot;哼，猜对也没有奖励！&quot;)\n    else:\n        print(&quot;小了，小了&quot;)\nprint(&quot;游戏结束，不玩儿啦！&quot;)\n猜一猜小姐姐想的是哪个数字？8\n你太了解小姐姐的心思了！\n哼，猜对也没有奖励！\n游戏结束，不玩儿啦！</code></pre>\n<h2 id=\"3-if-elif-else-语句\"><a href=\"#3-if-elif-else-语句\" class=\"headerlink\" title=\"3. if - elif - else 语句\"></a>3. if - elif - else 语句</h2><pre><code class=\"python\">if expression1:\n    expr1_true_suite\nelif expression2:\n    expr2_true_suite\n    .\n    .\nelif expressionN:\n    exprN_true_suite\nelse:\n    expr_false_suite</code></pre>\n<ul>\n<li>elif 语句即为 else if，用来检查多个表达式是否为真，并在为真时执行特定代码块中的代码。</li>\n</ul>\n<p>【例子】</p>\n<p>[42]:</p>\n<pre><code>temp = input(&#39;请输入成绩:&#39;)\nsource = int(temp)\nif 100 &gt;= source &gt;= 90:\n    print(&#39;A&#39;)\nelif 90 &gt; source &gt;= 80:\n    print(&#39;B&#39;)\nelif 80 &gt; source &gt;= 60:\n    print(&#39;C&#39;)\nelif 60 &gt; source &gt;= 0:\n    print(&#39;D&#39;)\nelse:\n    print(&#39;输入错误！&#39;)\n请输入成绩:99\nA</code></pre>\n<h2 id=\"4-assert-关键词\"><a href=\"#4-assert-关键词\" class=\"headerlink\" title=\"4. assert 关键词\"></a>4. assert 关键词</h2><ul>\n<li><code>assert</code>这个关键词我们称之为“断言”，当这个关键词后边的条件为 False 时，程序自动崩溃并抛出<code>AssertionError</code>的异常。</li>\n</ul>\n<p>【例子】</p>\n<p>[ ]:</p>\n<pre><code>my_list = [&#39;lsgogroup&#39;]\nmy_list.pop(0)\nassert len(my_list) &gt; 0\n\n# AssertionError</code></pre>\n<p>【例子】在进行单元测试时，可以用来在程序中置入检查点，只有条件为 True 才能让程序正常工作。</p>\n<p>[ ]:</p>\n<pre><code>assert 3 &gt; 7\n\n# AssertionError</code></pre>\n<h1 id=\"循环语句\"><a href=\"#循环语句\" class=\"headerlink\" title=\"循环语句\"></a>循环语句</h1><h2 id=\"1-while-循环\"><a href=\"#1-while-循环\" class=\"headerlink\" title=\"1. while 循环\"></a>1. while 循环</h2><p><code>while</code>语句最基本的形式包括一个位于顶部的布尔表达式，一个或多个属于<code>while</code>代码块的缩进语句。</p>\n<pre><code class=\"python\">while 布尔表达式:\n    代码块</code></pre>\n<p><code>while</code>循环的代码块会一直循环执行，直到布尔表达式的值为布尔假。</p>\n<p>如果布尔表达式不带有<code>&lt;、&gt;、==、！=、in、not in</code>等运算符，仅仅给出数值之类的条件，也是可以的。当<code>while</code>后写入一个非零整数时，视为真值，执行循环体；写入<code>0</code>时，视为假值，不执行循环体。也可以写入<code>str、list</code>或任何序列，长度非零则视为真值，执行循环体；否则视为假值，不执行循环体。</p>\n<p>【例子】</p>\n<p>[44]:</p>\n<pre><code>count = 0\nwhile count &lt; 3:\n    temp = input(&quot;猜一猜小姐姐想的是哪个数字？&quot;)\n    guess = int(temp)\n    if guess &gt; 8:\n        print(&quot;大了，大了&quot;)\n    else:\n        if guess == 8:\n            print(&quot;你太了解小姐姐的心思了！&quot;)\n            print(&quot;哼，猜对也没有奖励！&quot;)\n            count = 3\n        else:\n            print(&quot;小了，小了&quot;)\n    count = count + 1\nprint(&quot;游戏结束，不玩儿啦！&quot;)\n猜一猜小姐姐想的是哪个数字？8\n你太了解小姐姐的心思了！\n哼，猜对也没有奖励！\n游戏结束，不玩儿啦！</code></pre>\n<p>【例子】布尔表达式返回0，循环终止。</p>\n<p>[45]:</p>\n<pre><code>string = &#39;abcd&#39;\nwhile string:\n    print(string)\n    string = string[1:]\n\n# abcd\n# bcd\n# cd\n# d\nabcd\nbcd\ncd\nd</code></pre>\n<hr>\n<h2 id=\"2-while-else-循环\"><a href=\"#2-while-else-循环\" class=\"headerlink\" title=\"2. while - else 循环\"></a>2. while - else 循环</h2><pre><code class=\"python\">while 布尔表达式:\n    代码块\nelse:\n    代码块</code></pre>\n<p>当<code>while</code>循环正常执行完的情况下，执行<code>else</code>输出，如果<code>while</code>循环中执行了跳出循环的语句，比如 <code>break</code>，将不执行<code>else</code>代码块的内容。</p>\n<p>【例子】</p>\n<p>[46]:</p>\n<pre><code>count = 0\nwhile count &lt; 5:\n    print(&quot;%d is  less than 5&quot; % count)\n    count = count + 1\nelse:\n    print(&quot;%d is not less than 5&quot; % count)\n\n# 0 is  less than 5\n# 1 is  less than 5\n# 2 is  less than 5\n# 3 is  less than 5\n# 4 is  less than 5\n# 5 is not less than 5\n0 is  less than 5\n1 is  less than 5\n2 is  less than 5\n3 is  less than 5\n4 is  less than 5\n5 is not less than 5</code></pre>\n<p>【例子】</p>\n<p>[47]:</p>\n<pre><code>count = 0\nwhile count &lt; 5:\n    print(&quot;%d is  less than 5&quot; % count)\n    count = 6\n    break\nelse:\n    print(&quot;%d is not less than 5&quot; % count)\n\n# 0 is  less than 5\n0 is  less than 5</code></pre>\n<hr>\n<h2 id=\"3-for-循环\"><a href=\"#3-for-循环\" class=\"headerlink\" title=\"3. for 循环\"></a>3. for 循环</h2><p><code>for</code>循环是迭代循环，在Python中相当于一个通用的序列迭代器，可以遍历任何有序序列，如<code>str、list、tuple</code>等，也可以遍历任何可迭代对象，如<code>dict</code>。</p>\n<pre><code class=\"python\">for 迭代变量 in 可迭代对象:\n    代码块</code></pre>\n<p>每次循环，迭代变量被设置为可迭代对象的当前元素，提供给代码块使用。</p>\n<p>【例子】</p>\n<p>[48]:</p>\n<pre><code>for i in &#39;ILoveLSGO&#39;:\n    print(i, end=&#39; &#39;)  # 不换行输出\n\n# I L o v e L S G O\nI L o v e L S G O </code></pre>\n<p>【例子】</p>\n<p>[49]:</p>\n<pre><code>member = [&#39;张三&#39;, &#39;李四&#39;, &#39;刘德华&#39;, &#39;刘六&#39;, &#39;周润发&#39;]\nfor each in member:\n    print(each)\n\n# 张三\n# 李四\n# 刘德华\n# 刘六\n# 周润发\n\nfor i in range(len(member)):\n    print(member[i])\n\n# 张三\n# 李四\n# 刘德华\n# 刘六\n# 周润发\n张三\n李四\n刘德华\n刘六\n周润发\n张三\n李四\n刘德华\n刘六\n周润发</code></pre>\n<p>【例子】</p>\n<p>[50]:</p>\n<pre><code>dic = &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;\n\nfor key, value in dic.items():\n    print(key, value, sep=&#39;:&#39;, end=&#39; &#39;)\n\n# a:1 b:2 c:3 d:4 \na:1 b:2 c:3 d:4 </code></pre>\n<p>【例子】</p>\n<p>[51]:</p>\n<pre><code>dic = &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;\n\nfor key in dic.keys():\n    print(key, end=&#39; &#39;)\n\n# a b c d \na b c d </code></pre>\n<p>【例子】</p>\n<p>[52]:</p>\n<pre><code>dic = &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;\n\nfor value in dic.values():\n    print(value, end=&#39; &#39;)\n\n# 1 2 3 4\n1 2 3 4 </code></pre>\n<hr>\n<h2 id=\"4-for-else-循环\"><a href=\"#4-for-else-循环\" class=\"headerlink\" title=\"4. for - else 循环\"></a>4. for - else 循环</h2><pre><code class=\"python\">for 迭代变量 in 可迭代对象:\n    代码块\nelse:\n    代码块</code></pre>\n<p>当<code>for</code>循环正常执行完的情况下，执行<code>else</code>输出，如果<code>for</code>循环中执行了跳出循环的语句，比如 <code>break</code>，将不执行<code>else</code>代码块的内容，与<code>while - else</code>语句一样。</p>\n<p>【例子】</p>\n<p>[53]:</p>\n<pre><code>for num in range(10, 20):  # 迭代 10 到 20 之间的数字\n    for i in range(2, num):  # 根据因子迭代\n        if num % i == 0:  # 确定第一个因子\n            j = num / i  # 计算第二个因子\n            print(&#39;%d 等于 %d * %d&#39; % (num, i, j))\n            break  # 跳出当前循环\n    else:  # 循环的 else 部分\n        print(num, &#39;是一个质数&#39;)\n\n# 10 等于 2 * 5\n# 11 是一个质数\n# 12 等于 2 * 6\n# 13 是一个质数\n# 14 等于 2 * 7\n# 15 等于 3 * 5\n# 16 等于 2 * 8\n# 17 是一个质数\n# 18 等于 2 * 9\n# 19 是一个质数\n10 等于 2 * 5\n11 是一个质数\n12 等于 2 * 6\n13 是一个质数\n14 等于 2 * 7\n15 等于 3 * 5\n16 等于 2 * 8\n17 是一个质数\n18 等于 2 * 9\n19 是一个质数</code></pre>\n<hr>\n<h2 id=\"5-range-函数\"><a href=\"#5-range-函数\" class=\"headerlink\" title=\"5. range() 函数\"></a>5. range() 函数</h2><pre><code class=\"python\">range([start,] stop[, step=1])</code></pre>\n<ul>\n<li>这个BIF（Built-in functions）有三个参数，其中用中括号括起来的两个表示这两个参数是可选的。</li>\n<li><code>step=1</code> 表示第三个参数的默认值是1。</li>\n<li><code>range</code> 这个BIF的作用是生成一个从<code>start</code>参数的值开始到<code>stop</code>参数的值结束的数字序列，该序列包含<code>start</code>的值但不包含<code>stop</code>的值。</li>\n</ul>\n<p>【例子】</p>\n<p>[54]:</p>\n<pre><code>for i in range(2, 9):  # 不包含9\n    print(i)\n\n# 2\n# 3\n# 4\n# 5\n# 6\n# 7\n# 8\n2\n3\n4\n5\n6\n7\n8</code></pre>\n<p>【例子】</p>\n<p>[55]:</p>\n<pre><code>for i in range(1, 10, 2):\n    print(i)\n\n# 1\n# 3\n# 5\n# 7\n# 9\n1\n3\n5\n7\n9</code></pre>\n<hr>\n<h2 id=\"6-enumerate-函数\"><a href=\"#6-enumerate-函数\" class=\"headerlink\" title=\"6. enumerate()函数\"></a>6. enumerate()函数</h2><pre><code class=\"python\">enumerate(sequence, [start=0])</code></pre>\n<ul>\n<li>sequence：一个序列、迭代器或其他支持迭代对象。</li>\n<li>start：下标起始位置。</li>\n<li>返回 enumerate(枚举) 对象</li>\n</ul>\n<p>【例子】</p>\n<p>[56]:</p>\n<pre><code>seasons = [&#39;Spring&#39;, &#39;Summer&#39;, &#39;Fall&#39;, &#39;Winter&#39;]\nlst = list(enumerate(seasons))\nprint(lst)\n# [(0, &#39;Spring&#39;), (1, &#39;Summer&#39;), (2, &#39;Fall&#39;), (3, &#39;Winter&#39;)]\nlst = list(enumerate(seasons, start=1))  # 下标从 1 开始\nprint(lst)\n# [(1, &#39;Spring&#39;), (2, &#39;Summer&#39;), (3, &#39;Fall&#39;), (4, &#39;Winter&#39;)]\n[(0, &#39;Spring&#39;), (1, &#39;Summer&#39;), (2, &#39;Fall&#39;), (3, &#39;Winter&#39;)]\n[(1, &#39;Spring&#39;), (2, &#39;Summer&#39;), (3, &#39;Fall&#39;), (4, &#39;Winter&#39;)]</code></pre>\n<p><code>enumerate()</code>与 for 循环的结合使用。</p>\n<pre><code class=\"python\">for i, a in enumerate(A)\n    do something with a  </code></pre>\n<p>用 <code>enumerate(A)</code> 不仅返回了 <code>A</code> 中的元素，还顺便给该元素一个索引值 (默认从 0 开始)。此外，用 <code>enumerate(A, j)</code> 还可以确定索引起始值为 <code>j</code>。</p>\n<p>【例子】</p>\n<p>[57]:</p>\n<pre><code>languages = [&#39;Python&#39;, &#39;R&#39;, &#39;Matlab&#39;, &#39;C++&#39;]\nfor language in languages:\n    print(&#39;I love&#39;, language)\nprint(&#39;Done!&#39;)\n# I love Python\n# I love R\n# I love Matlab\n# I love C++\n# Done!\n\n</code></pre>\n</li>\n</ul>\n<pre><code>for i, language in enumerate(languages, 2):\n    print(i, &#39;I love&#39;, language)\nprint(&#39;Done!&#39;)\n# 2 I love Python\n# 3 I love R\n# 4 I love Matlab\n# 5 I love C++\n# Done!\nI love Python\nI love R\nI love Matlab\nI love C++\nDone!\n2 I love Python\n3 I love R\n4 I love Matlab\n5 I love C++\nDone!\n```\n\n------\n\n## 7. break 语句\n\n`break`语句可以跳出当前所在层的循环。\n\n【例子】\n\n[59]:\n\n```\nimport random\nsecret = random.randint(1, 10) #[1,10]之间的随机数\n\nwhile True:\n    temp = input(&quot;猜一猜小姐姐想的是哪个数字？&quot;)\n    guess = int(temp)\n    if guess &gt; secret:\n        print(&quot;大了，大了&quot;)\n    else:\n        if guess == secret:\n            print(&quot;你太了解小姐姐的心思了！&quot;)\n            print(&quot;哼，猜对也没有奖励！&quot;)\n            break\n        else:\n            print(&quot;小了，小了&quot;)\nprint(&quot;游戏结束，不玩儿啦！&quot;)\n猜一猜小姐姐想的是哪个数字？8\n你太了解小姐姐的心思了！\n哼，猜对也没有奖励！\n游戏结束，不玩儿啦！\n```\n\n------\n\n## 8. continue 语句\n\n`continue`终止本轮循环并开始下一轮循环。\n\n【例子】\n\n[60]:\n\n```\nfor i in range(10):\n    if i % 2 != 0:\n        print(i)\n        continue\n    i += 2\n    print(i)\n\n# 2\n# 1\n# 4\n# 3\n# 6\n# 5\n# 8\n# 7\n# 10\n# 9\n2\n1\n4\n3\n6\n5\n8\n7\n10\n9\n```\n\n------\n\n## 9. pass 语句\n\n`pass` 语句的意思是“不做任何事”，如果你在需要有语句的地方不写任何语句，那么解释器会提示出错，而 `pass` 语句就是用来解决这些问题的。\n\n【例子】\n\n```python\ndef a_func():\n\n# SyntaxError: unexpected EOF while parsing\n```\n\n【例子】\n\n```python\ndef a_func():\n    pass\n```\n\n`pass`是空语句，不做任何操作，只起到占位的作用，其作用是为了保持程序结构的完整性。尽管`pass`语句不做任何操作，但如果暂时不确定要在一个位置放上什么样的代码，可以先放置一个`pass`语句，让代码可以正常运行。\n\n------\n\n## 10. 推导式\n\n**列表推导式**\n\n```python\n[ expr for value in collection [if condition] ]\n```\n\n【例子】\n\n[61]:\n\n```\nx = [-4, -2, 0, 2, 4]\ny = [a * 2 for a in x]\nprint(y)\n# [-8, -4, 0, 4, 8]\n[-8, -4, 0, 4, 8]\n```\n\n【例子】\n\n[63]:\n\n```\nx = [i ** 2 for i in range(1, 10)]\nprint(x)\n# [1, 4, 9, 16, 25, 36, 49, 64, 81]\n[1, 4, 9, 16, 25, 36, 49, 64, 81]\n```\n\n【例子】\n\n[64]:\n\n```\nx = [(i, i ** 2) for i in range(6)]\nprint(x)\n\n# [(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]\n[(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]\n```\n\n【例子】\n\n[65]:\n\n```\nx = [i for i in range(100) if (i % 2) != 0 and (i % 3) == 0]\nprint(x)\n\n# [3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93, 99]\n[3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93, 99]\n```\n\n【例子】\n\n[66]:\n\n```\na = [(i, j) for i in range(0, 3) for j in range(0, 3)]\nprint(a)\n\n# [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]\n[(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]\n```\n\n【例子】\n\n[67]:\n\n```\nx = [[i, j] for i in range(0, 3) for j in range(0, 3)]\nprint(x)\n# [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]\n\nx[0][0] = 10\nprint(x)\n# [[10, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]\n[[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]\n[[10, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]\n```\n\n【例子】\n\n[68]:\n\n```\na = [(i, j) for i in range(0, 3) if i &lt; 1 for j in range(0, 3) if j &gt; 1]\nprint(a)\n\n# [(0, 2)]\n[(0, 2)]\n```\n\n**元组推导式**\n\n```python\n( expr for value in collection [if condition] )\n```\n\n【例子】\n\n[69]:\n\n```\na = (x for x in range(10))\nprint(a)\n\n# &lt;generator object &lt;genexpr&gt; at 0x0000025BE511CC48&gt;\n\nprint(tuple(a))\n\n# (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n&lt;generator object &lt;genexpr&gt; at 0x0000014CEC2E28B8&gt;\n(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n```\n\n**字典推导式**\n\n```python\n&#123; key_expr: value_expr for value in collection [if condition] &#125;\n```\n\n【例子】\n\n[70]:\n\n```\nb = &#123;i: i % 2 == 0 for i in range(10) if i % 3 == 0&#125;\nprint(b)\n# &#123;0: True, 3: False, 6: True, 9: False&#125;\n&#123;0: True, 3: False, 6: True, 9: False&#125;\n```\n\n**集合推导式**\n\n```\n&#123; expr for value in collection [if condition] &#125;\n```\n\n【例子】\n\n[71]:\n\n```\nc = &#123;i for i in [1, 2, 3, 4, 5, 5, 6, 4, 3, 2, 1]&#125;\nprint(c)\n# &#123;1, 2, 3, 4, 5, 6&#125;\n&#123;1, 2, 3, 4, 5, 6&#125;\n```\n\n**其它**\n\n- `next(iterator[, default])` Return the next item from the iterator. If default is given and the iterator is exhausted, it is returned instead of raising StopIteration.\n\n【例子】\n\n[72]:\n\n```\ne = (i for i in range(10))\nprint(e)\n# &lt;generator object &lt;genexpr&gt; at 0x0000007A0B8D01B0&gt;\n\nprint(next(e))  # 0\nprint(next(e))  # 1\n\nfor each in e:\n    print(each, end=&#39; &#39;)\n\n# 2 3 4 5 6 7 8 9\n&lt;generator object &lt;genexpr&gt; at 0x0000014CEC389C78&gt;\n0\n1\n2 3 4 5 6 7 8 9 \n```\n\n【例子】\n\n[73]:\n\n```\ns = sum([i for i in range(101)])\nprint(s)  # 5050\ns = sum((i for i in range(101)))\nprint(s)  # 5050\n5050\n5050\n```\n\n# 异常处理\n\n异常就是运行期检测到的错误。计算机语言针对可能出现的错误定义了异常类型，某种错误引发对应的异常时，异常处理程序将被启动，从而恢复程序的正常运行。\n\n## 1. Python 标准异常总结\n\n- BaseException：所有异常的 **基类**\n- Exception：常规异常的 **基类**\n- StandardError：所有的内建标准异常的基类\n- ArithmeticError：所有数值计算异常的基类\n- FloatingPointError：浮点计算异常\n- OverflowError：数值运算超出最大限制\n- ZeroDivisionError：除数为零\n- AssertionError：断言语句（assert）失败\n- AttributeError：尝试访问未知的对象属性\n- EOFError：没有内建输入，到达EOF标记\n- EnvironmentError：操作系统异常的基类\n- IOError：输入/输出操作失败\n- OSError：操作系统产生的异常（例如打开一个不存在的文件）\n- WindowsError：系统调用失败\n- ImportError：导入模块失败的时候\n- KeyboardInterrupt：用户中断执行\n- LookupError：无效数据查询的基类\n- IndexError：索引超出序列的范围\n- KeyError：字典中查找一个不存在的关键字\n- MemoryError：内存溢出（可通过删除对象释放内存）\n- NameError：尝试访问一个不存在的变量\n- UnboundLocalError：访问未初始化的本地变量\n- ReferenceError：弱引用试图访问已经垃圾回收了的对象\n- RuntimeError：一般的运行时异常\n- NotImplementedError：尚未实现的方法\n- SyntaxError：语法错误导致的异常\n- IndentationError：缩进错误导致的异常\n- TabError：Tab和空格混用\n- SystemError：一般的解释器系统异常\n- TypeError：不同类型间的无效操作\n- ValueError：传入无效的参数\n- UnicodeError：Unicode相关的异常\n- UnicodeDecodeError：Unicode解码时的异常\n- UnicodeEncodeError：Unicode编码错误导致的异常\n- UnicodeTranslateError：Unicode转换错误导致的异常\n\n异常体系内部有层次关系，Python异常体系中的部分关系如下所示：\n\n![Image](https://img-blog.csdnimg.cn/20200710131404548.png)\n\n------\n\n## 2. Python标准警告总结\n\n- Warning：警告的基类\n- DeprecationWarning：关于被弃用的特征的警告\n- FutureWarning：关于构造将来语义会有改变的警告\n- UserWarning：用户代码生成的警告\n- PendingDeprecationWarning：关于特性将会被废弃的警告\n- RuntimeWarning：可疑的运行时行为(runtime behavior)的警告\n- SyntaxWarning：可疑语法的警告\n- ImportWarning：用于在导入模块过程中触发的警告\n- UnicodeWarning：与Unicode相关的警告\n- BytesWarning：与字节或字节码相关的警告\n- ResourceWarning：与资源使用相关的警告\n\n------\n\n## 3. try - except 语句\n\n```python\ntry:\n    检测范围\nexcept Exception[as reason]:\n    出现异常后的处理代码\n```\n\ntry 语句按照如下方式工作：\n\n- 首先，执行`try`子句（在关键字`try`和关键字`except`之间的语句）\n- 如果没有异常发生，忽略`except`子句，`try`子句执行后结束。\n- 如果在执行`try`子句的过程中发生了异常，那么`try`子句余下的部分将被忽略。如果异常的类型和`except`之后的名称相符，那么对应的`except`子句将被执行。最后执行`try - except`语句之后的代码。\n- 如果一个异常没有与任何的`except`匹配，那么这个异常将会传递给上层的`try`中。\n\n【例子】\n\n[2]:\n\n```\ntry:\n    f = open(&#39;test.txt&#39;)\n    print(f.read())\n    f.close()\nexcept OSError:\n    print(&#39;打开文件出错&#39;)\n\n# 打开文件出错\n打开文件出错\n```\n\n【例子】\n\n[3]:\n\n```\ntry:\n    f = open(&#39;test.txt&#39;)\n    print(f.read())\n    f.close()\nexcept OSError as error:\n    print(&#39;打开文件出错\\n原因是：&#39; + str(error))\n\n# 打开文件出错\n# 原因是：[Errno 2] No such file or directory: &#39;test.txt&#39;\n打开文件出错\n原因是：[Errno 2] No such file or directory: &#39;test.txt&#39;\n```\n\n一个`try`语句可能包含多个`except`子句，分别来处理不同的特定的异常。最多只有一个分支会被执行。\n\n【例子】\n\n[4]:\n\n```\ntry:\n    int(&quot;abc&quot;)\n    s = 1 + &#39;1&#39;\n    f = open(&#39;test.txt&#39;)\n    print(f.read())\n    f.close()\nexcept OSError as error:\n    print(&#39;打开文件出错\\n原因是：&#39; + str(error))\nexcept TypeError as error:\n    print(&#39;类型出错\\n原因是：&#39; + str(error))\nexcept ValueError as error:\n    print(&#39;数值出错\\n原因是：&#39; + str(error))\n\n# 数值出错\n# 原因是：invalid literal for int() with base 10: &#39;abc&#39;\n数值出错\n原因是：invalid literal for int() with base 10: &#39;abc&#39;\n```\n\n【例子】\n\n[5]:\n\n```\ndict1 = &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;v&#39;: 22&#125;\ntry:\n    x = dict1[&#39;y&#39;]\nexcept LookupError:\n    print(&#39;查询错误&#39;)\nexcept KeyError:\n    print(&#39;键错误&#39;)\nelse:\n    print(x)\n\n# 查询错误\n查询错误\n```\n\n`try-except-else`语句尝试查询不在`dict`中的键值对，从而引发了异常。这一异常准确地说应属于`KeyError`，但由于`KeyError`是`LookupError`的子类，且将`LookupError`置于`KeyError`之前，因此程序优先执行该`except`代码块。所以，使用多个`except`代码块时，必须坚持对其规范排序，要从最具针对性的异常到最通用的异常。\n\n【例子】\n\n[6]:\n\n```\ndict1 = &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;v&#39;: 22&#125;\ntry:\n    x = dict1[&#39;y&#39;]\nexcept KeyError:\n    print(&#39;键错误&#39;)\nexcept LookupError:\n    print(&#39;查询错误&#39;)\nelse:\n    print(x)\n\n# 键错误\n键错误\n```\n\n【例子】一个 `except` 子句可以同时处理多个异常，这些异常将被放在一个括号里成为一个元组。\n\n[7]:\n\n```\ntry:\n    s = 1 + &#39;1&#39;\n    int(&quot;abc&quot;)\n    f = open(&#39;test.txt&#39;)\n    print(f.read())\n    f.close()\nexcept (OSError, TypeError, ValueError) as error:\n    print(&#39;出错了！\\n原因是：&#39; + str(error))\n\n# 出错了！\n# 原因是：unsupported operand type(s) for +: &#39;int&#39; and &#39;str&#39;\n出错了！\n原因是：unsupported operand type(s) for +: &#39;int&#39; and &#39;str&#39;\n```\n\n------\n\n## 4. try - except - finally 语句\n\ntry: 检测范围 except Exception[as reason]: 出现异常后的处理代码 finally: 无论如何都会被执行的代码\n\n不管`try`子句里面有没有发生异常，`finally`子句都会执行。\n\n【例子】如果一个异常在`try`子句里被抛出，而又没有任何的`except`把它截住，那么这个异常会在`finally`子句执行后被抛出。\n\n[10]:\n\n```\ndef divide(x, y):\n    try:\n        result = x / y\n        print(&quot;result is&quot;, result)\n    except ZeroDivisionError:\n        print(&quot;division by zero!&quot;)\n    finally:\n        print(&quot;executing finally clause&quot;)\n\n\ndivide(2, 1)\n# result is 2.0\n# executing finally clause\ndivide(2, 0)\n# division by zero!\n# executing finally clause\ndivide(&quot;2&quot;, &quot;1&quot;)\n# executing finally clause\n# TypeError: unsupported operand type(s) for /: &#39;str&#39; and &#39;str&#39;\nresult is 2.0\nexecuting finally clause\ndivision by zero!\nexecuting finally clause\n```\n\n------\n\n## 5. try - except - else 语句\n\n如果在`try`子句执行时没有发生异常，Python将执行`else`语句后的语句。\n\n```python\ntry:\n    检测范围\nexcept:\n    出现异常后的处理代码\nelse:\n    如果没有异常执行这块代码\n```\n\n使用`except`而不带任何异常类型，这不是一个很好的方式，我们不能通过该程序识别出具体的异常信息，因为它捕获所有的异常。\n\ntry: 检测范围 except(Exception1[, Exception2[,...ExceptionN]]]): 发生以上多个异常中的一个，执行这块代码 else: 如果没有异常执行这块代码\n\n【例子】\n\n[12]:\n\n```\ntry:\n    fh = open(&quot;testfile.txt&quot;, &quot;w&quot;)\n    fh.write(&quot;这是一个测试文件，用于测试异常!!&quot;)\nexcept IOError:\n    print(&quot;Error: 没有找到文件或读取文件失败&quot;)\nelse:\n    print(&quot;内容写入文件成功&quot;)\n    fh.close()\n\n# 内容写入文件成功\n内容写入文件成功\n```\n\n注意：`else`语句的存在必须以`except`语句的存在为前提，在没有`except`语句的`try`语句中使用`else`语句，会引发语法错误。\n\n------\n\n## 6. raise语句\n\nPython 使用`raise`语句抛出一个指定的异常。\n\n【例子】\n\n[13]:\n\n```\ntry:\n    raise NameError(&#39;HiThere&#39;)\nexcept NameError:\n    print(&#39;An exception flew by!&#39;)\n\n# An exception flew by!\nAn exception flew by!\n```</code></pre>\n",
            "tags": []
        }
    ]
}