<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://alanosy.github.io</id>
    <title>Alan • Posts by &#34;python&#34; category</title>
    <link href="https://alanosy.github.io" />
    <updated>2021-01-26T05:39:02.000Z</updated>
    <entry>
        <id>https://alanosy.github.io/2021/01/26/python-day-1/</id>
        <title>python_day_1</title>
        <link rel="alternate" href="https://alanosy.github.io/2021/01/26/python-day-1/"/>
        <content type="html">&lt;h1 id=&#34;简介&#34;&gt;&lt;a href=&#34;#简介&#34; class=&#34;headerlink&#34; title=&#34;简介&#34;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Python 是一种通用编程语言，其在科学计算和机器学习领域具有广泛的应用。如果我们打算利用 Python 来执行机器学习，那么对 Python 有一些基本的了解就是至关重要的。本 Python 入门系列体验就是为这样的初学者精心准备的。&lt;/p&gt;
&lt;p&gt;本实验包括以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;变量、运算符与数据类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;注释&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在python中，#表示注释，作用于整行&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bashs&#34;&gt;print(&amp;quot;Hello World&amp;quot;)
#我的第一个程序&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中”我的第一个程序“在代码不起运行作用&lt;/p&gt;
&lt;p&gt;另外还有多行注释用```来标注&lt;/p&gt;
&lt;p&gt;例如&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;​```
这是一个多引号注释
用于注释多行
···
print(&amp;quot;Hello china&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;运算符&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;算术运算符&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;大于&lt;/th&gt;
&lt;th&gt;&lt;code&gt;2 &amp;gt; 1&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;大于等于&lt;/td&gt;
&lt;td&gt;&lt;code&gt;2 &amp;gt;= 4&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;小于&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1 &amp;lt; 2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;小于等于&lt;/td&gt;
&lt;td&gt;&lt;code&gt;5 &amp;lt;= 2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;==&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等于&lt;/td&gt;
&lt;td&gt;&lt;code&gt;3 == 4&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;!=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不等于&lt;/td&gt;
&lt;td&gt;&lt;code&gt;3 != 5&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;print(1 + 1)  # 2
print(2 - 1)  # 1
print(3 * 4)  # 12
print(3 / 4)  # 0.75
print(3 // 4)  # 0
print(3 % 4)  # 3
print(2 ** 3)  # 8&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;比较运算符&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;and&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;与&lt;/th&gt;
&lt;th&gt;&lt;code&gt;(3 &amp;gt; 2) and (3 &amp;lt; 5)&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;or&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;或&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(1 &amp;gt; 3) or (9 &amp;lt; 2)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;not&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非&lt;/td&gt;
&lt;td&gt;&lt;code&gt;not (2 &amp;gt; 1)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;print(2 &amp;gt; 1)  # True
print(2 &amp;gt;= 4)  # False
print(1 &amp;lt; 2)  # True
print(5 &amp;lt;= 2)  # False
print(3 == 4)  # False
print(3 != 5)  # True&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;逻辑运算符&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;and&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;与&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;code&gt;(3 &amp;gt; 2) and (3 &amp;lt; 5)&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;or&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;或&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;(1 &amp;gt; 3) or (9 &amp;lt; 2)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;not&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;code&gt;not (2 &amp;gt; 1)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;print((3 &amp;gt; 2) and (3 &amp;lt; 5))  # True
print((1 &amp;gt; 3) or (9 &amp;lt; 2))  # False
print(not (2 &amp;gt; 1))  # False&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;位运算符&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;~&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;按位取反&lt;/th&gt;
&lt;th&gt;&lt;code&gt;~4&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;按位与&lt;/td&gt;
&lt;td&gt;&lt;code&gt;4 &amp;amp; 5&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;`&lt;/td&gt;
&lt;td&gt;`&lt;/td&gt;
&lt;td&gt;按位或&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;^&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;按位异或&lt;/td&gt;
&lt;td&gt;&lt;code&gt;4 ^ 5&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左移&lt;/td&gt;
&lt;td&gt;&lt;code&gt;4 &amp;lt;&amp;lt; 2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;右移&lt;/td&gt;
&lt;td&gt;&lt;code&gt;4 &amp;gt;&amp;gt; 2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;print(bin(4))  # 0b100
print(bin(5))  # 0b101
print(bin(~4), ~4)  # -0b101 -5
print(bin(4 &amp;amp; 5), 4 &amp;amp; 5)  # 0b100 4
print(bin(4 | 5), 4 | 5)  # 0b101 5
print(bin(4 ^ 5), 4 ^ 5)  # 0b1 1
print(bin(4 &amp;lt;&amp;lt; 2), 4 &amp;lt;&amp;lt; 2)  # 0b10000 16
print(bin(4 &amp;gt;&amp;gt; 2), 4 &amp;gt;&amp;gt; 2)  # 0b1 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;三元运算符&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;x, y = 4, 5
if x &amp;lt; y:
    small = x
else:
    small = y

print(small)  # 4&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;**其他运算符**

| `in`     | 存在   | `&amp;#39;A&amp;#39; in [&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;]`     |
| -------- | ------ | ---------------------------- |
| `not in` | 不存在 | `&amp;#39;h&amp;#39; not in [&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;]` |
| `is`     | 是     | `&amp;quot;hello&amp;quot; is &amp;quot;hello&amp;quot;`         |
| `not is` | 不是   | `&amp;quot;hello&amp;quot; is not &amp;quot;hello&amp;quot;`     |

例子

``` python
letters = [&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;]
if &amp;#39;A&amp;#39; in letters:
    print(&amp;#39;A&amp;#39; + &amp;#39; exists&amp;#39;)
if &amp;#39;h&amp;#39; not in letters:
    print(&amp;#39;h&amp;#39; + &amp;#39; not exists&amp;#39;)

# A exists
# h not exists
```

``` python
a = &amp;quot;hello&amp;quot;
b = &amp;quot;hello&amp;quot;
print(a is b, a == b)  # True True
print(a is not b, a != b)  # False False
```

``` python
a = [&amp;quot;hello&amp;quot;]
b = [&amp;quot;hello&amp;quot;]
print(a is b, a == b)  # False True
print(a is not b, a != b)  # True False
```



注意：

- is, is not 对比的是两个变量的内存地址
- ==, != 对比的是两个变量的值
- 比较的两个变量，指向的都是地址不可变的类型（str等），那么is，is not 和 ==，！= 是完全等价的。
- 对比的两个变量，指向的是地址可变的类型（list，dict，tuple等），则两者是有区别的。

**运算符的优先级**

| **                | 指数（最高优先级）       |
| ----------------- | ------------------------ |
| ~+-               | 按位翻转，一元加号和减号 |
| * / % //          | 乘，除，取模和取整除）   |
| + -               | 加法减法                 |
| &amp;gt;&amp;gt; &amp;lt;&amp;lt;             | 右移，左移运算符         |
| &amp;amp;                 | 位‘AND’                  |
| ^\|               | 位运算符                 |
| &amp;lt;=&amp;lt;&amp;gt;&amp;gt;=            | 比较运算符               |
| &amp;lt;&amp;gt;==!=            | 等于运算符               |
| =%=/=//=-=+=*=**= | 赋值运算符               |
| is is not         | 身份运算符               |
| in not in         | 成员运算符               |
| not and or        | 逻辑运算符               |

例子

``` python
print(-3 ** 2)  # -9
print(3 ** -2)  # 0.1111111111111111
print(1 &amp;lt;&amp;lt; 3 + 2 &amp;amp; 7)  # 0
print(-3 * 2 + 5 / -2 - 4)  # -12.5
print(3 &amp;lt; 4 and 4 &amp;lt; 5)  # True
```&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;变量和赋值&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在使用变量之前，需要对其先赋值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;变量名可以包括字母、数字、下划线、但变量名不能以数字开头。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python 变量名是大小写敏感的，foo != Foo。&lt;/p&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;first = 2
second = 3
third = first + second
print(third)  # 5&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;**数据类型与转换**&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;int&lt;/th&gt;
&lt;th&gt;整型 &lt;code&gt;&amp;lt;class &amp;#39;int&amp;#39;&amp;gt;&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;-876, 10&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;浮点型&lt;code&gt;&amp;lt;class &amp;#39;float&amp;#39;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;3.149, 11.11&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;布尔型&lt;code&gt;&amp;lt;class &amp;#39;bool&amp;#39;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;True, False&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;i = input(&amp;quot;i=&amp;quot;)
print(i,type(i))可以查看i的类型&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;获取类型信息 &lt;code&gt;type(object)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;type()` 不会认为子类是一种父类类型，不考虑继承关系。&lt;/p&gt;
&lt;p&gt;isinstance()` 会认为子类是一种父类类型，考虑继承关系。&lt;/p&gt;
&lt;p&gt;如果要判断两个类型是否相同推荐使用 &lt;code&gt;isinstance()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;类型转换&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;转换为整型 &lt;code&gt;int(x, base=10)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;转换为字符串 &lt;code&gt;str(object=&amp;#39;&amp;#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;转换为浮点型 &lt;code&gt;float(x)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;print() 函数&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;print(*objects, sep=&amp;#39; &amp;#39;, end=&amp;#39;\n&amp;#39;, file=sys.stdout, flush=False)&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;将对象以字符串表示的方式格式化输出到流文件对象file里。其中所有非关键字参数都按&lt;code&gt;str()&lt;/code&gt;方式进行转换为字符串输出；&lt;/li&gt;
&lt;li&gt;关键字参数&lt;code&gt;sep&lt;/code&gt;是实现分隔符，比如多个参数输出时想要输出中间的分隔字符；&lt;/li&gt;
&lt;li&gt;关键字参数&lt;code&gt;end&lt;/code&gt;是输出结束时的字符，默认是换行符&lt;code&gt;\n&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;关键字参数&lt;code&gt;file&lt;/code&gt;是定义流输出的文件，可以是标准的系统输出&lt;code&gt;sys.stdout&lt;/code&gt;，也可以重定义为别的文件；&lt;/li&gt;
&lt;li&gt;关键字参数&lt;code&gt;flush&lt;/code&gt;是立即把内容输出到流文件，不作缓存。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;位运算&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;原码、反码和补码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;二进制有三种不同的表示形式：原码、反码和补码，计算机内部使用补码来表示。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原码&lt;/strong&gt;：就是其二进制表示（注意，有一位符号位）。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;00 00 00 11 -&amp;gt; 3
10 00 00 11 -&amp;gt; -3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;反码&lt;/strong&gt;：正数的反码就是原码，负数的反码是符号位不变，其余位取反（对应正数按位取反）。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;00 00 00 11 -&amp;gt; 3
11 11 11 00 -&amp;gt; -3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;补码&lt;/strong&gt;：正数的补码就是原码，负数的补码是反码+1。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;00 00 00 11 -&amp;gt; 3
11 11 11 01 -&amp;gt; -3&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;按位非操作 ~&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;~ 1 = 0
~ 0 = 1&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;按位与操作 &amp;amp;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;1 &amp;amp; 1 = 1
1 &amp;amp; 0 = 0
0 &amp;amp; 1 = 0
0 &amp;amp; 0 = 0&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;按位或操作 |&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;1 | 1 = 1
1 | 0 = 1
0 | 1 = 1
0 | 0 = 0&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;按位异或操作 ^&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;1 ^ 1 = 0
1 ^ 0 = 1
0 ^ 1 = 1
0 ^ 0 = 0&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;按位左移操作 &amp;lt;&amp;lt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;00 00 10 11 -&amp;gt; 11
11 &amp;lt;&amp;lt; 3
---
01 01 10 00 -&amp;gt; 88 &lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;按位右移操作 &amp;gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;00 00 10 11 -&amp;gt; 11
11 &amp;gt;&amp;gt; 2
---
00 00 00 10 -&amp;gt; 2 &lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;利用位运算实现快速计算&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过 &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;，&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 快速计算2的倍数问题。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;n &amp;lt;&amp;lt; 1 -&amp;gt; 计算 n*2
n &amp;gt;&amp;gt; 1 -&amp;gt; 计算 n/2，负奇数的运算不可用
n &amp;lt;&amp;lt; m -&amp;gt; 计算 n*(2^m)，即乘以 2 的 m 次方
n &amp;gt;&amp;gt; m -&amp;gt; 计算 n/(2^m)，即除以 2 的 m 次方
1 &amp;lt;&amp;lt; n -&amp;gt; 2^n&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过 &lt;code&gt;^&lt;/code&gt; 快速交换两个整数。 通过 &lt;code&gt;^&lt;/code&gt; 快速交换两个整数。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a ^= b
b ^= a
a ^= b&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过 &lt;code&gt;a &amp;amp; (-a)&lt;/code&gt; 快速获取&lt;code&gt;a&lt;/code&gt;的最后为 1 位置的整数。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;00 00 01 01 -&amp;gt; 5
&amp;amp;
11 11 10 11 -&amp;gt; -5
---
00 00 00 01 -&amp;gt; 1

00 00 11 10 -&amp;gt; 14
&amp;amp;
11 11 00 10 -&amp;gt; -14
---
00 00 00 10 -&amp;gt; 2&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;利用位运算实现整数集合&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一个数的二进制表示可以看作是一个集合（0 表示不在集合中，1 表示在集合中）。&lt;/p&gt;
&lt;p&gt;比如集合 &lt;code&gt;&amp;#123;1, 3, 4, 8&amp;#125;&lt;/code&gt;，可以表示成 &lt;code&gt;01 00 01 10 10&lt;/code&gt; 而对应的位运算也就可以看作是对集合进行的操作。&lt;/p&gt;
&lt;p&gt;元素与集合的操作：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a | (1&amp;lt;&amp;lt;i)  -&amp;gt; 把 i 插入到集合中
a &amp;amp; ~(1&amp;lt;&amp;lt;i) -&amp;gt; 把 i 从集合中删除
a &amp;amp; (1&amp;lt;&amp;lt;i)  -&amp;gt; 判断 i 是否属于该集合（零不属于，非零属于）&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;集合之间的操作：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a 补   -&amp;gt; ~a
a 交 b -&amp;gt; a &amp;amp; b
a 并 b -&amp;gt; a | b
a 差 b -&amp;gt; a &amp;amp; (~b)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意：整数在内存中是以补码的形式存在的，输出自然也是按照补码输出。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;【例子】 Python 的`bin()` 输出。

[37]:

```
print(bin(3))  # 0b11
print(bin(-3))  # -0b11

print(bin(-3 &amp;amp; 0xffffffff))  
# 0b11111111111111111111111111111101

print(bin(0xfffffffd))       
# 0b11111111111111111111111111111101

print(0xfffffffd)  # 4294967293
```&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Python中&lt;code&gt;bin&lt;/code&gt;一个负数（十进制表示），输出的是它的原码的二进制表示加上个负号，巨坑。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python中的整型是补码形式存储的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python中整型是不限制长度的不会超范围溢出。&lt;/p&gt;
&lt;p&gt;所以为了获得负数（十进制表示）的补码，需要手动将其和十六进制数&lt;code&gt;0xffffffff&lt;/code&gt;进行按位与操作，再交给&lt;code&gt;bin()&lt;/code&gt;进行输出，得到的才是负数的补码表示。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;条件语句&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h2 id=&#34;if-语句&#34;&gt;&lt;a href=&#34;#if-语句&#34; class=&#34;headerlink&#34; title=&#34;if 语句&#34;&gt;&lt;/a&gt;if 语句&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;if expression:
    expr_true_suite&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;if 语句的 &lt;code&gt;expr_true_suite&lt;/code&gt; 代码块只有当条件表达式 &lt;code&gt;expression&lt;/code&gt; 结果为真时才执行，否则将继续执行紧跟在该代码块后面的语句。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;单个 if 语句中的 &lt;code&gt;expression&lt;/code&gt; 条件表达式可以通过布尔操作符 &lt;code&gt;and&lt;/code&gt;，&lt;code&gt;or&lt;/code&gt;和&lt;code&gt;not&lt;/code&gt; 实现多重条件判断。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[38]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if 2 &amp;gt; 1 and not 2 &amp;gt; 3:
    print(&amp;#39;Correct Judgement!&amp;#39;)

# Correct Judgement!&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h2 id=&#34;2-if-else-语句&#34;&gt;&lt;a href=&#34;#2-if-else-语句&#34; class=&#34;headerlink&#34; title=&#34;2. if - else 语句&#34;&gt;&lt;/a&gt;2. if - else 语句&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;if expression:
    expr_true_suite
else:
    expr_false_suite&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Python 提供与 if 搭配使用的 else，如果 if 语句的条件表达式结果布尔值为假，那么程序将执行 else 语句后的代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[39]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;temp = input(&amp;quot;猜一猜小姐姐想的是哪个数字？&amp;quot;)
guess = int(temp) # input 函数将接收的任何数据类型都默认为 str。
if guess == 666:
    print(&amp;quot;你太了解小姐姐的心思了！&amp;quot;)
    print(&amp;quot;哼，猜对也没有奖励！&amp;quot;)
else:
    print(&amp;quot;猜错了，小姐姐现在心里想的是666！&amp;quot;)
print(&amp;quot;游戏结束，不玩儿啦！&amp;quot;)
猜一猜小姐姐想的是哪个数字？666
你太了解小姐姐的心思了！
哼，猜对也没有奖励！
游戏结束，不玩儿啦！&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;if&lt;/code&gt;语句支持嵌套，即在一个&lt;code&gt;if&lt;/code&gt;语句中嵌入另一个&lt;code&gt;if&lt;/code&gt;语句，从而构成不同层次的选择结构。&lt;/p&gt;
&lt;p&gt;【例子】Python 使用缩进而不是大括号来标记代码块边界，因此要特别注意&lt;code&gt;else&lt;/code&gt;的悬挂问题。&lt;/p&gt;
&lt;p&gt;[40]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hi = 6
if hi &amp;gt; 2:
    if hi &amp;gt; 7:
        print(&amp;#39;好棒!好棒!&amp;#39;)
else:
    print(&amp;#39;切~&amp;#39;)

# 无输出&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[41]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;temp = input(&amp;quot;猜一猜小姐姐想的是哪个数字？&amp;quot;)
guess = int(temp)
if guess &amp;gt; 8:
    print(&amp;quot;大了，大了&amp;quot;)
else:
    if guess == 8:
        print(&amp;quot;你太了解小姐姐的心思了！&amp;quot;)
        print(&amp;quot;哼，猜对也没有奖励！&amp;quot;)
    else:
        print(&amp;quot;小了，小了&amp;quot;)
print(&amp;quot;游戏结束，不玩儿啦！&amp;quot;)
猜一猜小姐姐想的是哪个数字？8
你太了解小姐姐的心思了！
哼，猜对也没有奖励！
游戏结束，不玩儿啦！&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-if-elif-else-语句&#34;&gt;&lt;a href=&#34;#3-if-elif-else-语句&#34; class=&#34;headerlink&#34; title=&#34;3. if - elif - else 语句&#34;&gt;&lt;/a&gt;3. if - elif - else 语句&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;if expression1:
    expr1_true_suite
elif expression2:
    expr2_true_suite
    .
    .
elif expressionN:
    exprN_true_suite
else:
    expr_false_suite&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;elif 语句即为 else if，用来检查多个表达式是否为真，并在为真时执行特定代码块中的代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[42]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;temp = input(&amp;#39;请输入成绩:&amp;#39;)
source = int(temp)
if 100 &amp;gt;= source &amp;gt;= 90:
    print(&amp;#39;A&amp;#39;)
elif 90 &amp;gt; source &amp;gt;= 80:
    print(&amp;#39;B&amp;#39;)
elif 80 &amp;gt; source &amp;gt;= 60:
    print(&amp;#39;C&amp;#39;)
elif 60 &amp;gt; source &amp;gt;= 0:
    print(&amp;#39;D&amp;#39;)
else:
    print(&amp;#39;输入错误！&amp;#39;)
请输入成绩:99
A&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-assert-关键词&#34;&gt;&lt;a href=&#34;#4-assert-关键词&#34; class=&#34;headerlink&#34; title=&#34;4. assert 关键词&#34;&gt;&lt;/a&gt;4. assert 关键词&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;assert&lt;/code&gt;这个关键词我们称之为“断言”，当这个关键词后边的条件为 False 时，程序自动崩溃并抛出&lt;code&gt;AssertionError&lt;/code&gt;的异常。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[ ]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;my_list = [&amp;#39;lsgogroup&amp;#39;]
my_list.pop(0)
assert len(my_list) &amp;gt; 0

# AssertionError&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】在进行单元测试时，可以用来在程序中置入检查点，只有条件为 True 才能让程序正常工作。&lt;/p&gt;
&lt;p&gt;[ ]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;assert 3 &amp;gt; 7

# AssertionError&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;循环语句&#34;&gt;&lt;a href=&#34;#循环语句&#34; class=&#34;headerlink&#34; title=&#34;循环语句&#34;&gt;&lt;/a&gt;循环语句&lt;/h1&gt;&lt;h2 id=&#34;1-while-循环&#34;&gt;&lt;a href=&#34;#1-while-循环&#34; class=&#34;headerlink&#34; title=&#34;1. while 循环&#34;&gt;&lt;/a&gt;1. while 循环&lt;/h2&gt;&lt;p&gt;&lt;code&gt;while&lt;/code&gt;语句最基本的形式包括一个位于顶部的布尔表达式，一个或多个属于&lt;code&gt;while&lt;/code&gt;代码块的缩进语句。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;while 布尔表达式:
    代码块&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;while&lt;/code&gt;循环的代码块会一直循环执行，直到布尔表达式的值为布尔假。&lt;/p&gt;
&lt;p&gt;如果布尔表达式不带有&lt;code&gt;&amp;lt;、&amp;gt;、==、！=、in、not in&lt;/code&gt;等运算符，仅仅给出数值之类的条件，也是可以的。当&lt;code&gt;while&lt;/code&gt;后写入一个非零整数时，视为真值，执行循环体；写入&lt;code&gt;0&lt;/code&gt;时，视为假值，不执行循环体。也可以写入&lt;code&gt;str、list&lt;/code&gt;或任何序列，长度非零则视为真值，执行循环体；否则视为假值，不执行循环体。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[44]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;count = 0
while count &amp;lt; 3:
    temp = input(&amp;quot;猜一猜小姐姐想的是哪个数字？&amp;quot;)
    guess = int(temp)
    if guess &amp;gt; 8:
        print(&amp;quot;大了，大了&amp;quot;)
    else:
        if guess == 8:
            print(&amp;quot;你太了解小姐姐的心思了！&amp;quot;)
            print(&amp;quot;哼，猜对也没有奖励！&amp;quot;)
            count = 3
        else:
            print(&amp;quot;小了，小了&amp;quot;)
    count = count + 1
print(&amp;quot;游戏结束，不玩儿啦！&amp;quot;)
猜一猜小姐姐想的是哪个数字？8
你太了解小姐姐的心思了！
哼，猜对也没有奖励！
游戏结束，不玩儿啦！&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】布尔表达式返回0，循环终止。&lt;/p&gt;
&lt;p&gt;[45]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;string = &amp;#39;abcd&amp;#39;
while string:
    print(string)
    string = string[1:]

# abcd
# bcd
# cd
# d
abcd
bcd
cd
d&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;2-while-else-循环&#34;&gt;&lt;a href=&#34;#2-while-else-循环&#34; class=&#34;headerlink&#34; title=&#34;2. while - else 循环&#34;&gt;&lt;/a&gt;2. while - else 循环&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;while 布尔表达式:
    代码块
else:
    代码块&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当&lt;code&gt;while&lt;/code&gt;循环正常执行完的情况下，执行&lt;code&gt;else&lt;/code&gt;输出，如果&lt;code&gt;while&lt;/code&gt;循环中执行了跳出循环的语句，比如 &lt;code&gt;break&lt;/code&gt;，将不执行&lt;code&gt;else&lt;/code&gt;代码块的内容。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[46]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;count = 0
while count &amp;lt; 5:
    print(&amp;quot;%d is  less than 5&amp;quot; % count)
    count = count + 1
else:
    print(&amp;quot;%d is not less than 5&amp;quot; % count)

# 0 is  less than 5
# 1 is  less than 5
# 2 is  less than 5
# 3 is  less than 5
# 4 is  less than 5
# 5 is not less than 5
0 is  less than 5
1 is  less than 5
2 is  less than 5
3 is  less than 5
4 is  less than 5
5 is not less than 5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[47]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;count = 0
while count &amp;lt; 5:
    print(&amp;quot;%d is  less than 5&amp;quot; % count)
    count = 6
    break
else:
    print(&amp;quot;%d is not less than 5&amp;quot; % count)

# 0 is  less than 5
0 is  less than 5&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;3-for-循环&#34;&gt;&lt;a href=&#34;#3-for-循环&#34; class=&#34;headerlink&#34; title=&#34;3. for 循环&#34;&gt;&lt;/a&gt;3. for 循环&lt;/h2&gt;&lt;p&gt;&lt;code&gt;for&lt;/code&gt;循环是迭代循环，在Python中相当于一个通用的序列迭代器，可以遍历任何有序序列，如&lt;code&gt;str、list、tuple&lt;/code&gt;等，也可以遍历任何可迭代对象，如&lt;code&gt;dict&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;for 迭代变量 in 可迭代对象:
    代码块&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;每次循环，迭代变量被设置为可迭代对象的当前元素，提供给代码块使用。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[48]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for i in &amp;#39;ILoveLSGO&amp;#39;:
    print(i, end=&amp;#39; &amp;#39;)  # 不换行输出

# I L o v e L S G O
I L o v e L S G O &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[49]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;member = [&amp;#39;张三&amp;#39;, &amp;#39;李四&amp;#39;, &amp;#39;刘德华&amp;#39;, &amp;#39;刘六&amp;#39;, &amp;#39;周润发&amp;#39;]
for each in member:
    print(each)

# 张三
# 李四
# 刘德华
# 刘六
# 周润发

for i in range(len(member)):
    print(member[i])

# 张三
# 李四
# 刘德华
# 刘六
# 周润发
张三
李四
刘德华
刘六
周润发
张三
李四
刘德华
刘六
周润发&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[50]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dic = &amp;#123;&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 2, &amp;#39;c&amp;#39;: 3, &amp;#39;d&amp;#39;: 4&amp;#125;

for key, value in dic.items():
    print(key, value, sep=&amp;#39;:&amp;#39;, end=&amp;#39; &amp;#39;)

# a:1 b:2 c:3 d:4 
a:1 b:2 c:3 d:4 &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[51]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dic = &amp;#123;&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 2, &amp;#39;c&amp;#39;: 3, &amp;#39;d&amp;#39;: 4&amp;#125;

for key in dic.keys():
    print(key, end=&amp;#39; &amp;#39;)

# a b c d 
a b c d &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[52]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dic = &amp;#123;&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 2, &amp;#39;c&amp;#39;: 3, &amp;#39;d&amp;#39;: 4&amp;#125;

for value in dic.values():
    print(value, end=&amp;#39; &amp;#39;)

# 1 2 3 4
1 2 3 4 &lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;4-for-else-循环&#34;&gt;&lt;a href=&#34;#4-for-else-循环&#34; class=&#34;headerlink&#34; title=&#34;4. for - else 循环&#34;&gt;&lt;/a&gt;4. for - else 循环&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;for 迭代变量 in 可迭代对象:
    代码块
else:
    代码块&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当&lt;code&gt;for&lt;/code&gt;循环正常执行完的情况下，执行&lt;code&gt;else&lt;/code&gt;输出，如果&lt;code&gt;for&lt;/code&gt;循环中执行了跳出循环的语句，比如 &lt;code&gt;break&lt;/code&gt;，将不执行&lt;code&gt;else&lt;/code&gt;代码块的内容，与&lt;code&gt;while - else&lt;/code&gt;语句一样。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[53]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for num in range(10, 20):  # 迭代 10 到 20 之间的数字
    for i in range(2, num):  # 根据因子迭代
        if num % i == 0:  # 确定第一个因子
            j = num / i  # 计算第二个因子
            print(&amp;#39;%d 等于 %d * %d&amp;#39; % (num, i, j))
            break  # 跳出当前循环
    else:  # 循环的 else 部分
        print(num, &amp;#39;是一个质数&amp;#39;)

# 10 等于 2 * 5
# 11 是一个质数
# 12 等于 2 * 6
# 13 是一个质数
# 14 等于 2 * 7
# 15 等于 3 * 5
# 16 等于 2 * 8
# 17 是一个质数
# 18 等于 2 * 9
# 19 是一个质数
10 等于 2 * 5
11 是一个质数
12 等于 2 * 6
13 是一个质数
14 等于 2 * 7
15 等于 3 * 5
16 等于 2 * 8
17 是一个质数
18 等于 2 * 9
19 是一个质数&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;5-range-函数&#34;&gt;&lt;a href=&#34;#5-range-函数&#34; class=&#34;headerlink&#34; title=&#34;5. range() 函数&#34;&gt;&lt;/a&gt;5. range() 函数&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;range([start,] stop[, step=1])&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;这个BIF（Built-in functions）有三个参数，其中用中括号括起来的两个表示这两个参数是可选的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;step=1&lt;/code&gt; 表示第三个参数的默认值是1。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;range&lt;/code&gt; 这个BIF的作用是生成一个从&lt;code&gt;start&lt;/code&gt;参数的值开始到&lt;code&gt;stop&lt;/code&gt;参数的值结束的数字序列，该序列包含&lt;code&gt;start&lt;/code&gt;的值但不包含&lt;code&gt;stop&lt;/code&gt;的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[54]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for i in range(2, 9):  # 不包含9
    print(i)

# 2
# 3
# 4
# 5
# 6
# 7
# 8
2
3
4
5
6
7
8&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[55]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for i in range(1, 10, 2):
    print(i)

# 1
# 3
# 5
# 7
# 9
1
3
5
7
9&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;6-enumerate-函数&#34;&gt;&lt;a href=&#34;#6-enumerate-函数&#34; class=&#34;headerlink&#34; title=&#34;6. enumerate()函数&#34;&gt;&lt;/a&gt;6. enumerate()函数&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;enumerate(sequence, [start=0])&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;sequence：一个序列、迭代器或其他支持迭代对象。&lt;/li&gt;
&lt;li&gt;start：下标起始位置。&lt;/li&gt;
&lt;li&gt;返回 enumerate(枚举) 对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[56]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;seasons = [&amp;#39;Spring&amp;#39;, &amp;#39;Summer&amp;#39;, &amp;#39;Fall&amp;#39;, &amp;#39;Winter&amp;#39;]
lst = list(enumerate(seasons))
print(lst)
# [(0, &amp;#39;Spring&amp;#39;), (1, &amp;#39;Summer&amp;#39;), (2, &amp;#39;Fall&amp;#39;), (3, &amp;#39;Winter&amp;#39;)]
lst = list(enumerate(seasons, start=1))  # 下标从 1 开始
print(lst)
# [(1, &amp;#39;Spring&amp;#39;), (2, &amp;#39;Summer&amp;#39;), (3, &amp;#39;Fall&amp;#39;), (4, &amp;#39;Winter&amp;#39;)]
[(0, &amp;#39;Spring&amp;#39;), (1, &amp;#39;Summer&amp;#39;), (2, &amp;#39;Fall&amp;#39;), (3, &amp;#39;Winter&amp;#39;)]
[(1, &amp;#39;Spring&amp;#39;), (2, &amp;#39;Summer&amp;#39;), (3, &amp;#39;Fall&amp;#39;), (4, &amp;#39;Winter&amp;#39;)]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;enumerate()&lt;/code&gt;与 for 循环的结合使用。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;for i, a in enumerate(A)
    do something with a  &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用 &lt;code&gt;enumerate(A)&lt;/code&gt; 不仅返回了 &lt;code&gt;A&lt;/code&gt; 中的元素，还顺便给该元素一个索引值 (默认从 0 开始)。此外，用 &lt;code&gt;enumerate(A, j)&lt;/code&gt; 还可以确定索引起始值为 &lt;code&gt;j&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[57]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;languages = [&amp;#39;Python&amp;#39;, &amp;#39;R&amp;#39;, &amp;#39;Matlab&amp;#39;, &amp;#39;C++&amp;#39;]
for language in languages:
    print(&amp;#39;I love&amp;#39;, language)
print(&amp;#39;Done!&amp;#39;)
# I love Python
# I love R
# I love Matlab
# I love C++
# Done!

&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;for i, language in enumerate(languages, 2):
    print(i, &amp;#39;I love&amp;#39;, language)
print(&amp;#39;Done!&amp;#39;)
# 2 I love Python
# 3 I love R
# 4 I love Matlab
# 5 I love C++
# Done!
I love Python
I love R
I love Matlab
I love C++
Done!
2 I love Python
3 I love R
4 I love Matlab
5 I love C++
Done!
```

------

## 7. break 语句

`break`语句可以跳出当前所在层的循环。

【例子】

[59]:

```
import random
secret = random.randint(1, 10) #[1,10]之间的随机数

while True:
    temp = input(&amp;quot;猜一猜小姐姐想的是哪个数字？&amp;quot;)
    guess = int(temp)
    if guess &amp;gt; secret:
        print(&amp;quot;大了，大了&amp;quot;)
    else:
        if guess == secret:
            print(&amp;quot;你太了解小姐姐的心思了！&amp;quot;)
            print(&amp;quot;哼，猜对也没有奖励！&amp;quot;)
            break
        else:
            print(&amp;quot;小了，小了&amp;quot;)
print(&amp;quot;游戏结束，不玩儿啦！&amp;quot;)
猜一猜小姐姐想的是哪个数字？8
你太了解小姐姐的心思了！
哼，猜对也没有奖励！
游戏结束，不玩儿啦！
```

------

## 8. continue 语句

`continue`终止本轮循环并开始下一轮循环。

【例子】

[60]:

```
for i in range(10):
    if i % 2 != 0:
        print(i)
        continue
    i += 2
    print(i)

# 2
# 1
# 4
# 3
# 6
# 5
# 8
# 7
# 10
# 9
2
1
4
3
6
5
8
7
10
9
```

------

## 9. pass 语句

`pass` 语句的意思是“不做任何事”，如果你在需要有语句的地方不写任何语句，那么解释器会提示出错，而 `pass` 语句就是用来解决这些问题的。

【例子】

```python
def a_func():

# SyntaxError: unexpected EOF while parsing
```

【例子】

```python
def a_func():
    pass
```

`pass`是空语句，不做任何操作，只起到占位的作用，其作用是为了保持程序结构的完整性。尽管`pass`语句不做任何操作，但如果暂时不确定要在一个位置放上什么样的代码，可以先放置一个`pass`语句，让代码可以正常运行。

------

## 10. 推导式

**列表推导式**

```python
[ expr for value in collection [if condition] ]
```

【例子】

[61]:

```
x = [-4, -2, 0, 2, 4]
y = [a * 2 for a in x]
print(y)
# [-8, -4, 0, 4, 8]
[-8, -4, 0, 4, 8]
```

【例子】

[63]:

```
x = [i ** 2 for i in range(1, 10)]
print(x)
# [1, 4, 9, 16, 25, 36, 49, 64, 81]
[1, 4, 9, 16, 25, 36, 49, 64, 81]
```

【例子】

[64]:

```
x = [(i, i ** 2) for i in range(6)]
print(x)

# [(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]
[(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]
```

【例子】

[65]:

```
x = [i for i in range(100) if (i % 2) != 0 and (i % 3) == 0]
print(x)

# [3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93, 99]
[3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93, 99]
```

【例子】

[66]:

```
a = [(i, j) for i in range(0, 3) for j in range(0, 3)]
print(a)

# [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]
[(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]
```

【例子】

[67]:

```
x = [[i, j] for i in range(0, 3) for j in range(0, 3)]
print(x)
# [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]

x[0][0] = 10
print(x)
# [[10, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
[[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
[[10, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
```

【例子】

[68]:

```
a = [(i, j) for i in range(0, 3) if i &amp;lt; 1 for j in range(0, 3) if j &amp;gt; 1]
print(a)

# [(0, 2)]
[(0, 2)]
```

**元组推导式**

```python
( expr for value in collection [if condition] )
```

【例子】

[69]:

```
a = (x for x in range(10))
print(a)

# &amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x0000025BE511CC48&amp;gt;

print(tuple(a))

# (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
&amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x0000014CEC2E28B8&amp;gt;
(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
```

**字典推导式**

```python
&amp;#123; key_expr: value_expr for value in collection [if condition] &amp;#125;
```

【例子】

[70]:

```
b = &amp;#123;i: i % 2 == 0 for i in range(10) if i % 3 == 0&amp;#125;
print(b)
# &amp;#123;0: True, 3: False, 6: True, 9: False&amp;#125;
&amp;#123;0: True, 3: False, 6: True, 9: False&amp;#125;
```

**集合推导式**

```
&amp;#123; expr for value in collection [if condition] &amp;#125;
```

【例子】

[71]:

```
c = &amp;#123;i for i in [1, 2, 3, 4, 5, 5, 6, 4, 3, 2, 1]&amp;#125;
print(c)
# &amp;#123;1, 2, 3, 4, 5, 6&amp;#125;
&amp;#123;1, 2, 3, 4, 5, 6&amp;#125;
```

**其它**

- `next(iterator[, default])` Return the next item from the iterator. If default is given and the iterator is exhausted, it is returned instead of raising StopIteration.

【例子】

[72]:

```
e = (i for i in range(10))
print(e)
# &amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x0000007A0B8D01B0&amp;gt;

print(next(e))  # 0
print(next(e))  # 1

for each in e:
    print(each, end=&amp;#39; &amp;#39;)

# 2 3 4 5 6 7 8 9
&amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x0000014CEC389C78&amp;gt;
0
1
2 3 4 5 6 7 8 9 
```

【例子】

[73]:

```
s = sum([i for i in range(101)])
print(s)  # 5050
s = sum((i for i in range(101)))
print(s)  # 5050
5050
5050
```

# 异常处理

异常就是运行期检测到的错误。计算机语言针对可能出现的错误定义了异常类型，某种错误引发对应的异常时，异常处理程序将被启动，从而恢复程序的正常运行。

## 1. Python 标准异常总结

- BaseException：所有异常的 **基类**
- Exception：常规异常的 **基类**
- StandardError：所有的内建标准异常的基类
- ArithmeticError：所有数值计算异常的基类
- FloatingPointError：浮点计算异常
- OverflowError：数值运算超出最大限制
- ZeroDivisionError：除数为零
- AssertionError：断言语句（assert）失败
- AttributeError：尝试访问未知的对象属性
- EOFError：没有内建输入，到达EOF标记
- EnvironmentError：操作系统异常的基类
- IOError：输入/输出操作失败
- OSError：操作系统产生的异常（例如打开一个不存在的文件）
- WindowsError：系统调用失败
- ImportError：导入模块失败的时候
- KeyboardInterrupt：用户中断执行
- LookupError：无效数据查询的基类
- IndexError：索引超出序列的范围
- KeyError：字典中查找一个不存在的关键字
- MemoryError：内存溢出（可通过删除对象释放内存）
- NameError：尝试访问一个不存在的变量
- UnboundLocalError：访问未初始化的本地变量
- ReferenceError：弱引用试图访问已经垃圾回收了的对象
- RuntimeError：一般的运行时异常
- NotImplementedError：尚未实现的方法
- SyntaxError：语法错误导致的异常
- IndentationError：缩进错误导致的异常
- TabError：Tab和空格混用
- SystemError：一般的解释器系统异常
- TypeError：不同类型间的无效操作
- ValueError：传入无效的参数
- UnicodeError：Unicode相关的异常
- UnicodeDecodeError：Unicode解码时的异常
- UnicodeEncodeError：Unicode编码错误导致的异常
- UnicodeTranslateError：Unicode转换错误导致的异常

异常体系内部有层次关系，Python异常体系中的部分关系如下所示：

![Image](https://img-blog.csdnimg.cn/20200710131404548.png)

------

## 2. Python标准警告总结

- Warning：警告的基类
- DeprecationWarning：关于被弃用的特征的警告
- FutureWarning：关于构造将来语义会有改变的警告
- UserWarning：用户代码生成的警告
- PendingDeprecationWarning：关于特性将会被废弃的警告
- RuntimeWarning：可疑的运行时行为(runtime behavior)的警告
- SyntaxWarning：可疑语法的警告
- ImportWarning：用于在导入模块过程中触发的警告
- UnicodeWarning：与Unicode相关的警告
- BytesWarning：与字节或字节码相关的警告
- ResourceWarning：与资源使用相关的警告

------

## 3. try - except 语句

```python
try:
    检测范围
except Exception[as reason]:
    出现异常后的处理代码
```

try 语句按照如下方式工作：

- 首先，执行`try`子句（在关键字`try`和关键字`except`之间的语句）
- 如果没有异常发生，忽略`except`子句，`try`子句执行后结束。
- 如果在执行`try`子句的过程中发生了异常，那么`try`子句余下的部分将被忽略。如果异常的类型和`except`之后的名称相符，那么对应的`except`子句将被执行。最后执行`try - except`语句之后的代码。
- 如果一个异常没有与任何的`except`匹配，那么这个异常将会传递给上层的`try`中。

【例子】

[2]:

```
try:
    f = open(&amp;#39;test.txt&amp;#39;)
    print(f.read())
    f.close()
except OSError:
    print(&amp;#39;打开文件出错&amp;#39;)

# 打开文件出错
打开文件出错
```

【例子】

[3]:

```
try:
    f = open(&amp;#39;test.txt&amp;#39;)
    print(f.read())
    f.close()
except OSError as error:
    print(&amp;#39;打开文件出错\n原因是：&amp;#39; + str(error))

# 打开文件出错
# 原因是：[Errno 2] No such file or directory: &amp;#39;test.txt&amp;#39;
打开文件出错
原因是：[Errno 2] No such file or directory: &amp;#39;test.txt&amp;#39;
```

一个`try`语句可能包含多个`except`子句，分别来处理不同的特定的异常。最多只有一个分支会被执行。

【例子】

[4]:

```
try:
    int(&amp;quot;abc&amp;quot;)
    s = 1 + &amp;#39;1&amp;#39;
    f = open(&amp;#39;test.txt&amp;#39;)
    print(f.read())
    f.close()
except OSError as error:
    print(&amp;#39;打开文件出错\n原因是：&amp;#39; + str(error))
except TypeError as error:
    print(&amp;#39;类型出错\n原因是：&amp;#39; + str(error))
except ValueError as error:
    print(&amp;#39;数值出错\n原因是：&amp;#39; + str(error))

# 数值出错
# 原因是：invalid literal for int() with base 10: &amp;#39;abc&amp;#39;
数值出错
原因是：invalid literal for int() with base 10: &amp;#39;abc&amp;#39;
```

【例子】

[5]:

```
dict1 = &amp;#123;&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 2, &amp;#39;v&amp;#39;: 22&amp;#125;
try:
    x = dict1[&amp;#39;y&amp;#39;]
except LookupError:
    print(&amp;#39;查询错误&amp;#39;)
except KeyError:
    print(&amp;#39;键错误&amp;#39;)
else:
    print(x)

# 查询错误
查询错误
```

`try-except-else`语句尝试查询不在`dict`中的键值对，从而引发了异常。这一异常准确地说应属于`KeyError`，但由于`KeyError`是`LookupError`的子类，且将`LookupError`置于`KeyError`之前，因此程序优先执行该`except`代码块。所以，使用多个`except`代码块时，必须坚持对其规范排序，要从最具针对性的异常到最通用的异常。

【例子】

[6]:

```
dict1 = &amp;#123;&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 2, &amp;#39;v&amp;#39;: 22&amp;#125;
try:
    x = dict1[&amp;#39;y&amp;#39;]
except KeyError:
    print(&amp;#39;键错误&amp;#39;)
except LookupError:
    print(&amp;#39;查询错误&amp;#39;)
else:
    print(x)

# 键错误
键错误
```

【例子】一个 `except` 子句可以同时处理多个异常，这些异常将被放在一个括号里成为一个元组。

[7]:

```
try:
    s = 1 + &amp;#39;1&amp;#39;
    int(&amp;quot;abc&amp;quot;)
    f = open(&amp;#39;test.txt&amp;#39;)
    print(f.read())
    f.close()
except (OSError, TypeError, ValueError) as error:
    print(&amp;#39;出错了！\n原因是：&amp;#39; + str(error))

# 出错了！
# 原因是：unsupported operand type(s) for +: &amp;#39;int&amp;#39; and &amp;#39;str&amp;#39;
出错了！
原因是：unsupported operand type(s) for +: &amp;#39;int&amp;#39; and &amp;#39;str&amp;#39;
```

------

## 4. try - except - finally 语句

try: 检测范围 except Exception[as reason]: 出现异常后的处理代码 finally: 无论如何都会被执行的代码

不管`try`子句里面有没有发生异常，`finally`子句都会执行。

【例子】如果一个异常在`try`子句里被抛出，而又没有任何的`except`把它截住，那么这个异常会在`finally`子句执行后被抛出。

[10]:

```
def divide(x, y):
    try:
        result = x / y
        print(&amp;quot;result is&amp;quot;, result)
    except ZeroDivisionError:
        print(&amp;quot;division by zero!&amp;quot;)
    finally:
        print(&amp;quot;executing finally clause&amp;quot;)


divide(2, 1)
# result is 2.0
# executing finally clause
divide(2, 0)
# division by zero!
# executing finally clause
divide(&amp;quot;2&amp;quot;, &amp;quot;1&amp;quot;)
# executing finally clause
# TypeError: unsupported operand type(s) for /: &amp;#39;str&amp;#39; and &amp;#39;str&amp;#39;
result is 2.0
executing finally clause
division by zero!
executing finally clause
```

------

## 5. try - except - else 语句

如果在`try`子句执行时没有发生异常，Python将执行`else`语句后的语句。

```python
try:
    检测范围
except:
    出现异常后的处理代码
else:
    如果没有异常执行这块代码
```

使用`except`而不带任何异常类型，这不是一个很好的方式，我们不能通过该程序识别出具体的异常信息，因为它捕获所有的异常。

try: 检测范围 except(Exception1[, Exception2[,...ExceptionN]]]): 发生以上多个异常中的一个，执行这块代码 else: 如果没有异常执行这块代码

【例子】

[12]:

```
try:
    fh = open(&amp;quot;testfile.txt&amp;quot;, &amp;quot;w&amp;quot;)
    fh.write(&amp;quot;这是一个测试文件，用于测试异常!!&amp;quot;)
except IOError:
    print(&amp;quot;Error: 没有找到文件或读取文件失败&amp;quot;)
else:
    print(&amp;quot;内容写入文件成功&amp;quot;)
    fh.close()

# 内容写入文件成功
内容写入文件成功
```

注意：`else`语句的存在必须以`except`语句的存在为前提，在没有`except`语句的`try`语句中使用`else`语句，会引发语法错误。

------

## 6. raise语句

Python 使用`raise`语句抛出一个指定的异常。

【例子】

[13]:

```
try:
    raise NameError(&amp;#39;HiThere&amp;#39;)
except NameError:
    print(&amp;#39;An exception flew by!&amp;#39;)

# An exception flew by!
An exception flew by!
```&lt;/code&gt;&lt;/pre&gt;
</content>
        <updated>2021-01-26T05:39:02.000Z</updated>
    </entry>
</feed>
