{
    "version": "https://jsonfeed.org/version/1",
    "title": "Alan",
    "description": "",
    "home_page_url": "https://alanosy.github.io",
    "items": [
        {
            "id": "https://alanosy.github.io/2021/01/26/hello-world/",
            "url": "https://alanosy.github.io/2021/01/26/hello-world/",
            "title": "Hello Hexo",
            "date_published": "2021-01-26T06:51:00.117Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;</code></pre>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server</code></pre>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate</code></pre>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy</code></pre>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        },
        {
            "id": "https://alanosy.github.io/2021/01/26/python-day-2/",
            "url": "https://alanosy.github.io/2021/01/26/python-day-2/",
            "title": "python_day_2",
            "date_published": "2021-01-26T06:41:39.000Z",
            "content_html": "<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>Python 是一种通用编程语言，其在科学计算和机器学习领域具有广泛的应用。如果我们打算利用 Python 来执行机器学习，那么对 Python 有一些基本的了解就是至关重要的。本 Python 入门系列体验就是为这样的初学者精心准备的。</p>\n<p><strong>本实验包括以下内容</strong>：</p>\n<ol>\n<li>列表<ul>\n<li>列表的定义</li>\n<li>列表的创建</li>\n<li>向列表中添加元素</li>\n<li>删除列表中的元素</li>\n<li>获取列表中的元素</li>\n<li>列表的常用操作符</li>\n<li>列表的其他方法</li>\n</ul>\n</li>\n<li>元组<ul>\n<li>创建和访问一个元组</li>\n<li>更新和删除一个元组</li>\n<li>元组相关的操作符</li>\n<li>内置方法</li>\n<li>解压元组</li>\n</ul>\n</li>\n<li>字符串<ul>\n<li>字符串的定义</li>\n<li>字符串的切片与拼接</li>\n<li>字符串的常用内置方法</li>\n<li>字符串格式化</li>\n</ul>\n</li>\n<li>字典<ul>\n<li>可变类型与不可变类型</li>\n<li>字典的定义</li>\n<li>创建和访问字典</li>\n<li>字典的内置方法</li>\n</ul>\n</li>\n<li>集合<ul>\n<li>集合的创建</li>\n<li>访问集合中的值</li>\n<li>集合的内置方法</li>\n<li>集合的转换</li>\n<li>不可变集合</li>\n</ul>\n</li>\n<li>序列<ul>\n<li>针对序列的内置函数</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h1><p>简单数据类型</p>\n<ul>\n<li>整型<code>&lt;class &#39;int&#39;&gt;</code></li>\n<li>浮点型<code>&lt;class &#39;float&#39;&gt;</code></li>\n<li>布尔型<code>&lt;class &#39;bool&#39;&gt;</code></li>\n</ul>\n<p>容器数据类型</p>\n<ul>\n<li>列表<code>&lt;class &#39;list&#39;&gt;</code></li>\n<li>元组<code>&lt;class &#39;tuple&#39;&gt;</code></li>\n<li>字典<code>&lt;class &#39;dict&#39;&gt;</code></li>\n<li>集合<code>&lt;class &#39;set&#39;&gt;</code></li>\n<li>字符串<code>&lt;class &#39;str&#39;&gt;</code></li>\n</ul>\n<h2 id=\"1-列表的定义\"><a href=\"#1-列表的定义\" class=\"headerlink\" title=\"1. 列表的定义\"></a>1. 列表的定义</h2><p>列表是有序集合，没有固定大小，能够保存任意数量任意类型的 Python 对象，语法为 <code>[元素1, 元素2, ..., 元素n]</code>。</p>\n<ul>\n<li>关键点是「中括号 []」和「逗号 ,」</li>\n<li>中括号 把所有元素绑在一起</li>\n<li>逗号 将每个元素一一分开</li>\n</ul>\n<h2 id=\"2-列表的创建\"><a href=\"#2-列表的创建\" class=\"headerlink\" title=\"2. 列表的创建\"></a>2. 列表的创建</h2><ul>\n<li>创建一个普通列表</li>\n</ul>\n<p>【例子】</p>\n<p>[1]:</p>\n<pre><code>x = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]\nprint(x, type(x))\n# [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;] &lt;class &#39;list&#39;&gt;\n\nx = [2, 3, 4, 5, 6, 7]\nprint(x, type(x))\n# [2, 3, 4, 5, 6, 7] &lt;class &#39;list&#39;&gt;\n[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;] &lt;class &#39;list&#39;&gt;\n[2, 3, 4, 5, 6, 7] &lt;class &#39;list&#39;&gt;</code></pre>\n<ul>\n<li>利用<code>range()</code>创建列表</li>\n</ul>\n<p>【例子】</p>\n<p>[2]:</p>\n<pre><code>x = list(range(10))\nprint(x, type(x))\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &lt;class &#39;list&#39;&gt;\n\nx = list(range(1, 11, 2))\nprint(x, type(x))\n# [1, 3, 5, 7, 9] &lt;class &#39;list&#39;&gt;\n\nx = list(range(10, 1, -2))\nprint(x, type(x))\n# [10, 8, 6, 4, 2] &lt;class &#39;list&#39;&gt;\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &lt;class &#39;list&#39;&gt;\n[1, 3, 5, 7, 9] &lt;class &#39;list&#39;&gt;\n[10, 8, 6, 4, 2] &lt;class &#39;list&#39;&gt;</code></pre>\n<ul>\n<li>利用推导式创建列表</li>\n</ul>\n<p>【例子】</p>\n<p>[3]:</p>\n<pre><code>x = [0] * 5\nprint(x, type(x))\n# [0, 0, 0, 0, 0] &lt;class &#39;list&#39;&gt;\n\nx = [0 for i in range(5)]\nprint(x, type(x))\n# [0, 0, 0, 0, 0] &lt;class &#39;list&#39;&gt;\n\nx = [i for i in range(10)]\nprint(x, type(x))\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &lt;class &#39;list&#39;&gt;\n\nx = [i for i in range(1, 10, 2)]\nprint(x, type(x))\n# [1, 3, 5, 7, 9] &lt;class &#39;list&#39;&gt;\n\nx = [i for i in range(10, 1, -2)]\nprint(x, type(x))\n# [10, 8, 6, 4, 2] &lt;class &#39;list&#39;&gt;\n\nx = [i ** 2 for i in range(1, 10)]\nprint(x, type(x))\n# [1, 4, 9, 16, 25, 36, 49, 64, 81] &lt;class &#39;list&#39;&gt;\n\nx = [i for i in range(100) if (i % 2) != 0 and (i % 3) == 0]\nprint(x, type(x))\n\n# [3, 9, 15, 21, 27, 33, 39,\n[0, 0, 0, 0, 0] &lt;class &#39;list&#39;&gt;\n[0, 0, 0, 0, 0] &lt;class &#39;list&#39;&gt;\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &lt;class &#39;list&#39;&gt;\n[1, 3, 5, 7, 9] &lt;class &#39;list&#39;&gt;\n[10, 8, 6, 4, 2] &lt;class &#39;list&#39;&gt;\n[1, 4, 9, 16, 25, 36, 49, 64, 81] &lt;class &#39;list&#39;&gt;\n[3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93, 99] &lt;class &#39;list&#39;&gt;</code></pre>\n<p>注意：</p>\n<p>由于list的元素可以是任何对象，因此列表中所保存的是对象的指针。即使保存一个简单的<code>[1,2,3]</code>，也有3个指针和3个整数对象。</p>\n<p><code>x = [a] * 4</code>操作中，只是创建4个指向list的引用，所以一旦<code>a</code>改变，<code>x</code>中4个<code>a</code>也会随之改变。</p>\n<p>【例子】</p>\n<p>[4]:</p>\n<pre><code>x = [[0] * 3] * 4\nprint(x, type(x))\n# [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] &lt;class &#39;list&#39;&gt;\n\nx[0][0] = 1\nprint(x, type(x))\n# [[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] &lt;class &#39;list&#39;&gt;\n\na = [0] * 3\nx = [a] * 4\nprint(x, type(x))\n# [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] &lt;class &#39;list&#39;&gt;\n\nx[0][0] = 1\nprint(x, type(x))\n# [[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] &lt;class &#39;list&#39;&gt;\n[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] &lt;class &#39;list&#39;&gt;\n[[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] &lt;class &#39;list&#39;&gt;\n[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] &lt;class &#39;list&#39;&gt;\n[[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] &lt;class &#39;list&#39;&gt;</code></pre>\n<ul>\n<li>创建一个混合列表</li>\n</ul>\n<p>【例子】</p>\n<p>[5]:</p>\n<pre><code>mix = [1, &#39;lsgo&#39;, 3.14, [1, 2, 3]]\nprint(mix, type(mix))  \n# [1, &#39;lsgo&#39;, 3.14, [1, 2, 3]] &lt;class &#39;list&#39;&gt;\n[1, &#39;lsgo&#39;, 3.14, [1, 2, 3]] &lt;class &#39;list&#39;&gt;</code></pre>\n<ul>\n<li>创建一个空列表</li>\n</ul>\n<p>【例子】</p>\n<p>[6]:</p>\n<pre><code>empty = []\nprint(empty, type(empty))  # [] &lt;class &#39;list&#39;&gt;\n[] &lt;class &#39;list&#39;&gt;</code></pre>\n<p>列表不像元组，列表内容可更改 (mutable)，因此附加 (<code>append</code>, <code>extend</code>)、插入 (<code>insert</code>)、删除 (<code>remove</code>, <code>pop</code>) 这些操作都可以用在它身上。</p>\n<h2 id=\"3-向列表中添加元素\"><a href=\"#3-向列表中添加元素\" class=\"headerlink\" title=\"3. 向列表中添加元素\"></a>3. 向列表中添加元素</h2><ul>\n<li><code>list.append(obj)</code> 在列表末尾添加新的对象，只接受一个参数，参数可以是任何数据类型，被追加的元素在 list 中保持着原结构类型。</li>\n</ul>\n<p>【例子】</p>\n<p>[7]:</p>\n<pre><code>x = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]\nx.append(&#39;Thursday&#39;)\nprint(x)  \n# [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Thursday&#39;]\n\nprint(len(x))  # 6\n[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Thursday&#39;]\n6</code></pre>\n<p>此元素如果是一个 list，那么这个 list 将作为一个整体进行追加，注意<code>append()</code>和<code>extend()</code>的区别。</p>\n<p>【例子】</p>\n<p>[8]:</p>\n<pre><code>x = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]\nx.append([&#39;Thursday&#39;, &#39;Sunday&#39;])\nprint(x)  \n# [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, [&#39;Thursday&#39;, &#39;Sunday&#39;]]\n\nprint(len(x))  # 6\n[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, [&#39;Thursday&#39;, &#39;Sunday&#39;]]\n6</code></pre>\n<ul>\n<li><code>list.extend(seq)</code> 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</li>\n</ul>\n<p>【例子】</p>\n<p>[9]:</p>\n<pre><code>x = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]\nx.extend([&#39;Thursday&#39;, &#39;Sunday&#39;])\nprint(x)  \n# [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Thursday&#39;, &#39;Sunday&#39;]\n\nprint(len(x))  # 7\n[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Thursday&#39;, &#39;Sunday&#39;]\n7</code></pre>\n<p>严格来说 <code>append</code> 是追加，把一个东西整体添加在列表后，而 <code>extend</code> 是扩展，把一个东西里的所有元素添加在列表后。</p>\n<ul>\n<li><code>list.insert(index, obj)</code> 在编号 <code>index</code> 位置插入 <code>obj</code>。</li>\n</ul>\n<p>【例子】</p>\n<p>[10]:</p>\n<pre><code>x = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]\nx.insert(2, &#39;Sunday&#39;)\nprint(x)\n# [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Sunday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]\n\nprint(len(x))  # 6\n[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Sunday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]\n6</code></pre>\n<h2 id=\"4-删除列表中的元素\"><a href=\"#4-删除列表中的元素\" class=\"headerlink\" title=\"4. 删除列表中的元素\"></a>4. 删除列表中的元素</h2><ul>\n<li><code>list.remove(obj)</code> 移除列表中某个值的第一个匹配项</li>\n</ul>\n<p>【例子】</p>\n<p>[11]:</p>\n<pre><code>x = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]\nx.remove(&#39;Monday&#39;)\nprint(x)  # [&#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]\n[&#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]</code></pre>\n<ul>\n<li><code>list.pop([index=-1])</code> 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</li>\n</ul>\n<p>【例子】</p>\n<p>[12]:</p>\n<pre><code>x = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]\ny = x.pop()\nprint(y)  # Friday\n\ny = x.pop(0)\nprint(y)  # Monday\n\ny = x.pop(-2)\nprint(y)  # Wednesday\nprint(x)  # [&#39;Tuesday&#39;, &#39;Thursday&#39;]\nFriday\nMonday\nWednesday\n[&#39;Tuesday&#39;, &#39;Thursday&#39;]</code></pre>\n<p><code>remove</code> 和 <code>pop</code> 都可以删除元素，前者是指定具体要删除的元素，后者是指定一个索引。</p>\n<ul>\n<li><code>del var1[, var2 ……]</code> 删除单个或多个对象。</li>\n</ul>\n<p>【例子】</p>\n<p>如果知道要删除的元素在列表中的位置，可使用<code>del</code>语句。</p>\n<p>[13]:</p>\n<pre><code>x = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]\ndel x[0:2]\nprint(x)  # [&#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]\n[&#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]</code></pre>\n<p>如果你要从列表中删除一个元素，且不再以任何方式使用它，就使用<code>del</code>语句；如果你要在删除元素后还能继续使用它，就使用方法<code>pop()</code>。</p>\n<h2 id=\"5-获取列表中的元素\"><a href=\"#5-获取列表中的元素\" class=\"headerlink\" title=\"5. 获取列表中的元素\"></a>5. 获取列表中的元素</h2><ul>\n<li>通过元素的索引值，从列表获取单个元素，注意，列表索引值是从0开始的。</li>\n<li>通过将索引指定为-1，可让Python返回最后一个列表元素，索引 -2 返回倒数第二个列表元素，以此类推。</li>\n</ul>\n<p>【例子】</p>\n<p>[14]:</p>\n<pre><code>x = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, [&#39;Thursday&#39;, &#39;Friday&#39;]]\nprint(x[0], type(x[0]))  # Monday &lt;class &#39;str&#39;&gt;\nprint(x[-1], type(x[-1]))  # [&#39;Thursday&#39;, &#39;Friday&#39;] &lt;class &#39;list&#39;&gt;\nprint(x[-2], type(x[-2]))  # Wednesday &lt;class &#39;str&#39;&gt;\nMonday &lt;class &#39;str&#39;&gt;\n[&#39;Thursday&#39;, &#39;Friday&#39;] &lt;class &#39;list&#39;&gt;\nWednesday &lt;class &#39;str&#39;&gt;</code></pre>\n<p>切片的通用写法是 <code>start : stop : step</code></p>\n<ul>\n<li>情况 1 - “start :”</li>\n<li>以 <code>step</code> 为 1 (默认) 从编号 <code>start</code> 往列表尾部切片。</li>\n</ul>\n<p>【例子】</p>\n<p>[15]:</p>\n<pre><code>x = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]\nprint(x[3:])  # [&#39;Thursday&#39;, &#39;Friday&#39;]\nprint(x[-3:])  # [&#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]\n[&#39;Thursday&#39;, &#39;Friday&#39;]\n[&#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]</code></pre>\n<ul>\n<li>情况 2 - “: stop”</li>\n<li>以 <code>step</code> 为 1 (默认) 从列表头部往编号 <code>stop</code> 切片。</li>\n</ul>\n<p>【例子】</p>\n<p>[16]:</p>\n<pre><code>week = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]\nprint(week[:3])  # [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;]\nprint(week[:-3])  # [&#39;Monday&#39;, &#39;Tuesday&#39;]\n[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;]\n[&#39;Monday&#39;, &#39;Tuesday&#39;]</code></pre>\n<ul>\n<li>情况 3 - “start : stop”</li>\n<li>以 <code>step</code> 为 1 (默认) 从编号 <code>start</code> 往编号 <code>stop</code> 切片。</li>\n</ul>\n<p>【例子】</p>\n<p>[17]:</p>\n<pre><code>week = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]\nprint(week[1:3])  # [&#39;Tuesday&#39;, &#39;Wednesday&#39;]\nprint(week[-3:-1])  # [&#39;Wednesday&#39;, &#39;Thursday&#39;]\n[&#39;Tuesday&#39;, &#39;Wednesday&#39;]\n[&#39;Wednesday&#39;, &#39;Thursday&#39;]</code></pre>\n<ul>\n<li>情况 4 - “start : stop : step”</li>\n<li>以具体的 <code>step</code> 从编号 <code>start</code> 往编号 <code>stop</code> 切片。注意最后把 <code>step</code> 设为 -1，相当于将列表反向排列。</li>\n</ul>\n<p>【例子】</p>\n<p>[18]:</p>\n<pre><code>week = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]\nprint(week[1:4:2])  # [&#39;Tuesday&#39;, &#39;Thursday&#39;]\nprint(week[:4:2])  # [&#39;Monday&#39;, &#39;Wednesday&#39;]\nprint(week[1::2])  # [&#39;Tuesday&#39;, &#39;Thursday&#39;]\nprint(week[::-1])  \n# [&#39;Friday&#39;, &#39;Thursday&#39;, &#39;Wednesday&#39;, &#39;Tuesday&#39;, &#39;Monday&#39;]\n[&#39;Tuesday&#39;, &#39;Thursday&#39;]\n[&#39;Monday&#39;, &#39;Wednesday&#39;]\n[&#39;Tuesday&#39;, &#39;Thursday&#39;]\n[&#39;Friday&#39;, &#39;Thursday&#39;, &#39;Wednesday&#39;, &#39;Tuesday&#39;, &#39;Monday&#39;]</code></pre>\n<ul>\n<li>情况 5 - “ : “</li>\n<li>复制列表中的所有元素（浅拷贝）。</li>\n</ul>\n<p>【例子】</p>\n<p>[19]:</p>\n<pre><code>eek = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]\nprint(week[:])  \n# [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]\n[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]</code></pre>\n<p>【例子】浅拷贝与深拷贝</p>\n<p>[20]:</p>\n<pre><code>list1 = [123, 456, 789, 213]\nlist2 = list1\nlist3 = list1[:]\n\nprint(list2)  # [123, 456, 789, 213]\nprint(list3)  # [123, 456, 789, 213]\nlist1.sort()\nprint(list2)  # [123, 213, 456, 789] \nprint(list3)  # [123, 456, 789, 213]\n\nlist1 = [[123, 456], [789, 213]]\nlist2 = list1\nlist3 = list1[:]\nprint(list2)  # [[123, 456], [789, 213]]\nprint(list3)  # [[123, 456], [789, 213]]\nlist1[0][0] = 111\nprint(list2)  # [[111, 456], [789, 213]]\nprint(list3)  # [[111, 456], [789, 213]]\n[123, 456, 789, 213]\n[123, 456, 789, 213]\n[123, 213, 456, 789]\n[123, 456, 789, 213]\n[[123, 456], [789, 213]]\n[[123, 456], [789, 213]]\n[[111, 456], [789, 213]]\n[[111, 456], [789, 213]]</code></pre>\n<h2 id=\"6-列表的常用操作符\"><a href=\"#6-列表的常用操作符\" class=\"headerlink\" title=\"6. 列表的常用操作符\"></a>6. 列表的常用操作符</h2><ul>\n<li>等号操作符：<code>==</code></li>\n<li>连接操作符 <code>+</code></li>\n<li>重复操作符 <code>*</code></li>\n<li>成员关系操作符 <code>in</code>、<code>not in</code></li>\n</ul>\n<p>「等号 ==」，只有成员、成员位置都相同时才返回True。</p>\n<p>列表拼接有两种方式，用「加号 +」和「乘号 *」，前者首尾拼接，后者复制拼接。</p>\n<p>【例子】</p>\n<p>[21]:</p>\n<pre><code>list1 = [123, 456]\nlist2 = [456, 123]\nlist3 = [123, 456]\n\nprint(list1 == list2)  # False\nprint(list1 == list3)  # True\n\nlist4 = list1 + list2  # extend()\nprint(list4)  # [123, 456, 456, 123]\n\nlist5 = list3 * 3\nprint(list5)  # [123, 456, 123, 456, 123, 456]\n\nlist3 *= 3\nprint(list3)  # [123, 456, 123, 456, 123, 456]\n\nprint(123 in list3)  # True\nprint(456 not in list3)  # False\nFalse\nTrue\n[123, 456, 456, 123]\n[123, 456, 123, 456, 123, 456]\n[123, 456, 123, 456, 123, 456]\nTrue\nFalse</code></pre>\n<p>前面三种方法（<code>append</code>, <code>extend</code>, <code>insert</code>）可对列表增加元素，它们没有返回值，是直接修改了原数据对象。 而将两个list相加，需要创建新的 list 对象，从而需要消耗额外的内存，特别是当 list 较大时，尽量不要使用 “+” 来添加list。</p>\n<h2 id=\"7-列表的其它方法\"><a href=\"#7-列表的其它方法\" class=\"headerlink\" title=\"7. 列表的其它方法\"></a>7. 列表的其它方法</h2><p><code>list.count(obj)</code> 统计某个元素在列表中出现的次数</p>\n<p>【例子】</p>\n<p>[22]:</p>\n<pre><code>list1 = [123, 456] * 3\nprint(list1)  # [123, 456, 123, 456, 123, 456]\nnum = list1.count(123)\nprint(num)  # 3\n[123, 456, 123, 456, 123, 456]\n3</code></pre>\n<p><code>list.index(x[, start[, end]])</code> 从列表中找出某个值第一个匹配项的索引位置</p>\n<p>【例子】</p>\n<p>[23]:</p>\n<pre><code>list1 = [123, 456] * 5\nprint(list1.index(123))  # 0\nprint(list1.index(123, 1))  # 2\nprint(list1.index(123, 3, 7))  # 4\n0\n2\n4</code></pre>\n<p><code>list.reverse()</code> 反向列表中元素</p>\n<p>【例子】</p>\n<p>[24]:</p>\n<pre><code>x = [123, 456, 789]\nx.reverse()\nprint(x)  # [789, 456, 123]\n[789, 456, 123]</code></pre>\n<p><code>list.sort(key=None, reverse=False)</code> 对原列表进行排序。</p>\n<ul>\n<li><code>key</code> – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</li>\n<li><code>reverse</code> – 排序规则，<code>reverse = True</code> 降序， <code>reverse = False</code> 升序（默认）。</li>\n<li>该方法没有返回值，但是会对列表的对象进行排序。</li>\n</ul>\n<p>【例子】</p>\n<p>[25]:</p>\n<pre><code>x = [123, 456, 789, 213]\nx.sort()\nprint(x)\n# [123, 213, 456, 789]\n\nx.sort(reverse=True)\nprint(x)\n# [789, 456, 213, 123]\n\n\n# 获取列表的第二个元素\ndef takeSecond(elem):\n    return elem[1]\n\n\nx = [(2, 2), (3, 4), (4, 1), (1, 3)]\nx.sort(key=takeSecond)\nprint(x)\n# [(4, 1), (2, 2), (1, 3), (3, 4)]\n\nx.sort(key=lambda a: a[0])\nprint(x)\n# [(1, 3), (2, 2), (3, 4), (4, 1)]\n[123, 213, 456, 789]\n[789, 456, 213, 123]\n[(4, 1), (2, 2), (1, 3), (3, 4)]\n[(1, 3), (2, 2), (3, 4), (4, 1)]</code></pre>\n<h1 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h1><p>「元组」定义语法为：<code>(元素1, 元素2, ..., 元素n)</code></p>\n<ul>\n<li>小括号把所有元素绑在一起</li>\n<li>逗号将每个元素一一分开</li>\n</ul>\n<h2 id=\"1-创建和访问一个元组\"><a href=\"#1-创建和访问一个元组\" class=\"headerlink\" title=\"1. 创建和访问一个元组\"></a>1. 创建和访问一个元组</h2><ul>\n<li>Python 的元组与列表类似，不同之处在于tuple被创建后就不能对其进行修改，类似字符串。</li>\n<li>元组使用小括号，列表使用方括号。</li>\n<li>元组与列表类似，也用整数来对它进行索引 (indexing) 和切片 (slicing)。</li>\n</ul>\n<p>【例子】</p>\n<p>[26]:</p>\n<pre><code>t1 = (1, 10.31, &#39;python&#39;)\nt2 = 1, 10.31, &#39;python&#39;\nprint(t1, type(t1))\n# (1, 10.31, &#39;python&#39;) &lt;class &#39;tuple&#39;&gt;\n\nprint(t2, type(t2))\n# (1, 10.31, &#39;python&#39;) &lt;class &#39;tuple&#39;&gt;\n\ntuple1 = (1, 2, 3, 4, 5, 6, 7, 8)\nprint(tuple1[1])  # 2\nprint(tuple1[5:])  # (6, 7, 8)\nprint(tuple1[:5])  # (1, 2, 3, 4, 5)\ntuple2 = tuple1[:]\nprint(tuple2)  # (1, 2, 3, 4, 5, 6, 7, 8)\n(1, 10.31, &#39;python&#39;) &lt;class &#39;tuple&#39;&gt;\n(1, 10.31, &#39;python&#39;) &lt;class &#39;tuple&#39;&gt;\n2\n(6, 7, 8)\n(1, 2, 3, 4, 5)\n(1, 2, 3, 4, 5, 6, 7, 8)</code></pre>\n<ul>\n<li>创建元组可以用小括号 ()，也可以什么都不用，为了可读性，建议还是用 ()。</li>\n<li>元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用。</li>\n</ul>\n<p>【例子】</p>\n<p>[27]:</p>\n<pre><code>x = (1)\nprint(type(x))  # &lt;class &#39;int&#39;&gt;\nx = 2, 3, 4, 5\nprint(type(x))  # &lt;class &#39;tuple&#39;&gt;\nx = []\nprint(type(x))  # &lt;class &#39;list&#39;&gt;\nx = ()\nprint(type(x))  # &lt;class &#39;tuple&#39;&gt;\nx = (1,)\nprint(type(x))  # &lt;class &#39;tuple&#39;&gt;\n&lt;class &#39;int&#39;&gt;\n&lt;class &#39;tuple&#39;&gt;\n&lt;class &#39;list&#39;&gt;\n&lt;class &#39;tuple&#39;&gt;\n&lt;class &#39;tuple&#39;&gt;</code></pre>\n<p>【例子】</p>\n<p>[28]:</p>\n<pre><code>print(8 * (8))  # 64\nprint(8 * (8,))  # (8, 8, 8, 8, 8, 8, 8, 8)\n64\n(8, 8, 8, 8, 8, 8, 8, 8)</code></pre>\n<p>【例子】创建二维元组。</p>\n<p>[29]:</p>\n<pre><code>x = (1, 10.31, &#39;python&#39;), (&#39;data&#39;, 11)\nprint(x)\n# ((1, 10.31, &#39;python&#39;), (&#39;data&#39;, 11))\n\nprint(x[0])\n# (1, 10.31, &#39;python&#39;)\nprint(x[0][0], x[0][1], x[0][2])\n# 1 10.31 python\n\nprint(x[0][0:2])\n# (1, 10.31)\n((1, 10.31, &#39;python&#39;), (&#39;data&#39;, 11))\n(1, 10.31, &#39;python&#39;)\n1 10.31 python\n(1, 10.31)</code></pre>\n<h2 id=\"2-更新和删除一个元组\"><a href=\"#2-更新和删除一个元组\" class=\"headerlink\" title=\"2. 更新和删除一个元组\"></a>2. 更新和删除一个元组</h2><p>【例子】</p>\n<p>[30]:</p>\n<pre><code>week = (&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;)\nweek = week[:2] + (&#39;Wednesday&#39;,) + week[2:]\nprint(week)  # (&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;)\n(&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;)</code></pre>\n<p>【例子】元组有不可更改 (immutable) 的性质，因此不能直接给元组的元素赋值，但是只要元组中的元素可更改 (mutable)，那么我们可以直接更改其元素，注意这跟赋值其元素不同。</p>\n<p>[31]:</p>\n<pre><code>t1 = (1, 2, 3, [4, 5, 6])\nprint(t1)  # (1, 2, 3, [4, 5, 6])\n\nt1[3][0] = 9\nprint(t1)  # (1, 2, 3, [9, 5, 6])\n(1, 2, 3, [4, 5, 6])\n(1, 2, 3, [9, 5, 6])</code></pre>\n<h2 id=\"3-元组相关的操作符\"><a href=\"#3-元组相关的操作符\" class=\"headerlink\" title=\"3. 元组相关的操作符\"></a>3. 元组相关的操作符</h2><ul>\n<li>等号操作符：<code>==</code></li>\n<li>连接操作符 <code>+</code></li>\n<li>重复操作符 <code>*</code></li>\n<li>成员关系操作符 <code>in</code>、<code>not in</code></li>\n</ul>\n<p>「等号 ==」，只有成员、成员位置都相同时才返回True。</p>\n<p>元组拼接有两种方式，用「加号 +」和「乘号 *」，前者首尾拼接，后者复制拼接。</p>\n<p>【例子】</p>\n<p>[32]:</p>\n<pre><code>t1 = (123, 456)\nt2 = (456, 123)\nt3 = (123, 456)\n\nprint(t1 == t2)  # False\nprint(t1 == t3)  # True\n\nt4 = t1 + t2\nprint(t4)  # (123, 456, 456, 123)\n\nt5 = t3 * 3\nprint(t5)  # (123, 456, 123, 456, 123, 456)\n\nt3 *= 3\nprint(t3)  # (123, 456, 123, 456, 123, 456)\n\nprint(123 in t3)  # True\nprint(456 not in t3)  # False\nFalse\nTrue\n(123, 456, 456, 123)\n(123, 456, 123, 456, 123, 456)\n(123, 456, 123, 456, 123, 456)\nTrue\nFalse</code></pre>\n<h2 id=\"4-内置方法\"><a href=\"#4-内置方法\" class=\"headerlink\" title=\"4. 内置方法\"></a>4. 内置方法</h2><p>元组大小和内容都不可更改，因此只有 <code>count</code> 和 <code>index</code> 两种方法。</p>\n<p>【例子】</p>\n<p>[33]:</p>\n<pre><code>t = (1, 10.31, &#39;python&#39;)\nprint(t.count(&#39;python&#39;))  # 1\nprint(t.index(10.31))  # 1\n1\n1</code></pre>\n<ul>\n<li><code>count(&#39;python&#39;)</code> 是记录在元组 <code>t</code> 中该元素出现几次，显然是 1 次</li>\n<li><code>index(10.31)</code> 是找到该元素在元组 <code>t</code> 的索引，显然是 1</li>\n</ul>\n<h2 id=\"5-解压元组\"><a href=\"#5-解压元组\" class=\"headerlink\" title=\"5. 解压元组\"></a>5. 解压元组</h2><p>【例子】解压（unpack）一维元组（有几个元素左边括号定义几个变量）</p>\n<p>[34]:</p>\n<pre><code>t = (1, 10.31, &#39;python&#39;)\n(a, b, c) = t\nprint(a, b, c)\n# 1 10.31 python\n1 10.31 python</code></pre>\n<p>【例子】解压二维元组（按照元组里的元组结构来定义变量）</p>\n<p>[35]:</p>\n<pre><code>t = (1, 10.31, (&#39;OK&#39;, &#39;python&#39;))\n(a, b, (c, d)) = t\nprint(a, b, c, d)\n# 1 10.31 OK python\n1 10.31 OK python</code></pre>\n<p>【例子】如果你只想要元组其中几个元素，用通配符「*」，英文叫 wildcard，在计算机语言中代表一个或多个元素。下例就是把多个元素丢给了 <code>rest</code> 变量。</p>\n<p>[36]:</p>\n<pre><code>t = 1, 2, 3, 4, 5\na, b, *rest, c = t\nprint(a, b, c)  # 1 2 5\nprint(rest)  # [3, 4]\n1 2 5\n[3, 4]</code></pre>\n<p>【例子】如果你根本不在乎 rest 变量，那么就用通配符「*」加上下划线「_」。</p>\n<p>[37]:</p>\n<pre><code>t = 1, 2, 3, 4, 5\na, b, *_ = t\nprint(a, b)  # 1 2\n1 2</code></pre>\n<h1 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h1><h2 id=\"1-字符串的定义\"><a href=\"#1-字符串的定义\" class=\"headerlink\" title=\"1. 字符串的定义\"></a>1. 字符串的定义</h2><ul>\n<li>Python 中字符串被定义为引号之间的字符集合。</li>\n<li>Python 支持使用成对的 单引号 或 双引号。</li>\n</ul>\n<p>【例子】</p>\n<p>[38]:</p>\n<pre><code>t1 = &#39;i love Python!&#39;\nprint(t1, type(t1))\n# i love Python! &lt;class &#39;str&#39;&gt;\n\nt2 = &quot;I love Python!&quot;\nprint(t2, type(t2))\n# I love Python! &lt;class &#39;str&#39;&gt;\n\nprint(5 + 8)  # 13\nprint(&#39;5&#39; + &#39;8&#39;)  # 58\ni love Python! &lt;class &#39;str&#39;&gt;\nI love Python! &lt;class &#39;str&#39;&gt;\n13\n58</code></pre>\n<ul>\n<li>Python 的常用转义字符</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>转义字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>\\\\</code></td>\n<td>反斜杠符号</td>\n</tr>\n<tr>\n<td><code>\\&#39;</code></td>\n<td>单引号</td>\n</tr>\n<tr>\n<td><code>\\&quot;</code></td>\n<td>双引号</td>\n</tr>\n<tr>\n<td><code>\\n</code></td>\n<td>换行</td>\n</tr>\n<tr>\n<td><code>\\t</code></td>\n<td>横向制表符(TAB)</td>\n</tr>\n<tr>\n<td><code>\\r</code></td>\n<td>回车</td>\n</tr>\n</tbody></table>\n<p>【例子】如果字符串中需要出现单引号或双引号，可以使用转义符号<code>\\</code>对字符串中的符号进行转义。</p>\n<p>[39]:</p>\n<pre><code>print(&#39;let\\&#39;s go&#39;)  # let&#39;s go\nprint(&quot;let&#39;s go&quot;)  # let&#39;s go\nprint(&#39;C:\\\\now&#39;)  # C:\\now\nprint(&quot;C:\\\\Program Files\\\\Intel\\\\Wifi\\\\Help&quot;)\n# C:\\Program Files\\Intel\\Wifi\\Help\nlet&#39;s go\nlet&#39;s go\nC:\\now\nC:\\Program Files\\Intel\\Wifi\\Help</code></pre>\n<p>【例子】原始字符串只需要在字符串前边加一个英文字母 r 即可。</p>\n<p>[40]:</p>\n<pre><code>print(r&#39;C:\\Program Files\\Intel\\Wifi\\Help&#39;)  \n# C:\\Program Files\\Intel\\Wifi\\Help\nC:\\Program Files\\Intel\\Wifi\\Help</code></pre>\n<p>【例子】三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。</p>\n<p>[41]:</p>\n<pre><code>para_str = &quot;&quot;&quot;这是一个多行字符串的实例\n多行字符串可以使用制表符\nTAB ( \\t )。\n也可以使用换行符 [ \\n ]。\n&quot;&quot;&quot;\nprint(para_str)\n# 这是一个多行字符串的实例\n# 多行字符串可以使用制表符\n# TAB (    )。\n# 也可以使用换行符 [\n#  ]。\n\npara_str = &#39;&#39;&#39;这是一个多行字符串的实例\n多行字符串可以使用制表符\nTAB ( \\t )。\n也可以使用换行符 [ \\n ]。\n&#39;&#39;&#39;\nprint(para_str)\n# 这是一个多行字符串的实例\n# 多行字符串可以使用制表符\n# TAB (      )。\n# 也可以使用换行符 [ \n#  ]。\n这是一个多行字符串的实例\n多行字符串可以使用制表符\nTAB (      )。\n也可以使用换行符 [ \n ]。\n\n这是一个多行字符串的实例\n多行字符串可以使用制表符\nTAB (      )。\n也可以使用换行符 [ \n ]。</code></pre>\n<h2 id=\"2-字符串的切片与拼接\"><a href=\"#2-字符串的切片与拼接\" class=\"headerlink\" title=\"2. 字符串的切片与拼接\"></a>2. 字符串的切片与拼接</h2><ul>\n<li>类似于元组具有不可修改性</li>\n<li>从 0 开始 (和 Java 一样)</li>\n<li>切片通常写成 <code>start:end</code> 这种形式，包括「<code>start</code> 索引」对应的元素，不包括「<code>end</code>索引」对应的元素。</li>\n<li>索引值可正可负，正索引从 0 开始，从左往右；负索引从 -1 开始，从右往左。使用负数索引时，会从最后一个元素开始计数。最后一个元素的位置编号是 -1。</li>\n</ul>\n<p>【例子】</p>\n<p>[42]:</p>\n<pre><code>str1 = &#39;I Love LsgoGroup&#39;\nprint(str1[:6])  # I Love\nprint(str1[5])  # e\nprint(str1[:6] + &quot; 插入的字符串 &quot; + str1[6:])  \n# I Love 插入的字符串  LsgoGroup\n\ns = &#39;Python&#39;\nprint(s)  # Python\nprint(s[2:4])  # th\nprint(s[-5:-2])  # yth\nprint(s[2])  # t\nprint(s[-1])  # n\nI Love\ne\nI Love 插入的字符串  LsgoGroup\nPython\nth\nyth\nt\nn</code></pre>\n<h2 id=\"3-字符串的常用内置方法\"><a href=\"#3-字符串的常用内置方法\" class=\"headerlink\" title=\"3. 字符串的常用内置方法\"></a>3. 字符串的常用内置方法</h2><ul>\n<li><code>capitalize()</code> 将字符串的第一个字符转换为大写。</li>\n</ul>\n<p>【例子】</p>\n<p>[43]:</p>\n<pre><code>str2 = &#39;xiaoxie&#39;\nprint(str2.capitalize())  # Xiaoxie\nXiaoxie</code></pre>\n<ul>\n<li><code>lower()</code> 转换字符串中所有大写字符为小写。</li>\n<li><code>upper()</code> 转换字符串中的小写字母为大写。</li>\n<li><code>swapcase()</code> 将字符串中大写转换为小写，小写转换为大写。</li>\n</ul>\n<p>【例子】</p>\n<p>[44]:</p>\n<pre><code>str2 = &quot;DAXIExiaoxie&quot;\nprint(str2.lower())  # daxiexiaoxie\nprint(str2.upper())  # DAXIEXIAOXIE\nprint(str2.swapcase())  # daxieXIAOXIE\ndaxiexiaoxie\nDAXIEXIAOXIE\ndaxieXIAOXIE</code></pre>\n<ul>\n<li><code>count(str, beg= 0,end=len(string))</code> 返回<code>str</code>在 string 里面出现的次数，如果<code>beg</code>或者<code>end</code>指定则返回指定范围内<code>str</code>出现的次数。</li>\n</ul>\n<p>【例子】</p>\n<p>[45]:</p>\n<pre><code>str2 = &quot;DAXIExiaoxie&quot;\nprint(str2.count(&#39;xi&#39;))  # 2\n2</code></pre>\n<ul>\n<li><code>endswith(suffix, beg=0, end=len(string))</code> 检查字符串是否以指定子字符串 <code>suffix</code> 结束，如果是，返回 True，否则返回 False。如果 <code>beg</code> 和 <code>end</code> 指定值，则在指定范围内检查。</li>\n<li><code>startswith(substr, beg=0,end=len(string))</code> 检查字符串是否以指定子字符串 <code>substr</code> 开头，如果是，返回 True，否则返回 False。如果 <code>beg</code> 和 <code>end</code> 指定值，则在指定范围内检查。</li>\n</ul>\n<p>【例子】</p>\n<p>[46]:</p>\n<pre><code>str2 = &quot;DAXIExiaoxie&quot;\nprint(str2.endswith(&#39;ie&#39;))  # True\nprint(str2.endswith(&#39;xi&#39;))  # False\nprint(str2.startswith(&#39;Da&#39;))  # False\nprint(str2.startswith(&#39;DA&#39;))  # True\nTrue\nFalse\nFalse\nTrue</code></pre>\n<ul>\n<li><code>find(str, beg=0, end=len(string))</code> 检测 <code>str</code> 是否包含在字符串中，如果指定范围 <code>beg</code> 和 <code>end</code>，则检查是否包含在指定范围内，如果包含，返回开始的索引值，否则返回 -1。</li>\n<li><code>rfind(str, beg=0,end=len(string))</code> 类似于 <code>find()</code> 函数，不过是从右边开始查找。</li>\n</ul>\n<p>【例子】</p>\n<p>[47]:</p>\n<pre><code>str2 = &quot;DAXIExiaoxie&quot;\nprint(str2.find(&#39;xi&#39;))  # 5\nprint(str2.find(&#39;ix&#39;))  # -1\nprint(str2.rfind(&#39;xi&#39;))  # 9\n5\n-1\n9</code></pre>\n<ul>\n<li><code>isnumeric()</code> 如果字符串中只包含数字字符，则返回 True，否则返回 False。</li>\n</ul>\n<p>【例子】</p>\n<p>[48]:</p>\n<pre><code>str3 = &#39;12345&#39;\nprint(str3.isnumeric())  # True\nstr3 += &#39;a&#39;\nprint(str3.isnumeric())  # False\nTrue\nFalse</code></pre>\n<ul>\n<li><code>ljust(width[, fillchar])</code>返回一个原字符串左对齐，并使用<code>fillchar</code>（默认空格）填充至长度<code>width</code>的新字符串。</li>\n<li><code>rjust(width[, fillchar])</code>返回一个原字符串右对齐，并使用<code>fillchar</code>（默认空格）填充至长度<code>width</code>的新字符串。</li>\n</ul>\n<p>【例子】</p>\n<p>[49]:</p>\n<pre><code>str4 = &#39;1101&#39;\nprint(str4.ljust(8, &#39;0&#39;))  # 11010000\nprint(str4.rjust(8, &#39;0&#39;))  # 00001101\n11010000\n00001101</code></pre>\n<ul>\n<li><code>lstrip([chars])</code> 截掉字符串左边的空格或指定字符。</li>\n<li><code>rstrip([chars])</code> 删除字符串末尾的空格或指定字符。</li>\n<li><code>strip([chars])</code> 在字符串上执行<code>lstrip()</code>和<code>rstrip()</code>。</li>\n</ul>\n<p>【例子】</p>\n<p>[50]:</p>\n<pre><code>str5 = &#39; I Love LsgoGroup &#39;\nprint(str5.lstrip())  # &#39;I Love LsgoGroup &#39;\nprint(str5.lstrip().strip(&#39;I&#39;))  # &#39; Love LsgoGroup &#39;\nprint(str5.rstrip())  # &#39; I Love LsgoGroup&#39;\nprint(str5.strip())  # &#39;I Love LsgoGroup&#39;\nprint(str5.strip().strip(&#39;p&#39;))  # &#39;I Love LsgoGrou&#39;\nI Love LsgoGroup \n Love LsgoGroup \n I Love LsgoGroup\nI Love LsgoGroup\nI Love LsgoGrou</code></pre>\n<ul>\n<li><code>partition(sub)</code> 找到子字符串sub，把字符串分为一个三元组<code>(pre_sub,sub,fol_sub)</code>，如果字符串中不包含sub则返回<code>(&#39;原字符串&#39;,&#39;&#39;,&#39;&#39;)</code>。</li>\n<li><code>rpartition(sub)</code>类似于<code>partition()</code>方法，不过是从右边开始查找。</li>\n</ul>\n<p>【例子】</p>\n<p>[51]:</p>\n<pre><code>str5 = &#39; I Love LsgoGroup &#39;\nprint(str5.strip().partition(&#39;o&#39;))  # (&#39;I L&#39;, &#39;o&#39;, &#39;ve LsgoGroup&#39;)\nprint(str5.strip().partition(&#39;m&#39;))  # (&#39;I Love LsgoGroup&#39;, &#39;&#39;, &#39;&#39;)\nprint(str5.strip().rpartition(&#39;o&#39;))  # (&#39;I Love LsgoGr&#39;, &#39;o&#39;, &#39;up&#39;)\n(&#39;I L&#39;, &#39;o&#39;, &#39;ve LsgoGroup&#39;)\n(&#39;I Love LsgoGroup&#39;, &#39;&#39;, &#39;&#39;)\n(&#39;I Love LsgoGr&#39;, &#39;o&#39;, &#39;up&#39;)</code></pre>\n<ul>\n<li><code>replace(old, new [, max])</code> 把 将字符串中的<code>old</code>替换成<code>new</code>，如果<code>max</code>指定，则替换不超过<code>max</code>次。</li>\n</ul>\n<p>【例子】</p>\n<p>[52]:</p>\n<pre><code>str5 = &#39; I Love LsgoGroup &#39;\nprint(str5.strip().replace(&#39;I&#39;, &#39;We&#39;))  # We Love LsgoGroup\nWe Love LsgoGroup</code></pre>\n<ul>\n<li><code>split(str=&quot;&quot;, num)</code> 不带参数默认是以空格为分隔符切片字符串，如果<code>num</code>参数有设置，则仅分隔<code>num</code>个子字符串，返回切片后的子字符串拼接的列表。</li>\n</ul>\n<p>【例子】</p>\n<p>[53]:</p>\n<pre><code>str5 = &#39; I Love LsgoGroup &#39;\nprint(str5.strip().split())  # [&#39;I&#39;, &#39;Love&#39;, &#39;LsgoGroup&#39;]\nprint(str5.strip().split(&#39;o&#39;))  # [&#39;I L&#39;, &#39;ve Lsg&#39;, &#39;Gr&#39;, &#39;up&#39;]\n[&#39;I&#39;, &#39;Love&#39;, &#39;LsgoGroup&#39;]\n[&#39;I L&#39;, &#39;ve Lsg&#39;, &#39;Gr&#39;, &#39;up&#39;]</code></pre>\n<p>【例子】</p>\n<p>[54]:</p>\n<pre><code>u = &quot;www.baidu.com.cn&quot;\n# 使用默认分隔符\nprint(u.split())  # [&#39;www.baidu.com.cn&#39;]\n\n# 以&quot;.&quot;为分隔符\nprint((u.split(&#39;.&#39;)))  # [&#39;www&#39;, &#39;baidu&#39;, &#39;com&#39;, &#39;cn&#39;]\n\n# 分割0次\nprint((u.split(&quot;.&quot;, 0)))  # [&#39;www.baidu.com.cn&#39;]\n\n# 分割一次\nprint((u.split(&quot;.&quot;, 1)))  # [&#39;www&#39;, &#39;baidu.com.cn&#39;]\n\n# 分割两次\nprint(u.split(&quot;.&quot;, 2))  # [&#39;www&#39;, &#39;baidu&#39;, &#39;com.cn&#39;]\n\n# 分割两次，并取序列为1的项\nprint((u.split(&quot;.&quot;, 2)[1]))  # baidu\n\n# 分割两次，并把分割后的三个部分保存到三个变量\nu1, u2, u3 = u.split(&quot;.&quot;, 2)\nprint(u1)  # www\nprint(u2)  # baidu\nprint(u3)  # com.cn\n[&#39;www.baidu.com.cn&#39;]\n[&#39;www&#39;, &#39;baidu&#39;, &#39;com&#39;, &#39;cn&#39;]\n[&#39;www.baidu.com.cn&#39;]\n[&#39;www&#39;, &#39;baidu.com.cn&#39;]\n[&#39;www&#39;, &#39;baidu&#39;, &#39;com.cn&#39;]\nbaidu\nwww\nbaidu\ncom.cn</code></pre>\n<p>【例子】去掉换行符</p>\n<p>[55]:</p>\n<pre><code>c = &#39;&#39;&#39;say\nhello\nbaby&#39;&#39;&#39;\n\nprint(c)\n# say\n# hello\n# baby\n\nprint(c.split(&#39;\\n&#39;))  # [&#39;say&#39;, &#39;hello&#39;, &#39;baby&#39;]\nsay\nhello\nbaby\n[&#39;say&#39;, &#39;hello&#39;, &#39;baby&#39;]</code></pre>\n<p>【例子】</p>\n<p>[56]:</p>\n<pre><code>string = &quot;hello boy&lt;[www.baidu.com]&gt;byebye&quot;\nprint(string.split(&#39;[&#39;)[1].split(&#39;]&#39;)[0])  # www.baidu.com\nprint(string.split(&#39;[&#39;)[1].split(&#39;]&#39;)[0].split(&#39;.&#39;))  # [&#39;www&#39;, &#39;baidu&#39;, &#39;com&#39;]\nwww.baidu.com\n[&#39;www&#39;, &#39;baidu&#39;, &#39;com&#39;]</code></pre>\n<ul>\n<li><code>splitlines([keepends])</code> 按照行(‘\\r’, ‘\\r\\n’, \\n’)分隔，返回一个包含各行作为元素的列表，如果参数<code>keepends</code>为 False，不包含换行符，如果为 True，则保留换行符。</li>\n</ul>\n<p>【例子】</p>\n<p>[57]:</p>\n<pre><code>str6 = &#39;I \\n Love \\n LsgoGroup&#39;\nprint(str6.splitlines())  # [&#39;I &#39;, &#39; Love &#39;, &#39; LsgoGroup&#39;]\nprint(str6.splitlines(True))  # [&#39;I \\n&#39;, &#39; Love \\n&#39;, &#39; LsgoGroup&#39;]\n[&#39;I &#39;, &#39; Love &#39;, &#39; LsgoGroup&#39;]\n[&#39;I \\n&#39;, &#39; Love \\n&#39;, &#39; LsgoGroup&#39;]</code></pre>\n<ul>\n<li><code>maketrans(intab, outtab)</code> 创建字符映射的转换表，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</li>\n<li><code>translate(table, deletechars=&quot;&quot;)</code> 根据参数<code>table</code>给出的表，转换字符串的字符，要过滤掉的字符放到<code>deletechars</code>参数中。</li>\n</ul>\n<p>【例子】</p>\n<p>[58]:</p>\n<pre><code>str7 = &#39;this is string example....wow!!!&#39;\nintab = &#39;aeiou&#39;\nouttab = &#39;12345&#39;\ntrantab = str7.maketrans(intab, outtab)\nprint(trantab)  # &#123;97: 49, 111: 52, 117: 53, 101: 50, 105: 51&#125;\nprint(str7.translate(trantab))  # th3s 3s str3ng 2x1mpl2....w4w!!!\n&#123;97: 49, 101: 50, 105: 51, 111: 52, 117: 53&#125;\nth3s 3s str3ng 2x1mpl2....w4w!!!</code></pre>\n<h2 id=\"4-字符串格式化\"><a href=\"#4-字符串格式化\" class=\"headerlink\" title=\"4. 字符串格式化\"></a>4. 字符串格式化</h2><ul>\n<li><code>format</code> 格式化函数</li>\n</ul>\n<p>【例子】</p>\n<p>[59]:</p>\n<pre><code>str8 = &quot;&#123;0&#125; Love &#123;1&#125;&quot;.format(&#39;I&#39;, &#39;Lsgogroup&#39;)  # 位置参数\nprint(str8)  # I Love Lsgogroup\n\nstr8 = &quot;&#123;a&#125; Love &#123;b&#125;&quot;.format(a=&#39;I&#39;, b=&#39;Lsgogroup&#39;)  # 关键字参数\nprint(str8)  # I Love Lsgogroup\n\nstr8 = &quot;&#123;0&#125; Love &#123;b&#125;&quot;.format(&#39;I&#39;, b=&#39;Lsgogroup&#39;)  # 位置参数要在关键字参数之前\nprint(str8)  # I Love Lsgogroup\n\nstr8 = &#39;&#123;0:.2f&#125;&#123;1&#125;&#39;.format(27.658, &#39;GB&#39;)  # 保留小数点后两位\nprint(str8)  # 27.66GB\nI Love Lsgogroup\nI Love Lsgogroup\nI Love Lsgogroup\n27.66GB</code></pre>\n<ul>\n<li>Python 字符串格式化符号</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>符 号</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%c</td>\n<td>格式化字符及其ASCII码</td>\n</tr>\n<tr>\n<td>%s</td>\n<td>格式化字符串，用str()方法处理对象</td>\n</tr>\n<tr>\n<td>%r</td>\n<td>格式化字符串，用rper()方法处理对象</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>格式化整数</td>\n</tr>\n<tr>\n<td>%o</td>\n<td>格式化无符号八进制数</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>格式化无符号十六进制数</td>\n</tr>\n<tr>\n<td>%X</td>\n<td>格式化无符号十六进制数（大写）</td>\n</tr>\n<tr>\n<td>%f</td>\n<td>格式化浮点数字，可指定小数点后的精度</td>\n</tr>\n<tr>\n<td>%e</td>\n<td>用科学计数法格式化浮点数</td>\n</tr>\n<tr>\n<td>%E</td>\n<td>作用同%e，用科学计数法格式化浮点数</td>\n</tr>\n<tr>\n<td>%g</td>\n<td>根据值的大小决定使用%f或%e</td>\n</tr>\n<tr>\n<td>%G</td>\n<td>作用同%g，根据值的大小决定使用%f或%E</td>\n</tr>\n</tbody></table>\n<p>【例子】</p>\n<p>[60]:</p>\n<pre><code>print(&#39;%c&#39; % 97)  # a\nprint(&#39;%c %c %c&#39; % (97, 98, 99))  # a b c\nprint(&#39;%d + %d = %d&#39; % (4, 5, 9))  # 4 + 5 = 9\nprint(&quot;我叫 %s 今年 %d 岁!&quot; % (&#39;小明&#39;, 10))  # 我叫 小明 今年 10 岁!\nprint(&#39;%o&#39; % 10)  # 12\nprint(&#39;%x&#39; % 10)  # a\nprint(&#39;%X&#39; % 10)  # A\nprint(&#39;%f&#39; % 27.658)  # 27.658000\nprint(&#39;%e&#39; % 27.658)  # 2.765800e+01\nprint(&#39;%E&#39; % 27.658)  # 2.765800E+01\nprint(&#39;%g&#39; % 27.658)  # 27.658\ntext = &quot;I am %d years old.&quot; % 22\nprint(&quot;I said: %s.&quot; % text)  # I said: I am 22 years old..\nprint(&quot;I said: %r.&quot; % text)  # I said: &#39;I am 22 years old.&#39;\na\na b c\n4 + 5 = 9\n我叫 小明 今年 10 岁!\n12\na\nA\n27.658000\n2.765800e+01\n2.765800E+01\n27.658\nI said: I am 22 years old..\nI said: &#39;I am 22 years old.&#39;.</code></pre>\n<ul>\n<li>格式化操作符辅助指令</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>m.n</code></td>\n<td>m 是显示的最小总宽度,n 是小数点后的位数（如果可用的话）</td>\n</tr>\n<tr>\n<td><code>-</code></td>\n<td>用作左对齐</td>\n</tr>\n<tr>\n<td><code>+</code></td>\n<td>在正数前面显示加号( + )</td>\n</tr>\n<tr>\n<td><code>#</code></td>\n<td>在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’)</td>\n</tr>\n<tr>\n<td><code>0</code></td>\n<td>显示的数字前面填充’0’而不是默认的空格</td>\n</tr>\n</tbody></table>\n<p>【例子】</p>\n<p>[61]:</p>\n<pre><code>print(&#39;%5.1f&#39; % 27.658)  # &#39; 27.7&#39;\nprint(&#39;%.2e&#39; % 27.658)  # 2.77e+01\nprint(&#39;%10d&#39; % 10)  # &#39;        10&#39;\nprint(&#39;%-10d&#39; % 10)  # &#39;10        &#39;\nprint(&#39;%+d&#39; % 10)  # +10\nprint(&#39;%#o&#39; % 10)  # 0o12\nprint(&#39;%#x&#39; % 108)  # 0x6c\nprint(&#39;%010d&#39; % 5)  # 0000000005\n 27.7\n2.77e+01\n        10\n10        \n+10\n0o12\n0x6c\n0000000005</code></pre>\n<h1 id=\"字典\"><a href=\"#字典\" class=\"headerlink\" title=\"字典\"></a>字典</h1><h2 id=\"1-可变类型与不可变类型\"><a href=\"#1-可变类型与不可变类型\" class=\"headerlink\" title=\"1. 可变类型与不可变类型\"></a>1. 可变类型与不可变类型</h2><ul>\n<li>序列是以连续的整数为索引，与此不同的是，字典以”关键字”为索引，关键字可以是任意不可变类型，通常用字符串或数值。</li>\n<li>字典是 Python 唯一的一个 映射类型，字符串、元组、列表属于序列类型。</li>\n</ul>\n<p>那么如何快速判断一个数据类型 <code>X</code> 是不是可变类型的呢？两种方法：</p>\n<ul>\n<li>麻烦方法：用 <code>id(X)</code> 函数，对 X 进行某种操作，比较操作前后的 <code>id</code>，如果不一样，则 <code>X</code> 不可变，如果一样，则 <code>X</code> 可变。</li>\n<li>便捷方法：用 <code>hash(X)</code>，只要不报错，证明 <code>X</code> 可被哈希，即不可变，反过来不可被哈希，即可变。</li>\n</ul>\n<p>【例子】</p>\n<p>[62]:</p>\n<pre><code>i = 1\nprint(id(i))  # 140732167000896\ni = i + 2\nprint(id(i))  # 140732167000960\n\nl = [1, 2]\nprint(id(l))  # 4300825160\nl.append(&#39;Python&#39;)\nprint(id(l))  # 4300825160\n140731832701760\n140731832701824\n2131670369800\n2131670369800</code></pre>\n<ul>\n<li>整数 <code>i</code> 在加 1 之后的 <code>id</code> 和之前不一样，因此加完之后的这个 <code>i</code> (虽然名字没变)，但不是加之前的那个 <code>i</code> 了，因此整数是不可变类型。</li>\n<li>列表 <code>l</code> 在附加 <code>&#39;Python&#39;</code> 之后的 <code>id</code> 和之前一样，因此列表是可变类型。</li>\n</ul>\n<p>【例子】</p>\n<p>[1]:</p>\n<pre><code>print(hash(&#39;Name&#39;))  # 7047218704141848153\n\nprint(hash((1, 2, &#39;Python&#39;)))  # 1704535747474881831\n\nprint(hash([1, 2, &#39;Python&#39;]))\n# TypeError: unhashable type: &#39;list&#39;\n\n\n-6668157630988609386\n-1857436431894091236\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-1-6416367464f8&gt; in &lt;module&gt;()\n      3 print(hash((1, 2, &#39;Python&#39;)))  # 1704535747474881831\n      4 \n----&gt; 5 print(hash([1, 2, &#39;Python&#39;]))\n      6 # TypeError: unhashable type: &#39;list&#39;\n\nTypeError: unhashable type: &#39;list&#39;</code></pre>\n<p>[ ]:</p>\n<pre><code>print(hash(&#123;1, 2, 3&#125;))\n# TypeError: unhashable type: &#39;set&#39;</code></pre>\n<ul>\n<li>数值、字符和元组 都能被哈希，因此它们是不可变类型。</li>\n<li>列表、集合、字典不能被哈希，因此它是可变类型。</li>\n</ul>\n<h2 id=\"2-字典的定义\"><a href=\"#2-字典的定义\" class=\"headerlink\" title=\"2. 字典的定义\"></a>2. 字典的定义</h2><p>字典 是无序的 键:值（<code>key:value</code>）对集合，键必须是互不相同的（在同一个字典之内）。</p>\n<ul>\n<li><code>dict</code> 内部存放的顺序和 <code>key</code> 放入的顺序是没有关系的。</li>\n<li><code>dict</code> 查找和插入的速度极快，不会随着 <code>key</code> 的增加而增加，但是需要占用大量的内存。</li>\n</ul>\n<p>字典 定义语法为 <code>&#123;元素1, 元素2, ..., 元素n&#125;</code></p>\n<ul>\n<li>其中每一个元素是一个「键值对」– 键:值 (<code>key:value</code>)</li>\n<li>关键点是「大括号 {}」,「逗号 ,」和「冒号 :」</li>\n<li>大括号 – 把所有元素绑在一起</li>\n<li>逗号 – 将每个键值对分开</li>\n<li>冒号 – 将键和值分开</li>\n</ul>\n<h2 id=\"3-创建和访问字典\"><a href=\"#3-创建和访问字典\" class=\"headerlink\" title=\"3. 创建和访问字典\"></a>3. 创建和访问字典</h2><p>【例子】</p>\n<p>[88]:</p>\n<pre><code>brand = [&#39;李宁&#39;, &#39;耐克&#39;, &#39;阿迪达斯&#39;]\nslogan = [&#39;一切皆有可能&#39;, &#39;Just do it&#39;, &#39;Impossible is nothing&#39;]\nprint(&#39;耐克的口号是:&#39;, slogan[brand.index(&#39;耐克&#39;)])  \n# 耐克的口号是: Just do it\n\ndic = &#123;&#39;李宁&#39;: &#39;一切皆有可能&#39;, &#39;耐克&#39;: &#39;Just do it&#39;, &#39;阿迪达斯&#39;: &#39;Impossible is nothing&#39;&#125;\nprint(&#39;耐克的口号是:&#39;, dic[&#39;耐克&#39;])  \n# 耐克的口号是: Just do it\n耐克的口号是: Just do it\n耐克的口号是: Just do it</code></pre>\n<p>【例子】通过字符串或数值作为<code>key</code>来创建字典。</p>\n<p>[2]:</p>\n<pre><code>dic1 = &#123;1: &#39;one&#39;, 2: &#39;two&#39;, 3: &#39;three&#39;&#125;\nprint(dic1)  # &#123;1: &#39;one&#39;, 2: &#39;two&#39;, 3: &#39;three&#39;&#125;\nprint(dic1[1])  # one\nprint(dic1[4])  # KeyError: 4\n\n&#123;1: &#39;one&#39;, 2: &#39;two&#39;, 3: &#39;three&#39;&#125;\none\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\n&lt;ipython-input-2-bb8d02bd63a3&gt; in &lt;module&gt;()\n      2 print(dic1)  # &#123;1: &#39;one&#39;, 2: &#39;two&#39;, 3: &#39;three&#39;&#125;\n      3 print(dic1[1])  # one\n----&gt; 4 print(dic1[4])  # KeyError: 4\n\nKeyError: 4</code></pre>\n<p>[3]:</p>\n<pre><code>dic2 = &#123;&#39;rice&#39;: 35, &#39;wheat&#39;: 101, &#39;corn&#39;: 67&#125;\nprint(dic2)  # &#123;&#39;wheat&#39;: 101, &#39;corn&#39;: 67, &#39;rice&#39;: 35&#125;\nprint(dic2[&#39;rice&#39;])  # 35\n&#123;&#39;rice&#39;: 35, &#39;wheat&#39;: 101, &#39;corn&#39;: 67&#125;\n35</code></pre>\n<p>注意：如果我们取的键在字典中不存在，会直接报错<code>KeyError</code>。</p>\n<p>【例子】通过元组作为<code>key</code>来创建字典，但一般不这样使用。</p>\n<p>[91]:</p>\n<pre><code>dic = &#123;(1, 2, 3): &quot;Tom&quot;, &quot;Age&quot;: 12, 3: [3, 5, 7]&#125;\nprint(dic)  # &#123;(1, 2, 3): &#39;Tom&#39;, &#39;Age&#39;: 12, 3: [3, 5, 7]&#125;\nprint(type(dic))  # &lt;class &#39;dict&#39;&gt;\n&#123;(1, 2, 3): &#39;Tom&#39;, &#39;Age&#39;: 12, 3: [3, 5, 7]&#125;\n&lt;class &#39;dict&#39;&gt;</code></pre>\n<p>通过构造函数<code>dict</code>来创建字典。</p>\n<ul>\n<li><code>dict()</code> 创建一个空的字典。</li>\n</ul>\n<p>【例子】通过<code>key</code>直接把数据放入字典中，但一个<code>key</code>只能对应一个<code>value</code>，多次对一个<code>key</code>放入 <code>value</code>，后面的值会把前面的值冲掉。</p>\n<p>[92]:</p>\n<pre><code>dic = dict()\ndic[&#39;a&#39;] = 1\ndic[&#39;b&#39;] = 2\ndic[&#39;c&#39;] = 3\n\nprint(dic)\n# &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;\n\ndic[&#39;a&#39;] = 11\nprint(dic)\n# &#123;&#39;a&#39;: 11, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;\n\ndic[&#39;d&#39;] = 4\nprint(dic)\n# &#123;&#39;a&#39;: 11, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;\n&#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;\n&#123;&#39;a&#39;: 11, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;\n&#123;&#39;a&#39;: 11, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;</code></pre>\n<ul>\n<li><code>dict(mapping)</code> new dictionary initialized from a mapping object’s (key, value) pairs</li>\n</ul>\n<p>【例子】</p>\n<p>[95]:</p>\n<pre><code>dic1 = dict([(&#39;apple&#39;, 4139), (&#39;peach&#39;, 4127), (&#39;cherry&#39;, 4098)])\nprint(dic1)  # &#123;&#39;cherry&#39;: 4098, &#39;apple&#39;: 4139, &#39;peach&#39;: 4127&#125;\n\ndic2 = dict(((&#39;apple&#39;, 4139), (&#39;peach&#39;, 4127), (&#39;cherry&#39;, 4098)))\nprint(dic2)  # &#123;&#39;peach&#39;: 4127, &#39;cherry&#39;: 4098, &#39;apple&#39;: 4139&#125;\n&#123;&#39;apple&#39;: 4139, &#39;peach&#39;: 4127, &#39;cherry&#39;: 4098&#125;\n&#123;&#39;apple&#39;: 4139, &#39;peach&#39;: 4127, &#39;cherry&#39;: 4098&#125;</code></pre>\n<ul>\n<li><code>dict(**kwargs)</code> -&gt; new dictionary initialized with the name=value pairs in the keyword argument list. For example: dict(one=1, two=2)</li>\n</ul>\n<p>【例子】这种情况下，键只能为字符串类型，并且创建的时候字符串不能加引号，加上就会直接报语法错误。</p>\n<p>[96]:</p>\n<pre><code>dic = dict(name=&#39;Tom&#39;, age=10)\nprint(dic)  # &#123;&#39;name&#39;: &#39;Tom&#39;, &#39;age&#39;: 10&#125;\nprint(type(dic))  # &lt;class &#39;dict&#39;&gt;\n&#123;&#39;name&#39;: &#39;Tom&#39;, &#39;age&#39;: 10&#125;\n&lt;class &#39;dict&#39;&gt;</code></pre>\n<h2 id=\"4-字典的内置方法\"><a href=\"#4-字典的内置方法\" class=\"headerlink\" title=\"4. 字典的内置方法\"></a>4. 字典的内置方法</h2><ul>\n<li><code>dict.fromkeys(seq[, value])</code> 用于创建一个新字典，以序列 <code>seq</code> 中元素做字典的键，<code>value</code> 为字典所有键对应的初始值。</li>\n</ul>\n<p>【例子】</p>\n<p>[97]:</p>\n<pre><code>seq = (&#39;name&#39;, &#39;age&#39;, &#39;sex&#39;)\ndic1 = dict.fromkeys(seq)\nprint(dic1)\n# &#123;&#39;name&#39;: None, &#39;age&#39;: None, &#39;sex&#39;: None&#125;\n\ndic2 = dict.fromkeys(seq, 10)\nprint(dic2)\n# &#123;&#39;name&#39;: 10, &#39;age&#39;: 10, &#39;sex&#39;: 10&#125;\n\ndic3 = dict.fromkeys(seq, (&#39;小马&#39;, &#39;8&#39;, &#39;男&#39;))\nprint(dic3)\n# &#123;&#39;name&#39;: (&#39;小马&#39;, &#39;8&#39;, &#39;男&#39;), &#39;age&#39;: (&#39;小马&#39;, &#39;8&#39;, &#39;男&#39;), &#39;sex&#39;: (&#39;小马&#39;, &#39;8&#39;, &#39;男&#39;)&#125;\n&#123;&#39;name&#39;: None, &#39;age&#39;: None, &#39;sex&#39;: None&#125;\n&#123;&#39;name&#39;: 10, &#39;age&#39;: 10, &#39;sex&#39;: 10&#125;\n&#123;&#39;name&#39;: (&#39;小马&#39;, &#39;8&#39;, &#39;男&#39;), &#39;age&#39;: (&#39;小马&#39;, &#39;8&#39;, &#39;男&#39;), &#39;sex&#39;: (&#39;小马&#39;, &#39;8&#39;, &#39;男&#39;)&#125;</code></pre>\n<ul>\n<li><code>dict.keys()</code>返回一个可迭代对象，可以使用 <code>list()</code> 来转换为列表，列表为字典中的所有键。</li>\n</ul>\n<p>【例子】</p>\n<p>[98]:</p>\n<pre><code>dic = &#123;&#39;Name&#39;: &#39;lsgogroup&#39;, &#39;Age&#39;: 7&#125;\nprint(dic.keys())  # dict_keys([&#39;Name&#39;, &#39;Age&#39;])\nlst = list(dic.keys())  # 转换为列表\nprint(lst)  # [&#39;Name&#39;, &#39;Age&#39;]\ndict_keys([&#39;Name&#39;, &#39;Age&#39;])\n[&#39;Name&#39;, &#39;Age&#39;]</code></pre>\n<ul>\n<li><code>dict.values()</code>返回一个迭代器，可以使用 <code>list()</code> 来转换为列表，列表为字典中的所有值。</li>\n</ul>\n<p>【例子】</p>\n<p>[100]:</p>\n<pre><code>dic = &#123;&#39;Sex&#39;: &#39;female&#39;, &#39;Age&#39;: 7, &#39;Name&#39;: &#39;Zara&#39;&#125;\nprint(dic.values())\n# dict_values([&#39;female&#39;, 7, &#39;Zara&#39;])\n\nprint(list(dic.values()))\n# [7, &#39;female&#39;, &#39;Zara&#39;]\ndict_values([&#39;female&#39;, 7, &#39;Zara&#39;])\n[&#39;female&#39;, 7, &#39;Zara&#39;]</code></pre>\n<ul>\n<li><code>dict.items()</code>以列表返回可遍历的 (键, 值) 元组数组。</li>\n</ul>\n<p>【例子】</p>\n<p>[101]:</p>\n<pre><code>dic = &#123;&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 7&#125;\nprint(dic.items())\n# dict_items([(&#39;Name&#39;, &#39;Lsgogroup&#39;), (&#39;Age&#39;, 7)])\n\nprint(tuple(dic.items()))\n# ((&#39;Name&#39;, &#39;Lsgogroup&#39;), (&#39;Age&#39;, 7))\n\nprint(list(dic.items()))\n# [(&#39;Name&#39;, &#39;Lsgogroup&#39;), (&#39;Age&#39;, 7)]\ndict_items([(&#39;Name&#39;, &#39;Lsgogroup&#39;), (&#39;Age&#39;, 7)])\n((&#39;Name&#39;, &#39;Lsgogroup&#39;), (&#39;Age&#39;, 7))\n[(&#39;Name&#39;, &#39;Lsgogroup&#39;), (&#39;Age&#39;, 7)]</code></pre>\n<ul>\n<li><code>dict.get(key, default=None)</code> 返回指定键的值，如果值不在字典中返回默认值。</li>\n</ul>\n<p>【例子】</p>\n<p>[102]:</p>\n<pre><code>dic = &#123;&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 27&#125;\nprint(&quot;Age 值为 : %s&quot; % dic.get(&#39;Age&#39;))  # Age 值为 : 27\nprint(&quot;Sex 值为 : %s&quot; % dic.get(&#39;Sex&#39;, &quot;NA&quot;))  # Sex 值为 : NA\nprint(dic)  # &#123;&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 27&#125;\nAge 值为 : 27\nSex 值为 : NA\n&#123;&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 27&#125;</code></pre>\n<ul>\n<li><code>dict.setdefault(key, default=None)</code>和<code>get()</code>方法 类似, 如果键不存在于字典中，将会添加键并将值设为默认值。</li>\n</ul>\n<p>【例子】</p>\n<p>[103]:</p>\n<pre><code>dic = &#123;&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 7&#125;\nprint(&quot;Age 键的值为 : %s&quot; % dic.setdefault(&#39;Age&#39;, None))  # Age 键的值为 : 7\nprint(&quot;Sex 键的值为 : %s&quot; % dic.setdefault(&#39;Sex&#39;, None))  # Sex 键的值为 : None\nprint(dic)  \n# &#123;&#39;Age&#39;: 7, &#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Sex&#39;: None&#125;\nAge 键的值为 : 7\nSex 键的值为 : None\n&#123;&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 7, &#39;Sex&#39;: None&#125;</code></pre>\n<ul>\n<li><code>key in dict</code> <code>in</code> 操作符用于判断键是否存在于字典中，如果键在字典 dict 里返回<code>true</code>，否则返回<code>false</code>。而<code>not in</code>操作符刚好相反，如果键在字典 dict 里返回<code>false</code>，否则返回<code>true</code>。</li>\n</ul>\n<p>【例子】</p>\n<p>[104]:</p>\n<pre><code>dic = &#123;&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 7&#125;\n\n# in 检测键 Age 是否存在\nif &#39;Age&#39; in dic:\n    print(&quot;键 Age 存在&quot;)\nelse:\n    print(&quot;键 Age 不存在&quot;)\n\n# 检测键 Sex 是否存在\nif &#39;Sex&#39; in dic:\n    print(&quot;键 Sex 存在&quot;)\nelse:\n    print(&quot;键 Sex 不存在&quot;)\n\n# not in 检测键 Age 是否存在\nif &#39;Age&#39; not in dic:\n    print(&quot;键 Age 不存在&quot;)\nelse:\n    print(&quot;键 Age 存在&quot;)\n\n# 键 Age 存在\n# 键 Sex 不存在\n# 键 Age 存在\n键 Age 存在\n键 Sex 不存在\n键 Age 存在</code></pre>\n<ul>\n<li><code>dict.pop(key[,default])</code>删除字典给定键 <code>key</code> 所对应的值，返回值为被删除的值。<code>key</code> 值必须给出。若<code>key</code>不存在，则返回 <code>default</code> 值。</li>\n<li><code>del dict[key]</code> 删除字典给定键 <code>key</code> 所对应的值。</li>\n</ul>\n<p>【例子】</p>\n<p>[105]:</p>\n<pre><code>dic1 = &#123;1: &quot;a&quot;, 2: [1, 2]&#125;\nprint(dic1.pop(1), dic1)  # a &#123;2: [1, 2]&#125;\n\n# 设置默认值，必须添加，否则报错\nprint(dic1.pop(3, &quot;nokey&quot;), dic1)  # nokey &#123;2: [1, 2]&#125;\n\ndel dic1[2]\nprint(dic1)  # &#123;&#125;\na &#123;2: [1, 2]&#125;\nnokey &#123;2: [1, 2]&#125;\n&#123;&#125;</code></pre>\n<ul>\n<li><code>dict.popitem()</code>随机返回并删除字典中的一对键和值，如果字典已经为空，却调用了此方法，就报出KeyError异常。</li>\n</ul>\n<p>【例子】</p>\n<p>[107]:</p>\n<pre><code>dic1 = &#123;1: &quot;a&quot;, 2: [1, 2]&#125;\nprint(dic1.popitem())  # &#123;2: [1, 2]&#125;\nprint(dic1)  # (1, &#39;a&#39;)\n(2, [1, 2])\n&#123;1: &#39;a&#39;&#125;</code></pre>\n<ul>\n<li><code>dict.clear()</code>用于删除字典内所有元素。</li>\n</ul>\n<p>【例子】</p>\n<p>[108]:</p>\n<pre><code>dic = &#123;&#39;Name&#39;: &#39;Zara&#39;, &#39;Age&#39;: 7&#125;\nprint(&quot;字典长度 : %d&quot; % len(dic))  # 字典长度 : 2\ndic.clear()\nprint(&quot;字典删除后长度 : %d&quot; % len(dic))  \n# 字典删除后长度 : 0\n字典长度 : 2\n字典删除后长度 : 0</code></pre>\n<ul>\n<li><code>dict.copy()</code>返回一个字典的浅复制。</li>\n</ul>\n<p>【例子】</p>\n<p>[109]:</p>\n<pre><code>dic1 = &#123;&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;&#125;\ndic2 = dic1.copy()\nprint(&quot;dic2&quot;)  \n# &#123;&#39;Age&#39;: 7, &#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Class&#39;: &#39;First&#39;&#125;\ndic2</code></pre>\n<p>【例子】直接赋值和 copy 的区别</p>\n<p>[110]:</p>\n<pre><code>dic1 = &#123;&#39;user&#39;: &#39;lsgogroup&#39;, &#39;num&#39;: [1, 2, 3]&#125;\n\n# 引用对象\ndic2 = dic1  \n# 浅拷贝父对象（一级目录），子对象（二级目录）不拷贝，还是引用\ndic3 = dic1.copy()  \n\nprint(id(dic1))  # 148635574728\nprint(id(dic2))  # 148635574728\nprint(id(dic3))  # 148635574344\n\n# 修改 data 数据\ndic1[&#39;user&#39;] = &#39;root&#39;\ndic1[&#39;num&#39;].remove(1)\n\n# 输出结果\nprint(dic1)  # &#123;&#39;user&#39;: &#39;root&#39;, &#39;num&#39;: [2, 3]&#125;\nprint(dic2)  # &#123;&#39;user&#39;: &#39;root&#39;, &#39;num&#39;: [2, 3]&#125;\nprint(dic3)  # &#123;&#39;user&#39;: &#39;runoob&#39;, &#39;num&#39;: [2, 3]&#125;\n2131669221448\n2131669221448\n2131669225120\n&#123;&#39;user&#39;: &#39;root&#39;, &#39;num&#39;: [2, 3]&#125;\n&#123;&#39;user&#39;: &#39;root&#39;, &#39;num&#39;: [2, 3]&#125;\n&#123;&#39;user&#39;: &#39;lsgogroup&#39;, &#39;num&#39;: [2, 3]&#125;</code></pre>\n<ul>\n<li><code>dict.update(dict2)</code>把字典参数 <code>dict2</code> 的 <code>key:value</code>对 更新到字典 <code>dict</code> 里。</li>\n</ul>\n<p>【例子】</p>\n<p>[111]:</p>\n<pre><code>dic = &#123;&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 7&#125;\ndic2 = &#123;&#39;Sex&#39;: &#39;female&#39;, &#39;Age&#39;: 8&#125;\ndic.update(dic2)\nprint(dic)  \n# &#123;&#39;Sex&#39;: &#39;female&#39;, &#39;Age&#39;: 8, &#39;Name&#39;: &#39;Lsgogroup&#39;&#125;\n&#123;&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 8, &#39;Sex&#39;: &#39;female&#39;&#125;</code></pre>\n<h1 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h1><p>Python 中<code>set</code>与<code>dict</code>类似，也是一组<code>key</code>的集合，但不存储<code>value</code>。由于<code>key</code>不能重复，所以，在<code>set</code>中，没有重复的<code>key</code>。</p>\n<p>注意，<code>key</code>为不可变类型，即可哈希的值。</p>\n<p>【例子】</p>\n<p>[112]:</p>\n<pre><code>num = &#123;&#125;\nprint(type(num))  # &lt;class &#39;dict&#39;&gt;\nnum = &#123;1, 2, 3, 4&#125;\nprint(type(num))  # &lt;class &#39;set&#39;&gt;\n&lt;class &#39;dict&#39;&gt;\n&lt;class &#39;set&#39;&gt;</code></pre>\n<h2 id=\"1-集合的创建\"><a href=\"#1-集合的创建\" class=\"headerlink\" title=\"1. 集合的创建\"></a>1. 集合的创建</h2><ul>\n<li>先创建对象再加入元素。</li>\n<li>在创建空集合的时候只能使用<code>s = set()</code>，因为<code>s = &#123;&#125;</code>创建的是空字典。</li>\n</ul>\n<p>【例子】</p>\n<p>[113]:</p>\n<pre><code>basket = set()\nbasket.add(&#39;apple&#39;)\nbasket.add(&#39;banana&#39;)\nprint(basket)  # &#123;&#39;banana&#39;, &#39;apple&#39;&#125;\n&#123;&#39;banana&#39;, &#39;apple&#39;&#125;</code></pre>\n<ul>\n<li>直接把一堆元素用花括号括起来<code>&#123;元素1, 元素2, ..., 元素n&#125;</code>。</li>\n<li>重复元素在<code>set</code>中会被自动被过滤。</li>\n</ul>\n<p>【例子】</p>\n<p>[114]:</p>\n<pre><code>basket = &#123;&#39;apple&#39;, &#39;orange&#39;, &#39;apple&#39;, &#39;pear&#39;, &#39;orange&#39;, &#39;banana&#39;&#125;\nprint(basket)  # &#123;&#39;banana&#39;, &#39;apple&#39;, &#39;pear&#39;, &#39;orange&#39;&#125;\n&#123;&#39;pear&#39;, &#39;orange&#39;, &#39;banana&#39;, &#39;apple&#39;&#125;</code></pre>\n<ul>\n<li>使用<code>set(value)</code>工厂函数，把列表或元组转换成集合。</li>\n</ul>\n<p>【例子】</p>\n<p>[115]:</p>\n<pre><code>a = set(&#39;abracadabra&#39;)\nprint(a)  \n# &#123;&#39;r&#39;, &#39;b&#39;, &#39;d&#39;, &#39;c&#39;, &#39;a&#39;&#125;\n\nb = set((&quot;Google&quot;, &quot;Lsgogroup&quot;, &quot;Taobao&quot;, &quot;Taobao&quot;))\nprint(b)  \n# &#123;&#39;Taobao&#39;, &#39;Lsgogroup&#39;, &#39;Google&#39;&#125;\n\nc = set([&quot;Google&quot;, &quot;Lsgogroup&quot;, &quot;Taobao&quot;, &quot;Google&quot;])\nprint(c)  \n# &#123;&#39;Taobao&#39;, &#39;Lsgogroup&#39;, &#39;Google&#39;&#125;\n&#123;&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;&#125;\n&#123;&#39;Taobao&#39;, &#39;Google&#39;, &#39;Lsgogroup&#39;&#125;\n&#123;&#39;Taobao&#39;, &#39;Google&#39;, &#39;Lsgogroup&#39;&#125;</code></pre>\n<p>【例子】去掉列表中重复的元素</p>\n<p>[116]:</p>\n<pre><code>lst = [0, 1, 2, 3, 4, 5, 5, 3, 1]\n\ntemp = []\nfor item in lst:\n    if item not in temp:\n        temp.append(item)\n\nprint(temp)  # [0, 1, 2, 3, 4, 5]\n\na = set(lst)\nprint(list(a))  # [0, 1, 2, 3, 4, 5]\n[0, 1, 2, 3, 4, 5]\n[0, 1, 2, 3, 4, 5]</code></pre>\n<p>从结果发现集合的两个特点：无序 (unordered) 和唯一 (unique)。</p>\n<p>由于 <code>set</code> 存储的是无序集合，所以我们不可以为集合创建索引或执行切片(slice)操作，也没有键(keys)可用来获取集合中元素的值，但是可以判断一个元素是否在集合中。</p>\n<h2 id=\"2-访问集合中的值\"><a href=\"#2-访问集合中的值\" class=\"headerlink\" title=\"2. 访问集合中的值\"></a>2. 访问集合中的值</h2><ul>\n<li>可以使用<code>len()</code>內建函数得到集合的大小。</li>\n</ul>\n<p>【例子】</p>\n<p>[117]:</p>\n<pre><code>s = set([&#39;Google&#39;, &#39;Baidu&#39;, &#39;Taobao&#39;])\nprint(len(s))  # 3\n3</code></pre>\n<ul>\n<li>可以使用<code>for</code>把集合中的数据一个个读取出来。</li>\n</ul>\n<p>【例子】</p>\n<p>[7]:</p>\n<pre><code>s = set([&#39;Google&#39;, &#39;Baidu&#39;, &#39;Taobao&#39;])\nfor item in s:\n    print(item)\n\n# Baidu\n# Google\n# Taobao\nBaidu\nTaobao\nGoogle</code></pre>\n<ul>\n<li>可以通过<code>in</code>或<code>not in</code>判断一个元素是否在集合中已经存在</li>\n</ul>\n<p>【例子】</p>\n<p>[119]:</p>\n<pre><code>s = set([&#39;Google&#39;, &#39;Baidu&#39;, &#39;Taobao&#39;])\nprint(&#39;Taobao&#39; in s)  # True\nprint(&#39;Facebook&#39; not in s)  # True\nTrue\nTrue</code></pre>\n<h2 id=\"3-集合的内置方法\"><a href=\"#3-集合的内置方法\" class=\"headerlink\" title=\"3. 集合的内置方法\"></a>3. 集合的内置方法</h2><ul>\n<li><code>set.add(elmnt)</code>用于给集合添加元素，如果添加的元素在集合中已存在，则不执行任何操作。</li>\n</ul>\n<p>【例子】</p>\n<p>[120]:</p>\n<pre><code>fruits = &#123;&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;&#125;\nfruits.add(&quot;orange&quot;)\nprint(fruits)  \n# &#123;&#39;orange&#39;, &#39;cherry&#39;, &#39;banana&#39;, &#39;apple&#39;&#125;\n\nfruits.add(&quot;apple&quot;)\nprint(fruits)  \n# &#123;&#39;orange&#39;, &#39;cherry&#39;, &#39;banana&#39;, &#39;apple&#39;&#125;\n&#123;&#39;cherry&#39;, &#39;orange&#39;, &#39;banana&#39;, &#39;apple&#39;&#125;\n&#123;&#39;cherry&#39;, &#39;orange&#39;, &#39;banana&#39;, &#39;apple&#39;&#125;</code></pre>\n<ul>\n<li><code>set.update(set)</code>用于修改当前集合，可以添加新的元素或集合到当前集合中，如果添加的元素在集合中已存在，则该元素只会出现一次，重复的会忽略。</li>\n</ul>\n<p>【例子】</p>\n<p>[121]:</p>\n<pre><code>x = &#123;&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;&#125;\ny = &#123;&quot;google&quot;, &quot;baidu&quot;, &quot;apple&quot;&#125;\nx.update(y)\nprint(x)\n# &#123;&#39;cherry&#39;, &#39;banana&#39;, &#39;apple&#39;, &#39;google&#39;, &#39;baidu&#39;&#125;\n\ny.update([&quot;lsgo&quot;, &quot;dreamtech&quot;])\nprint(y)\n# &#123;&#39;lsgo&#39;, &#39;baidu&#39;, &#39;dreamtech&#39;, &#39;apple&#39;, &#39;google&#39;&#125;\n&#123;&#39;google&#39;, &#39;banana&#39;, &#39;cherry&#39;, &#39;apple&#39;, &#39;baidu&#39;&#125;\n&#123;&#39;apple&#39;, &#39;dreamtech&#39;, &#39;lsgo&#39;, &#39;google&#39;, &#39;baidu&#39;&#125;</code></pre>\n<ul>\n<li><code>set.remove(item)</code> 用于移除集合中的指定元素。如果元素不存在，则会发生错误。</li>\n</ul>\n<p>【例子】</p>\n<p>[122]:</p>\n<pre><code>fruits = &#123;&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;&#125;\nfruits.remove(&quot;banana&quot;)\nprint(fruits)  # &#123;&#39;apple&#39;, &#39;cherry&#39;&#125;\n&#123;&#39;cherry&#39;, &#39;apple&#39;&#125;</code></pre>\n<ul>\n<li><code>set.discard(value)</code> 用于移除指定的集合元素。<code>remove()</code> 方法在移除一个不存在的元素时会发生错误，而 <code>discard()</code> 方法不会。</li>\n</ul>\n<p>【例子】</p>\n<p>[123]:</p>\n<pre><code>fruits = &#123;&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;&#125;\nfruits.discard(&quot;banana&quot;)\nprint(fruits)  # &#123;&#39;apple&#39;, &#39;cherry&#39;&#125;\n&#123;&#39;cherry&#39;, &#39;apple&#39;&#125;</code></pre>\n<ul>\n<li><code>set.pop()</code> 用于随机移除一个元素。</li>\n</ul>\n<p>【例子】</p>\n<p>[66]:</p>\n<pre><code>fruits = &#123;&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;&#125;\nx = fruits.pop()\nprint(fruits)  # &#123;&#39;cherry&#39;, &#39;apple&#39;&#125;\nprint(x)  # banana\n&#123;&#39;banana&#39;, &#39;apple&#39;&#125;\ncherry</code></pre>\n<p>由于 set 是无序和无重复元素的集合，所以两个或多个 set 可以做数学意义上的集合操作。</p>\n<ul>\n<li><code>set.intersection(set1, set2)</code> 返回两个集合的交集。</li>\n<li><code>set1 &amp; set2</code> 返回两个集合的交集。</li>\n<li><code>set.intersection_update(set1, set2)</code> 交集，在原始的集合上移除不重叠的元素。</li>\n</ul>\n<p>【例子】</p>\n<p>[67]:</p>\n<pre><code>a = set(&#39;abracadabra&#39;)\nb = set(&#39;alacazam&#39;)\nprint(a)  # &#123;&#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;b&#39;, &#39;d&#39;&#125;\nprint(b)  # &#123;&#39;c&#39;, &#39;a&#39;, &#39;l&#39;, &#39;m&#39;, &#39;z&#39;&#125;\n\nc = a.intersection(b)\nprint(c)  # &#123;&#39;a&#39;, &#39;c&#39;&#125;\nprint(a &amp; b)  # &#123;&#39;c&#39;, &#39;a&#39;&#125;\nprint(a)  # &#123;&#39;a&#39;, &#39;r&#39;, &#39;c&#39;, &#39;b&#39;, &#39;d&#39;&#125;\n\na.intersection_update(b)\nprint(a)  # &#123;&#39;a&#39;, &#39;c&#39;&#125;\n&#123;&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;&#125;\n&#123;&#39;l&#39;, &#39;a&#39;, &#39;c&#39;, &#39;z&#39;, &#39;m&#39;&#125;\n&#123;&#39;a&#39;, &#39;c&#39;&#125;\n&#123;&#39;a&#39;, &#39;c&#39;&#125;\n&#123;&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;&#125;\n&#123;&#39;a&#39;, &#39;c&#39;&#125;</code></pre>\n<ul>\n<li><code>set.union(set1, set2)</code> 返回两个集合的并集。</li>\n<li><code>set1 | set2</code> 返回两个集合的并集。</li>\n</ul>\n<p>【例子】</p>\n<p>[68]:</p>\n<pre><code>a = set(&#39;abracadabra&#39;)\nb = set(&#39;alacazam&#39;)\nprint(a)  # &#123;&#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;b&#39;, &#39;d&#39;&#125;\nprint(b)  # &#123;&#39;c&#39;, &#39;a&#39;, &#39;l&#39;, &#39;m&#39;, &#39;z&#39;&#125;\n\nprint(a | b)  \n# &#123;&#39;l&#39;, &#39;d&#39;, &#39;m&#39;, &#39;b&#39;, &#39;a&#39;, &#39;r&#39;, &#39;z&#39;, &#39;c&#39;&#125;\n\nc = a.union(b)\nprint(c)  \n# &#123;&#39;c&#39;, &#39;a&#39;, &#39;d&#39;, &#39;m&#39;, &#39;r&#39;, &#39;b&#39;, &#39;z&#39;, &#39;l&#39;&#125;\n&#123;&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;&#125;\n&#123;&#39;l&#39;, &#39;a&#39;, &#39;c&#39;, &#39;z&#39;, &#39;m&#39;&#125;\n&#123;&#39;l&#39;, &#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;z&#39;, &#39;d&#39;, &#39;m&#39;&#125;\n&#123;&#39;l&#39;, &#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;z&#39;, &#39;d&#39;, &#39;m&#39;&#125;</code></pre>\n<ul>\n<li><code>set.difference(set)</code> 返回集合的差集。</li>\n<li><code>set1 - set2</code> 返回集合的差集。</li>\n<li><code>set.difference_update(set)</code> 集合的差集，直接在原来的集合中移除元素，没有返回值。</li>\n</ul>\n<p>【例子】</p>\n<p>[69]:</p>\n<pre><code>a = set(&#39;abracadabra&#39;)\nb = set(&#39;alacazam&#39;)\nprint(a)  # &#123;&#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;b&#39;, &#39;d&#39;&#125;\nprint(b)  # &#123;&#39;c&#39;, &#39;a&#39;, &#39;l&#39;, &#39;m&#39;, &#39;z&#39;&#125;\n\nc = a.difference(b)\nprint(c)  # &#123;&#39;b&#39;, &#39;d&#39;, &#39;r&#39;&#125;\nprint(a - b)  # &#123;&#39;d&#39;, &#39;b&#39;, &#39;r&#39;&#125;\n\nprint(a)  # &#123;&#39;r&#39;, &#39;d&#39;, &#39;c&#39;, &#39;a&#39;, &#39;b&#39;&#125;\na.difference_update(b)\nprint(a)  # &#123;&#39;d&#39;, &#39;r&#39;, &#39;b&#39;&#125;\n&#123;&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;&#125;\n&#123;&#39;l&#39;, &#39;a&#39;, &#39;c&#39;, &#39;z&#39;, &#39;m&#39;&#125;\n&#123;&#39;d&#39;, &#39;b&#39;, &#39;r&#39;&#125;\n&#123;&#39;d&#39;, &#39;b&#39;, &#39;r&#39;&#125;\n&#123;&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;&#125;\n&#123;&#39;b&#39;, &#39;r&#39;, &#39;d&#39;&#125;</code></pre>\n<ul>\n<li><code>set.symmetric_difference(set)</code>返回集合的异或。</li>\n<li><code>set1 ^ set2</code> 返回集合的异或。</li>\n<li><code>set.symmetric_difference_update(set)</code>移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。</li>\n</ul>\n<p>【例子】</p>\n<p>[70]:</p>\n<pre><code>a = set(&#39;abracadabra&#39;)\nb = set(&#39;alacazam&#39;)\nprint(a)  # &#123;&#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;b&#39;, &#39;d&#39;&#125;\nprint(b)  # &#123;&#39;c&#39;, &#39;a&#39;, &#39;l&#39;, &#39;m&#39;, &#39;z&#39;&#125;\n\nc = a.symmetric_difference(b)\nprint(c)  # &#123;&#39;m&#39;, &#39;r&#39;, &#39;l&#39;, &#39;b&#39;, &#39;z&#39;, &#39;d&#39;&#125;\nprint(a ^ b)  # &#123;&#39;m&#39;, &#39;r&#39;, &#39;l&#39;, &#39;b&#39;, &#39;z&#39;, &#39;d&#39;&#125;\n\nprint(a)  # &#123;&#39;r&#39;, &#39;d&#39;, &#39;c&#39;, &#39;a&#39;, &#39;b&#39;&#125;\na.symmetric_difference_update(b)\nprint(a)  # &#123;&#39;r&#39;, &#39;b&#39;, &#39;m&#39;, &#39;l&#39;, &#39;z&#39;, &#39;d&#39;&#125;\n&#123;&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;&#125;\n&#123;&#39;l&#39;, &#39;a&#39;, &#39;c&#39;, &#39;z&#39;, &#39;m&#39;&#125;\n&#123;&#39;l&#39;, &#39;b&#39;, &#39;z&#39;, &#39;r&#39;, &#39;d&#39;, &#39;m&#39;&#125;\n&#123;&#39;l&#39;, &#39;b&#39;, &#39;z&#39;, &#39;r&#39;, &#39;d&#39;, &#39;m&#39;&#125;\n&#123;&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;&#125;\n&#123;&#39;l&#39;, &#39;b&#39;, &#39;r&#39;, &#39;z&#39;, &#39;d&#39;, &#39;m&#39;&#125;</code></pre>\n<ul>\n<li><code>set.issubset(set)</code>判断集合是不是被其他集合包含，如果是则返回 True，否则返回 False。</li>\n<li><code>set1 &lt;= set2</code> 判断集合是不是被其他集合包含，如果是则返回 True，否则返回 False。</li>\n</ul>\n<p>【例子】</p>\n<p>[71]:</p>\n<pre><code>x = &#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;&#125;\ny = &#123;&quot;f&quot;, &quot;e&quot;, &quot;d&quot;, &quot;c&quot;, &quot;b&quot;, &quot;a&quot;&#125;\nz = x.issubset(y)\nprint(z)  # True\nprint(x &lt;= y)  # True\n\nx = &#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;&#125;\ny = &#123;&quot;f&quot;, &quot;e&quot;, &quot;d&quot;, &quot;c&quot;, &quot;b&quot;&#125;\nz = x.issubset(y)\nprint(z)  # False\nprint(x &lt;= y)  # False\nTrue\nTrue\nFalse\nFalse</code></pre>\n<ul>\n<li><code>set.issuperset(set)</code>用于判断集合是不是包含其他集合，如果是则返回 True，否则返回 False。</li>\n<li><code>set1 &gt;= set2</code> 判断集合是不是包含其他集合，如果是则返回 True，否则返回 False。</li>\n</ul>\n<p>【例子】</p>\n<p>[72]:</p>\n<pre><code>x = &#123;&quot;f&quot;, &quot;e&quot;, &quot;d&quot;, &quot;c&quot;, &quot;b&quot;, &quot;a&quot;&#125;\ny = &#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;&#125;\nz = x.issuperset(y)\nprint(z)  # True\nprint(x &gt;= y)  # True\n\nx = &#123;&quot;f&quot;, &quot;e&quot;, &quot;d&quot;, &quot;c&quot;, &quot;b&quot;&#125;\ny = &#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;&#125;\nz = x.issuperset(y)\nprint(z)  # False\nprint(x &gt;= y)  # False\nTrue\nTrue\nFalse\nFalse</code></pre>\n<ul>\n<li><code>set.isdisjoint(set)</code> 用于判断两个集合是不是不相交，如果是返回 True，否则返回 False。</li>\n</ul>\n<p>【例子】</p>\n<p>[73]:</p>\n<pre><code>x = &#123;&quot;f&quot;, &quot;e&quot;, &quot;d&quot;, &quot;c&quot;, &quot;b&quot;&#125;\ny = &#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;&#125;\nz = x.isdisjoint(y)\nprint(z)  # False\n\nx = &#123;&quot;f&quot;, &quot;e&quot;, &quot;d&quot;, &quot;m&quot;, &quot;g&quot;&#125;\ny = &#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;&#125;\nz = x.isdisjoint(y)\nprint(z)  # True\nFalse\nTrue</code></pre>\n<h2 id=\"4-集合的转换\"><a href=\"#4-集合的转换\" class=\"headerlink\" title=\"4. 集合的转换\"></a>4. 集合的转换</h2><p>【例子】</p>\n<p>[74]:</p>\n<pre><code>se = set(range(4))\nli = list(se)\ntu = tuple(se)\n\nprint(se, type(se))  # &#123;0, 1, 2, 3&#125; &lt;class &#39;set&#39;&gt;\nprint(li, type(li))  # [0, 1, 2, 3] &lt;class &#39;list&#39;&gt;\nprint(tu, type(tu))  # (0, 1, 2, 3) &lt;class &#39;tuple&#39;&gt;\n&#123;0, 1, 2, 3&#125; &lt;class &#39;set&#39;&gt;\n[0, 1, 2, 3] &lt;class &#39;list&#39;&gt;\n(0, 1, 2, 3) &lt;class &#39;tuple&#39;&gt;</code></pre>\n<h2 id=\"5-不可变集合\"><a href=\"#5-不可变集合\" class=\"headerlink\" title=\"5. 不可变集合\"></a>5. 不可变集合</h2><p>Python 提供了不能改变元素的集合的实现版本，即不能增加或删除元素，类型名叫<code>frozenset</code>。需要注意的是<code>frozenset</code>仍然可以进行集合操作，只是不能用带有<code>update</code>的方法。</p>\n<ul>\n<li><code>frozenset([iterable])</code> 返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。</li>\n</ul>\n<p>【例子】</p>\n<p>[75]:</p>\n<pre><code>a = frozenset(range(10))  # 生成一个新的不可变集合\nprint(a)  \n# frozenset(&#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9&#125;)\n\nb = frozenset(&#39;lsgogroup&#39;)\nprint(b)  \n# frozenset(&#123;&#39;g&#39;, &#39;s&#39;, &#39;p&#39;, &#39;r&#39;, &#39;u&#39;, &#39;o&#39;, &#39;l&#39;&#125;)\nfrozenset(&#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9&#125;)\nfrozenset(&#123;&#39;l&#39;, &#39;g&#39;, &#39;r&#39;, &#39;u&#39;, &#39;o&#39;, &#39;s&#39;, &#39;p&#39;&#125;)</code></pre>\n<h1 id=\"序列\"><a href=\"#序列\" class=\"headerlink\" title=\"序列\"></a>序列</h1><p>在 Python 中，序列类型包括字符串、列表、元组、集合和字典，这些序列支持一些通用的操作，但比较特殊的是，集合和字典不支持索引、切片、相加和相乘操作。</p>\n<h2 id=\"1-针对序列的内置函数\"><a href=\"#1-针对序列的内置函数\" class=\"headerlink\" title=\"1. 针对序列的内置函数\"></a>1. 针对序列的内置函数</h2><ul>\n<li><code>list(sub)</code> 把一个可迭代对象转换为列表。</li>\n</ul>\n<p>【例子】</p>\n<p>[76]:</p>\n<pre><code>a = list()\nprint(a)  # []\n\nb = &#39;I Love LsgoGroup&#39;\nb = list(b)\nprint(b)  \n# [&#39;I&#39;, &#39; &#39;, &#39;L&#39;, &#39;o&#39;, &#39;v&#39;, &#39;e&#39;, &#39; &#39;, &#39;L&#39;, &#39;s&#39;, &#39;g&#39;, &#39;o&#39;, &#39;G&#39;, &#39;r&#39;, &#39;o&#39;, &#39;u&#39;, &#39;p&#39;]\n\nc = (1, 1, 2, 3, 5, 8)\nc = list(c)\nprint(c)  # [1, 1, 2, 3, 5, 8]\n[]\n[&#39;I&#39;, &#39; &#39;, &#39;L&#39;, &#39;o&#39;, &#39;v&#39;, &#39;e&#39;, &#39; &#39;, &#39;L&#39;, &#39;s&#39;, &#39;g&#39;, &#39;o&#39;, &#39;G&#39;, &#39;r&#39;, &#39;o&#39;, &#39;u&#39;, &#39;p&#39;]\n[1, 1, 2, 3, 5, 8]</code></pre>\n<ul>\n<li><code>tuple(sub)</code> 把一个可迭代对象转换为元组。</li>\n</ul>\n<p>【例子】</p>\n<p>[77]:</p>\n<pre><code>a = tuple()\nprint(a)  # ()\n\nb = &#39;I Love LsgoGroup&#39;\nb = tuple(b)\nprint(b)  \n# (&#39;I&#39;, &#39; &#39;, &#39;L&#39;, &#39;o&#39;, &#39;v&#39;, &#39;e&#39;, &#39; &#39;, &#39;L&#39;, &#39;s&#39;, &#39;g&#39;, &#39;o&#39;, &#39;G&#39;, &#39;r&#39;, &#39;o&#39;, &#39;u&#39;, &#39;p&#39;)\n\nc = [1, 1, 2, 3, 5, 8]\nc = tuple(c)\nprint(c)  # (1, 1, 2, 3, 5, 8)\n()\n(&#39;I&#39;, &#39; &#39;, &#39;L&#39;, &#39;o&#39;, &#39;v&#39;, &#39;e&#39;, &#39; &#39;, &#39;L&#39;, &#39;s&#39;, &#39;g&#39;, &#39;o&#39;, &#39;G&#39;, &#39;r&#39;, &#39;o&#39;, &#39;u&#39;, &#39;p&#39;)\n(1, 1, 2, 3, 5, 8)</code></pre>\n<ul>\n<li><code>str(obj)</code> 把obj对象转换为字符串</li>\n</ul>\n<p>【例子】</p>\n<p>[78]:</p>\n<pre><code>a = 123\na = str(a)\nprint(a)  # 123\n123</code></pre>\n<ul>\n<li><pre><code>len(s)</code></pre>\n</li>\n</ul>\n<p>  返回对象（字符、列表、元组等）长度或元素个数。</p>\n<ul>\n<li><code>s</code> – 对象。</li>\n</ul>\n<p>【例子】</p>\n<p>[79]:</p>\n<pre><code>a = list()\nprint(len(a))  # 0\n\nb = (&#39;I&#39;, &#39; &#39;, &#39;L&#39;, &#39;o&#39;, &#39;v&#39;, &#39;e&#39;, &#39; &#39;, &#39;L&#39;, &#39;s&#39;, &#39;g&#39;, &#39;o&#39;, &#39;G&#39;, &#39;r&#39;, &#39;o&#39;, &#39;u&#39;, &#39;p&#39;)\nprint(len(b))  # 16\n\nc = &#39;I Love LsgoGroup&#39;\nprint(len(c))  # 16\n0\n16\n16</code></pre>\n<ul>\n<li><code>max(sub)</code>返回序列或者参数集合中的最大值</li>\n</ul>\n<p>【例子】</p>\n<p>[80]:</p>\n<pre><code>print(max(1, 2, 3, 4, 5))  # 5\nprint(max([-8, 99, 3, 7, 83]))  # 99\nprint(max(&#39;IloveLsgoGroup&#39;))  # v\n5\n99\nv</code></pre>\n<ul>\n<li><code>min(sub)</code>返回序列或参数集合中的最小值</li>\n</ul>\n<p>【例子】</p>\n<p>[81]:</p>\n<pre><code>print(min(1, 2, 3, 4, 5))  # 1\nprint(min([-8, 99, 3, 7, 83]))  # -8\nprint(min(&#39;IloveLsgoGroup&#39;))  # G\n1\n-8\nG</code></pre>\n<ul>\n<li><code>sum(iterable[, start=0])</code> 返回序列<code>iterable</code>与可选参数<code>start</code>的总和。</li>\n</ul>\n<p>【例子】</p>\n<p>[82]:</p>\n<pre><code>print(sum([1, 3, 5, 7, 9]))  # 25\nprint(sum([1, 3, 5, 7, 9], 10))  # 35\nprint(sum((1, 3, 5, 7, 9)))  # 25\nprint(sum((1, 3, 5, 7, 9), 20))  # 45\n25\n35\n25\n45</code></pre>\n<ul>\n<li><pre><code>sorted(iterable, key=None, reverse=False)</code></pre>\n</li>\n</ul>\n<p>  对所有可迭代的对象进行排序操作。</p>\n<ul>\n<li><code>iterable</code> – 可迭代对象。</li>\n<li><code>key</code> – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</li>\n<li><code>reverse</code> – 排序规则，<code>reverse = True</code> 降序 ， <code>reverse = False</code> 升序（默认）。</li>\n<li>返回重新排序的列表。</li>\n</ul>\n<p>【例子】</p>\n<p>[83]:</p>\n<pre><code>x = [-8, 99, 3, 7, 83]\nprint(sorted(x))  # [-8, 3, 7, 83, 99]\nprint(sorted(x, reverse=True))  # [99, 83, 7, 3, -8]\n\nt = (&#123;&quot;age&quot;: 20, &quot;name&quot;: &quot;a&quot;&#125;, &#123;&quot;age&quot;: 25, &quot;name&quot;: &quot;b&quot;&#125;, &#123;&quot;age&quot;: 10, &quot;name&quot;: &quot;c&quot;&#125;)\nx = sorted(t, key=lambda a: a[&quot;age&quot;])\nprint(x)\n# [&#123;&#39;age&#39;: 10, &#39;name&#39;: &#39;c&#39;&#125;, &#123;&#39;age&#39;: 20, &#39;name&#39;: &#39;a&#39;&#125;, &#123;&#39;age&#39;: 25, &#39;name&#39;: &#39;b&#39;&#125;]\n[-8, 3, 7, 83, 99]\n[99, 83, 7, 3, -8]\n[&#123;&#39;age&#39;: 10, &#39;name&#39;: &#39;c&#39;&#125;, &#123;&#39;age&#39;: 20, &#39;name&#39;: &#39;a&#39;&#125;, &#123;&#39;age&#39;: 25, &#39;name&#39;: &#39;b&#39;&#125;]</code></pre>\n<ul>\n<li><pre><code>reversed(seq)</code></pre>\n</li>\n</ul>\n<p>  函数返回一个反转的迭代器。</p>\n<ul>\n<li><code>seq</code> – 要转换的序列，可以是 tuple, string, list 或 range。</li>\n</ul>\n<p>【例子】</p>\n<p>[84]:</p>\n<pre><code>s = &#39;lsgogroup&#39;\nx = reversed(s)\nprint(type(x))  # &lt;class &#39;reversed&#39;&gt;\nprint(x)  # &lt;reversed object at 0x000002507E8EC2C8&gt;\nprint(list(x))\n# [&#39;p&#39;, &#39;u&#39;, &#39;o&#39;, &#39;r&#39;, &#39;g&#39;, &#39;o&#39;, &#39;g&#39;, &#39;s&#39;, &#39;l&#39;]\n\nt = (&#39;l&#39;, &#39;s&#39;, &#39;g&#39;, &#39;o&#39;, &#39;g&#39;, &#39;r&#39;, &#39;o&#39;, &#39;u&#39;, &#39;p&#39;)\nprint(list(reversed(t)))\n# [&#39;p&#39;, &#39;u&#39;, &#39;o&#39;, &#39;r&#39;, &#39;g&#39;, &#39;o&#39;, &#39;g&#39;, &#39;s&#39;, &#39;l&#39;]\n\nr = range(5, 9)\nprint(list(reversed(r)))\n# [8, 7, 6, 5]\n\nx = [-8, 99, 3, 7, 83]\nprint(list(reversed(x)))\n# [83, 7, 3, 99, -8]\n&lt;class &#39;reversed&#39;&gt;\n&lt;reversed object at 0x000001F0517DFD68&gt;\n[&#39;p&#39;, &#39;u&#39;, &#39;o&#39;, &#39;r&#39;, &#39;g&#39;, &#39;o&#39;, &#39;g&#39;, &#39;s&#39;, &#39;l&#39;]\n[&#39;p&#39;, &#39;u&#39;, &#39;o&#39;, &#39;r&#39;, &#39;g&#39;, &#39;o&#39;, &#39;g&#39;, &#39;s&#39;, &#39;l&#39;]\n[8, 7, 6, 5]\n[83, 7, 3, 99, -8]</code></pre>\n<ul>\n<li><code>enumerate(sequence, [start=0])</code></li>\n</ul>\n<p>【例子】用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</p>\n<p>[85]:</p>\n<pre><code>seasons = [&#39;Spring&#39;, &#39;Summer&#39;, &#39;Fall&#39;, &#39;Winter&#39;]\na = list(enumerate(seasons))\nprint(a)  \n# [(0, &#39;Spring&#39;), (1, &#39;Summer&#39;), (2, &#39;Fall&#39;), (3, &#39;Winter&#39;)]\n\nb = list(enumerate(seasons, 1))\nprint(b)  \n# [(1, &#39;Spring&#39;), (2, &#39;Summer&#39;), (3, &#39;Fall&#39;), (4, &#39;Winter&#39;)]\n\nfor i, element in a:\n    print(&#39;&#123;0&#125;,&#123;1&#125;&#39;.format(i, element))\n# 0,Spring\n# 1,Summer\n# 2,Fall\n# 3,Winter\n[(0, &#39;Spring&#39;), (1, &#39;Summer&#39;), (2, &#39;Fall&#39;), (3, &#39;Winter&#39;)]\n[(1, &#39;Spring&#39;), (2, &#39;Summer&#39;), (3, &#39;Fall&#39;), (4, &#39;Winter&#39;)]\n0,Spring\n1,Summer\n2,Fall\n3,Winter</code></pre>\n<ul>\n<li><pre><code>zip(iter1 [,iter2 [...]])</code></pre>\n<ul>\n<li>用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，这样做的好处是节约了不少的内存。</li>\n<li>我们可以使用 <code>list()</code> 转换来输出列表。</li>\n<li>如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 <code>*</code> 号操作符，可以将元组解压为列表。</li>\n</ul>\n</li>\n</ul>\n<p>【例子】</p>\n<p>[86]:</p>\n<pre><code>a = [1, 2, 3]\nb = [4, 5, 6]\nc = [4, 5, 6, 7, 8]\n\nzipped = zip(a, b)\nprint(zipped)  # &lt;zip object at 0x000000C5D89EDD88&gt;\nprint(list(zipped))  # [(1, 4), (2, 5), (3, 6)]\nzipped = zip(a, c)\nprint(list(zipped))  # [(1, 4), (2, 5), (3, 6)]\n\na1, a2 = zip(*zip(a, b))\nprint(list(a1))  # [1, 2, 3]\nprint(list(a2))  # [4, 5, 6]\n&lt;zip object at 0x000001F0517E38C8&gt;\n[(1, 4), (2, 5), (3, 6)]\n[(1, 4), (2, 5), (3, 6)]\n[1, 2, 3]\n[4, 5, 6]</code></pre>\n",
            "tags": []
        },
        {
            "id": "https://alanosy.github.io/2021/01/26/python-day-1/",
            "url": "https://alanosy.github.io/2021/01/26/python-day-1/",
            "title": "python_day_1",
            "date_published": "2021-01-26T05:39:02.000Z",
            "content_html": "<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>Python 是一种通用编程语言，其在科学计算和机器学习领域具有广泛的应用。如果我们打算利用 Python 来执行机器学习，那么对 Python 有一些基本的了解就是至关重要的。本 Python 入门系列体验就是为这样的初学者精心准备的。</p>\n<p>本实验包括以下内容：</p>\n<ul>\n<li><p>变量、运算符与数据类型</p>\n<ul>\n<li><p><strong>注释</strong></p>\n<p>在python中，#表示注释，作用于整行</p>\n<p>例如：</p>\n<pre><code class=\"bashs\">print(&quot;Hello World&quot;)\n#我的第一个程序</code></pre>\n<p>其中”我的第一个程序“在代码不起运行作用</p>\n<p>另外还有多行注释用```来标注</p>\n<p>例如</p>\n<pre><code class=\"bash\">​```\n这是一个多引号注释\n用于注释多行\n···\nprint(&quot;Hello china&quot;)</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p><strong>运算符</strong></p>\n<p><strong>算术运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th><code>&gt;</code></th>\n<th>大于</th>\n<th><code>2 &gt; 1</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>&gt;=</code></td>\n<td>大于等于</td>\n<td><code>2 &gt;= 4</code></td>\n</tr>\n<tr>\n<td><code>&lt;</code></td>\n<td>小于</td>\n<td><code>1 &lt; 2</code></td>\n</tr>\n<tr>\n<td><code>&lt;=</code></td>\n<td>小于等于</td>\n<td><code>5 &lt;= 2</code></td>\n</tr>\n<tr>\n<td><code>==</code></td>\n<td>等于</td>\n<td><code>3 == 4</code></td>\n</tr>\n<tr>\n<td><code>!=</code></td>\n<td>不等于</td>\n<td><code>3 != 5</code></td>\n</tr>\n</tbody></table>\n<p>例子</p>\n<pre><code class=\"python\">print(1 + 1)  # 2\nprint(2 - 1)  # 1\nprint(3 * 4)  # 12\nprint(3 / 4)  # 0.75\nprint(3 // 4)  # 0\nprint(3 % 4)  # 3\nprint(2 ** 3)  # 8</code></pre>\n<p><strong>比较运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th><code>and</code></th>\n<th>与</th>\n<th><code>(3 &gt; 2) and (3 &lt; 5)</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>or</code></td>\n<td>或</td>\n<td><code>(1 &gt; 3) or (9 &lt; 2)</code></td>\n</tr>\n<tr>\n<td><code>not</code></td>\n<td>非</td>\n<td><code>not (2 &gt; 1)</code></td>\n</tr>\n</tbody></table>\n<p>例子</p>\n<pre><code class=\"python\">print(2 &gt; 1)  # True\nprint(2 &gt;= 4)  # False\nprint(1 &lt; 2)  # True\nprint(5 &lt;= 2)  # False\nprint(3 == 4)  # False\nprint(3 != 5)  # True</code></pre>\n<p><strong>逻辑运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th><code>and</code></th>\n<th>与</th>\n<th align=\"center\"><code>(3 &gt; 2) and (3 &lt; 5)</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>or</code></td>\n<td>或</td>\n<td align=\"center\"><code>(1 &gt; 3) or (9 &lt; 2)</code></td>\n</tr>\n<tr>\n<td><code>not</code></td>\n<td>非</td>\n<td align=\"center\"><code>not (2 &gt; 1)</code></td>\n</tr>\n</tbody></table>\n<p>例子</p>\n<pre><code class=\"python\">print((3 &gt; 2) and (3 &lt; 5))  # True\nprint((1 &gt; 3) or (9 &lt; 2))  # False\nprint(not (2 &gt; 1))  # False</code></pre>\n<p><strong>位运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th><code>~</code></th>\n<th>按位取反</th>\n<th><code>~4</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>&amp;</code></td>\n<td>按位与</td>\n<td><code>4 &amp; 5</code></td>\n</tr>\n<tr>\n<td>`</td>\n<td>`</td>\n<td>按位或</td>\n</tr>\n<tr>\n<td><code>^</code></td>\n<td>按位异或</td>\n<td><code>4 ^ 5</code></td>\n</tr>\n<tr>\n<td><code>&lt;&lt;</code></td>\n<td>左移</td>\n<td><code>4 &lt;&lt; 2</code></td>\n</tr>\n<tr>\n<td><code>&gt;&gt;</code></td>\n<td>右移</td>\n<td><code>4 &gt;&gt; 2</code></td>\n</tr>\n</tbody></table>\n<p>例子</p>\n<pre><code class=\"python\">print(bin(4))  # 0b100\nprint(bin(5))  # 0b101\nprint(bin(~4), ~4)  # -0b101 -5\nprint(bin(4 &amp; 5), 4 &amp; 5)  # 0b100 4\nprint(bin(4 | 5), 4 | 5)  # 0b101 5\nprint(bin(4 ^ 5), 4 ^ 5)  # 0b1 1\nprint(bin(4 &lt;&lt; 2), 4 &lt;&lt; 2)  # 0b10000 16\nprint(bin(4 &gt;&gt; 2), 4 &gt;&gt; 2)  # 0b1 1</code></pre>\n<p><strong>三元运算符</strong></p>\n<p>例子</p>\n<pre><code class=\"python\">x, y = 4, 5\nif x &lt; y:\n    small = x\nelse:\n    small = y\n\nprint(small)  # 4</code></pre>\n</li>\n</ul>\n<pre><code>**其他运算符**\n\n| `in`     | 存在   | `&#39;A&#39; in [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]`     |\n| -------- | ------ | ---------------------------- |\n| `not in` | 不存在 | `&#39;h&#39; not in [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]` |\n| `is`     | 是     | `&quot;hello&quot; is &quot;hello&quot;`         |\n| `not is` | 不是   | `&quot;hello&quot; is not &quot;hello&quot;`     |\n\n例子\n\n``` python\nletters = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]\nif &#39;A&#39; in letters:\n    print(&#39;A&#39; + &#39; exists&#39;)\nif &#39;h&#39; not in letters:\n    print(&#39;h&#39; + &#39; not exists&#39;)\n\n# A exists\n# h not exists\n```\n\n``` python\na = &quot;hello&quot;\nb = &quot;hello&quot;\nprint(a is b, a == b)  # True True\nprint(a is not b, a != b)  # False False\n```\n\n``` python\na = [&quot;hello&quot;]\nb = [&quot;hello&quot;]\nprint(a is b, a == b)  # False True\nprint(a is not b, a != b)  # True False\n```\n\n\n\n注意：\n\n- is, is not 对比的是两个变量的内存地址\n- ==, != 对比的是两个变量的值\n- 比较的两个变量，指向的都是地址不可变的类型（str等），那么is，is not 和 ==，！= 是完全等价的。\n- 对比的两个变量，指向的是地址可变的类型（list，dict，tuple等），则两者是有区别的。\n\n**运算符的优先级**\n\n| **                | 指数（最高优先级）       |\n| ----------------- | ------------------------ |\n| ~+-               | 按位翻转，一元加号和减号 |\n| * / % //          | 乘，除，取模和取整除）   |\n| + -               | 加法减法                 |\n| &gt;&gt; &lt;&lt;             | 右移，左移运算符         |\n| &amp;                 | 位‘AND’                  |\n| ^\\|               | 位运算符                 |\n| &lt;=&lt;&gt;&gt;=            | 比较运算符               |\n| &lt;&gt;==!=            | 等于运算符               |\n| =%=/=//=-=+=*=**= | 赋值运算符               |\n| is is not         | 身份运算符               |\n| in not in         | 成员运算符               |\n| not and or        | 逻辑运算符               |\n\n例子\n\n``` python\nprint(-3 ** 2)  # -9\nprint(3 ** -2)  # 0.1111111111111111\nprint(1 &lt;&lt; 3 + 2 &amp; 7)  # 0\nprint(-3 * 2 + 5 / -2 - 4)  # -12.5\nprint(3 &lt; 4 and 4 &lt; 5)  # True\n```</code></pre>\n<ul>\n<li><p><strong>变量和赋值</strong></p>\n</li>\n<li><p>在使用变量之前，需要对其先赋值。</p>\n</li>\n<li><p>变量名可以包括字母、数字、下划线、但变量名不能以数字开头。</p>\n</li>\n<li><p>Python 变量名是大小写敏感的，foo != Foo。</p>\n<p>例子</p>\n<pre><code class=\"bash\">first = 2\nsecond = 3\nthird = first + second\nprint(third)  # 5</code></pre>\n</li>\n</ul>\n<pre><code>**数据类型与转换**</code></pre>\n<ul>\n<li><table>\n<thead>\n<tr>\n<th>int</th>\n<th>整型 <code>&lt;class &#39;int&#39;&gt;</code></th>\n<th><code>-876, 10</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>float</td>\n<td>浮点型<code>&lt;class &#39;float&#39;&gt;</code></td>\n<td><code>3.149, 11.11</code></td>\n</tr>\n<tr>\n<td>bool</td>\n<td>布尔型<code>&lt;class &#39;bool&#39;&gt;</code></td>\n<td><code>True, False</code></td>\n</tr>\n</tbody></table>\n<pre><code class=\"bash\">i = input(&quot;i=&quot;)\nprint(i,type(i))可以查看i的类型</code></pre>\n<ul>\n<li>获取类型信息 <code>type(object)</code></li>\n</ul>\n<p>type()` 不会认为子类是一种父类类型，不考虑继承关系。</p>\n<p>isinstance()` 会认为子类是一种父类类型，考虑继承关系。</p>\n<p>如果要判断两个类型是否相同推荐使用 <code>isinstance()</code>。</p>\n<p><strong>类型转换</strong></p>\n<ul>\n<li>转换为整型 <code>int(x, base=10)</code></li>\n<li>转换为字符串 <code>str(object=&#39;&#39;)</code></li>\n<li>转换为浮点型 <code>float(x)</code></li>\n</ul>\n</li>\n<li><p><strong>print() 函数</strong></p>\n<pre><code class=\"bash\">print(*objects, sep=&#39; &#39;, end=&#39;\\n&#39;, file=sys.stdout, flush=False)</code></pre>\n<ul>\n<li>将对象以字符串表示的方式格式化输出到流文件对象file里。其中所有非关键字参数都按<code>str()</code>方式进行转换为字符串输出；</li>\n<li>关键字参数<code>sep</code>是实现分隔符，比如多个参数输出时想要输出中间的分隔字符；</li>\n<li>关键字参数<code>end</code>是输出结束时的字符，默认是换行符<code>\\n</code>；</li>\n<li>关键字参数<code>file</code>是定义流输出的文件，可以是标准的系统输出<code>sys.stdout</code>，也可以重定义为别的文件；</li>\n<li>关键字参数<code>flush</code>是立即把内容输出到流文件，不作缓存。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>位运算</p>\n<ul>\n<li><p>原码、反码和补码</p>\n</li>\n<li><p>二进制有三种不同的表示形式：原码、反码和补码，计算机内部使用补码来表示。</p>\n<p><strong>原码</strong>：就是其二进制表示（注意，有一位符号位）。</p>\n<pre><code class=\"python\">00 00 00 11 -&gt; 3\n10 00 00 11 -&gt; -3</code></pre>\n<p><strong>反码</strong>：正数的反码就是原码，负数的反码是符号位不变，其余位取反（对应正数按位取反）。</p>\n<pre><code class=\"python\">00 00 00 11 -&gt; 3\n11 11 11 00 -&gt; -3</code></pre>\n<p><strong>补码</strong>：正数的补码就是原码，负数的补码是反码+1。</p>\n<pre><code class=\"python\">00 00 00 11 -&gt; 3\n11 11 11 01 -&gt; -3</code></pre>\n</li>\n<li></li>\n<li><p>按位非操作 ~</p>\n</li>\n<li><pre><code class=\"python\">~ 1 = 0\n~ 0 = 1</code></pre>\n</li>\n<li><p>按位与操作 &amp;</p>\n</li>\n<li><pre><code class=\"python\">1 &amp; 1 = 1\n1 &amp; 0 = 0\n0 &amp; 1 = 0\n0 &amp; 0 = 0</code></pre>\n</li>\n<li><p>按位或操作 |</p>\n</li>\n<li><pre><code class=\"python\">1 | 1 = 1\n1 | 0 = 1\n0 | 1 = 1\n0 | 0 = 0</code></pre>\n</li>\n<li><p>按位异或操作 ^</p>\n</li>\n<li><pre><code class=\"python\">1 ^ 1 = 0\n1 ^ 0 = 1\n0 ^ 1 = 1\n0 ^ 0 = 0</code></pre>\n</li>\n<li><p>按位左移操作 &lt;&lt;</p>\n</li>\n<li><pre><code class=\"python\">00 00 10 11 -&gt; 11\n11 &lt;&lt; 3\n---\n01 01 10 00 -&gt; 88 </code></pre>\n</li>\n<li><p>按位右移操作 &gt;&gt;</p>\n</li>\n<li><pre><code class=\"python\">00 00 10 11 -&gt; 11\n11 &gt;&gt; 2\n---\n00 00 00 10 -&gt; 2 </code></pre>\n</li>\n<li><p>利用位运算实现快速计算</p>\n</li>\n<li><p>通过 <code>&lt;&lt;</code>，<code>&gt;&gt;</code> 快速计算2的倍数问题。</p>\n<pre><code class=\"python\">n &lt;&lt; 1 -&gt; 计算 n*2\nn &gt;&gt; 1 -&gt; 计算 n/2，负奇数的运算不可用\nn &lt;&lt; m -&gt; 计算 n*(2^m)，即乘以 2 的 m 次方\nn &gt;&gt; m -&gt; 计算 n/(2^m)，即除以 2 的 m 次方\n1 &lt;&lt; n -&gt; 2^n</code></pre>\n<p>通过 <code>^</code> 快速交换两个整数。 通过 <code>^</code> 快速交换两个整数。</p>\n<pre><code class=\"python\">a ^= b\nb ^= a\na ^= b</code></pre>\n<p>通过 <code>a &amp; (-a)</code> 快速获取<code>a</code>的最后为 1 位置的整数。</p>\n<pre><code class=\"python\">00 00 01 01 -&gt; 5\n&amp;\n11 11 10 11 -&gt; -5\n---\n00 00 00 01 -&gt; 1\n\n00 00 11 10 -&gt; 14\n&amp;\n11 11 00 10 -&gt; -14\n---\n00 00 00 10 -&gt; 2</code></pre>\n</li>\n<li><p>利用位运算实现整数集合</p>\n</li>\n<li><p>一个数的二进制表示可以看作是一个集合（0 表示不在集合中，1 表示在集合中）。</p>\n<p>比如集合 <code>&#123;1, 3, 4, 8&#125;</code>，可以表示成 <code>01 00 01 10 10</code> 而对应的位运算也就可以看作是对集合进行的操作。</p>\n<p>元素与集合的操作：</p>\n<pre><code class=\"python\">a | (1&lt;&lt;i)  -&gt; 把 i 插入到集合中\na &amp; ~(1&lt;&lt;i) -&gt; 把 i 从集合中删除\na &amp; (1&lt;&lt;i)  -&gt; 判断 i 是否属于该集合（零不属于，非零属于）</code></pre>\n<p>集合之间的操作：</p>\n<pre><code class=\"python\">a 补   -&gt; ~a\na 交 b -&gt; a &amp; b\na 并 b -&gt; a | b\na 差 b -&gt; a &amp; (~b)</code></pre>\n<p>注意：整数在内存中是以补码的形式存在的，输出自然也是按照补码输出。</p>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>【例子】 Python 的`bin()` 输出。\n\n[37]:\n\n```\nprint(bin(3))  # 0b11\nprint(bin(-3))  # -0b11\n\nprint(bin(-3 &amp; 0xffffffff))  \n# 0b11111111111111111111111111111101\n\nprint(bin(0xfffffffd))       \n# 0b11111111111111111111111111111101\n\nprint(0xfffffffd)  # 4294967293\n```</code></pre>\n<ul>\n<li><p>Python中<code>bin</code>一个负数（十进制表示），输出的是它的原码的二进制表示加上个负号，巨坑。</p>\n</li>\n<li><p>Python中的整型是补码形式存储的。</p>\n</li>\n<li><p>Python中整型是不限制长度的不会超范围溢出。</p>\n<p>所以为了获得负数（十进制表示）的补码，需要手动将其和十六进制数<code>0xffffffff</code>进行按位与操作，再交给<code>bin()</code>进行输出，得到的才是负数的补码表示。</p>\n</li>\n<li><p>条件语句</p>\n</li>\n</ul>\n<ul>\n<li><h2 id=\"if-语句\"><a href=\"#if-语句\" class=\"headerlink\" title=\"if 语句\"></a>if 语句</h2><pre><code class=\"python\">if expression:\n    expr_true_suite</code></pre>\n<ul>\n<li><p>if 语句的 <code>expr_true_suite</code> 代码块只有当条件表达式 <code>expression</code> 结果为真时才执行，否则将继续执行紧跟在该代码块后面的语句。</p>\n</li>\n<li><p>单个 if 语句中的 <code>expression</code> 条件表达式可以通过布尔操作符 <code>and</code>，<code>or</code>和<code>not</code> 实现多重条件判断。</p>\n</li>\n<li><p>【例子】</p>\n<p>[38]:</p>\n<pre><code>if 2 &gt; 1 and not 2 &gt; 3:\n    print(&#39;Correct Judgement!&#39;)\n\n# Correct Judgement!</code></pre>\n</li>\n</ul>\n</li>\n<li><h2 id=\"2-if-else-语句\"><a href=\"#2-if-else-语句\" class=\"headerlink\" title=\"2. if - else 语句\"></a>2. if - else 语句</h2><pre><code class=\"python\">if expression:\n    expr_true_suite\nelse:\n    expr_false_suite</code></pre>\n<ul>\n<li>Python 提供与 if 搭配使用的 else，如果 if 语句的条件表达式结果布尔值为假，那么程序将执行 else 语句后的代码。</li>\n</ul>\n<p>【例子】</p>\n<p>[39]:</p>\n<pre><code>temp = input(&quot;猜一猜小姐姐想的是哪个数字？&quot;)\nguess = int(temp) # input 函数将接收的任何数据类型都默认为 str。\nif guess == 666:\n    print(&quot;你太了解小姐姐的心思了！&quot;)\n    print(&quot;哼，猜对也没有奖励！&quot;)\nelse:\n    print(&quot;猜错了，小姐姐现在心里想的是666！&quot;)\nprint(&quot;游戏结束，不玩儿啦！&quot;)\n猜一猜小姐姐想的是哪个数字？666\n你太了解小姐姐的心思了！\n哼，猜对也没有奖励！\n游戏结束，不玩儿啦！</code></pre>\n<p><code>if</code>语句支持嵌套，即在一个<code>if</code>语句中嵌入另一个<code>if</code>语句，从而构成不同层次的选择结构。</p>\n<p>【例子】Python 使用缩进而不是大括号来标记代码块边界，因此要特别注意<code>else</code>的悬挂问题。</p>\n<p>[40]:</p>\n<pre><code>hi = 6\nif hi &gt; 2:\n    if hi &gt; 7:\n        print(&#39;好棒!好棒!&#39;)\nelse:\n    print(&#39;切~&#39;)\n\n# 无输出</code></pre>\n<p>【例子】</p>\n<p>[41]:</p>\n<pre><code>temp = input(&quot;猜一猜小姐姐想的是哪个数字？&quot;)\nguess = int(temp)\nif guess &gt; 8:\n    print(&quot;大了，大了&quot;)\nelse:\n    if guess == 8:\n        print(&quot;你太了解小姐姐的心思了！&quot;)\n        print(&quot;哼，猜对也没有奖励！&quot;)\n    else:\n        print(&quot;小了，小了&quot;)\nprint(&quot;游戏结束，不玩儿啦！&quot;)\n猜一猜小姐姐想的是哪个数字？8\n你太了解小姐姐的心思了！\n哼，猜对也没有奖励！\n游戏结束，不玩儿啦！</code></pre>\n<h2 id=\"3-if-elif-else-语句\"><a href=\"#3-if-elif-else-语句\" class=\"headerlink\" title=\"3. if - elif - else 语句\"></a>3. if - elif - else 语句</h2><pre><code class=\"python\">if expression1:\n    expr1_true_suite\nelif expression2:\n    expr2_true_suite\n    .\n    .\nelif expressionN:\n    exprN_true_suite\nelse:\n    expr_false_suite</code></pre>\n<ul>\n<li>elif 语句即为 else if，用来检查多个表达式是否为真，并在为真时执行特定代码块中的代码。</li>\n</ul>\n<p>【例子】</p>\n<p>[42]:</p>\n<pre><code>temp = input(&#39;请输入成绩:&#39;)\nsource = int(temp)\nif 100 &gt;= source &gt;= 90:\n    print(&#39;A&#39;)\nelif 90 &gt; source &gt;= 80:\n    print(&#39;B&#39;)\nelif 80 &gt; source &gt;= 60:\n    print(&#39;C&#39;)\nelif 60 &gt; source &gt;= 0:\n    print(&#39;D&#39;)\nelse:\n    print(&#39;输入错误！&#39;)\n请输入成绩:99\nA</code></pre>\n<h2 id=\"4-assert-关键词\"><a href=\"#4-assert-关键词\" class=\"headerlink\" title=\"4. assert 关键词\"></a>4. assert 关键词</h2><ul>\n<li><code>assert</code>这个关键词我们称之为“断言”，当这个关键词后边的条件为 False 时，程序自动崩溃并抛出<code>AssertionError</code>的异常。</li>\n</ul>\n<p>【例子】</p>\n<p>[ ]:</p>\n<pre><code>my_list = [&#39;lsgogroup&#39;]\nmy_list.pop(0)\nassert len(my_list) &gt; 0\n\n# AssertionError</code></pre>\n<p>【例子】在进行单元测试时，可以用来在程序中置入检查点，只有条件为 True 才能让程序正常工作。</p>\n<p>[ ]:</p>\n<pre><code>assert 3 &gt; 7\n\n# AssertionError</code></pre>\n<h1 id=\"循环语句\"><a href=\"#循环语句\" class=\"headerlink\" title=\"循环语句\"></a>循环语句</h1><h2 id=\"1-while-循环\"><a href=\"#1-while-循环\" class=\"headerlink\" title=\"1. while 循环\"></a>1. while 循环</h2><p><code>while</code>语句最基本的形式包括一个位于顶部的布尔表达式，一个或多个属于<code>while</code>代码块的缩进语句。</p>\n<pre><code class=\"python\">while 布尔表达式:\n    代码块</code></pre>\n<p><code>while</code>循环的代码块会一直循环执行，直到布尔表达式的值为布尔假。</p>\n<p>如果布尔表达式不带有<code>&lt;、&gt;、==、！=、in、not in</code>等运算符，仅仅给出数值之类的条件，也是可以的。当<code>while</code>后写入一个非零整数时，视为真值，执行循环体；写入<code>0</code>时，视为假值，不执行循环体。也可以写入<code>str、list</code>或任何序列，长度非零则视为真值，执行循环体；否则视为假值，不执行循环体。</p>\n<p>【例子】</p>\n<p>[44]:</p>\n<pre><code>count = 0\nwhile count &lt; 3:\n    temp = input(&quot;猜一猜小姐姐想的是哪个数字？&quot;)\n    guess = int(temp)\n    if guess &gt; 8:\n        print(&quot;大了，大了&quot;)\n    else:\n        if guess == 8:\n            print(&quot;你太了解小姐姐的心思了！&quot;)\n            print(&quot;哼，猜对也没有奖励！&quot;)\n            count = 3\n        else:\n            print(&quot;小了，小了&quot;)\n    count = count + 1\nprint(&quot;游戏结束，不玩儿啦！&quot;)\n猜一猜小姐姐想的是哪个数字？8\n你太了解小姐姐的心思了！\n哼，猜对也没有奖励！\n游戏结束，不玩儿啦！</code></pre>\n<p>【例子】布尔表达式返回0，循环终止。</p>\n<p>[45]:</p>\n<pre><code>string = &#39;abcd&#39;\nwhile string:\n    print(string)\n    string = string[1:]\n\n# abcd\n# bcd\n# cd\n# d\nabcd\nbcd\ncd\nd</code></pre>\n<hr>\n<h2 id=\"2-while-else-循环\"><a href=\"#2-while-else-循环\" class=\"headerlink\" title=\"2. while - else 循环\"></a>2. while - else 循环</h2><pre><code class=\"python\">while 布尔表达式:\n    代码块\nelse:\n    代码块</code></pre>\n<p>当<code>while</code>循环正常执行完的情况下，执行<code>else</code>输出，如果<code>while</code>循环中执行了跳出循环的语句，比如 <code>break</code>，将不执行<code>else</code>代码块的内容。</p>\n<p>【例子】</p>\n<p>[46]:</p>\n<pre><code>count = 0\nwhile count &lt; 5:\n    print(&quot;%d is  less than 5&quot; % count)\n    count = count + 1\nelse:\n    print(&quot;%d is not less than 5&quot; % count)\n\n# 0 is  less than 5\n# 1 is  less than 5\n# 2 is  less than 5\n# 3 is  less than 5\n# 4 is  less than 5\n# 5 is not less than 5\n0 is  less than 5\n1 is  less than 5\n2 is  less than 5\n3 is  less than 5\n4 is  less than 5\n5 is not less than 5</code></pre>\n<p>【例子】</p>\n<p>[47]:</p>\n<pre><code>count = 0\nwhile count &lt; 5:\n    print(&quot;%d is  less than 5&quot; % count)\n    count = 6\n    break\nelse:\n    print(&quot;%d is not less than 5&quot; % count)\n\n# 0 is  less than 5\n0 is  less than 5</code></pre>\n<hr>\n<h2 id=\"3-for-循环\"><a href=\"#3-for-循环\" class=\"headerlink\" title=\"3. for 循环\"></a>3. for 循环</h2><p><code>for</code>循环是迭代循环，在Python中相当于一个通用的序列迭代器，可以遍历任何有序序列，如<code>str、list、tuple</code>等，也可以遍历任何可迭代对象，如<code>dict</code>。</p>\n<pre><code class=\"python\">for 迭代变量 in 可迭代对象:\n    代码块</code></pre>\n<p>每次循环，迭代变量被设置为可迭代对象的当前元素，提供给代码块使用。</p>\n<p>【例子】</p>\n<p>[48]:</p>\n<pre><code>for i in &#39;ILoveLSGO&#39;:\n    print(i, end=&#39; &#39;)  # 不换行输出\n\n# I L o v e L S G O\nI L o v e L S G O </code></pre>\n<p>【例子】</p>\n<p>[49]:</p>\n<pre><code>member = [&#39;张三&#39;, &#39;李四&#39;, &#39;刘德华&#39;, &#39;刘六&#39;, &#39;周润发&#39;]\nfor each in member:\n    print(each)\n\n# 张三\n# 李四\n# 刘德华\n# 刘六\n# 周润发\n\nfor i in range(len(member)):\n    print(member[i])\n\n# 张三\n# 李四\n# 刘德华\n# 刘六\n# 周润发\n张三\n李四\n刘德华\n刘六\n周润发\n张三\n李四\n刘德华\n刘六\n周润发</code></pre>\n<p>【例子】</p>\n<p>[50]:</p>\n<pre><code>dic = &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;\n\nfor key, value in dic.items():\n    print(key, value, sep=&#39;:&#39;, end=&#39; &#39;)\n\n# a:1 b:2 c:3 d:4 \na:1 b:2 c:3 d:4 </code></pre>\n<p>【例子】</p>\n<p>[51]:</p>\n<pre><code>dic = &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;\n\nfor key in dic.keys():\n    print(key, end=&#39; &#39;)\n\n# a b c d \na b c d </code></pre>\n<p>【例子】</p>\n<p>[52]:</p>\n<pre><code>dic = &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;\n\nfor value in dic.values():\n    print(value, end=&#39; &#39;)\n\n# 1 2 3 4\n1 2 3 4 </code></pre>\n<hr>\n<h2 id=\"4-for-else-循环\"><a href=\"#4-for-else-循环\" class=\"headerlink\" title=\"4. for - else 循环\"></a>4. for - else 循环</h2><pre><code class=\"python\">for 迭代变量 in 可迭代对象:\n    代码块\nelse:\n    代码块</code></pre>\n<p>当<code>for</code>循环正常执行完的情况下，执行<code>else</code>输出，如果<code>for</code>循环中执行了跳出循环的语句，比如 <code>break</code>，将不执行<code>else</code>代码块的内容，与<code>while - else</code>语句一样。</p>\n<p>【例子】</p>\n<p>[53]:</p>\n<pre><code>for num in range(10, 20):  # 迭代 10 到 20 之间的数字\n    for i in range(2, num):  # 根据因子迭代\n        if num % i == 0:  # 确定第一个因子\n            j = num / i  # 计算第二个因子\n            print(&#39;%d 等于 %d * %d&#39; % (num, i, j))\n            break  # 跳出当前循环\n    else:  # 循环的 else 部分\n        print(num, &#39;是一个质数&#39;)\n\n# 10 等于 2 * 5\n# 11 是一个质数\n# 12 等于 2 * 6\n# 13 是一个质数\n# 14 等于 2 * 7\n# 15 等于 3 * 5\n# 16 等于 2 * 8\n# 17 是一个质数\n# 18 等于 2 * 9\n# 19 是一个质数\n10 等于 2 * 5\n11 是一个质数\n12 等于 2 * 6\n13 是一个质数\n14 等于 2 * 7\n15 等于 3 * 5\n16 等于 2 * 8\n17 是一个质数\n18 等于 2 * 9\n19 是一个质数</code></pre>\n<hr>\n<h2 id=\"5-range-函数\"><a href=\"#5-range-函数\" class=\"headerlink\" title=\"5. range() 函数\"></a>5. range() 函数</h2><pre><code class=\"python\">range([start,] stop[, step=1])</code></pre>\n<ul>\n<li>这个BIF（Built-in functions）有三个参数，其中用中括号括起来的两个表示这两个参数是可选的。</li>\n<li><code>step=1</code> 表示第三个参数的默认值是1。</li>\n<li><code>range</code> 这个BIF的作用是生成一个从<code>start</code>参数的值开始到<code>stop</code>参数的值结束的数字序列，该序列包含<code>start</code>的值但不包含<code>stop</code>的值。</li>\n</ul>\n<p>【例子】</p>\n<p>[54]:</p>\n<pre><code>for i in range(2, 9):  # 不包含9\n    print(i)\n\n# 2\n# 3\n# 4\n# 5\n# 6\n# 7\n# 8\n2\n3\n4\n5\n6\n7\n8</code></pre>\n<p>【例子】</p>\n<p>[55]:</p>\n<pre><code>for i in range(1, 10, 2):\n    print(i)\n\n# 1\n# 3\n# 5\n# 7\n# 9\n1\n3\n5\n7\n9</code></pre>\n<hr>\n<h2 id=\"6-enumerate-函数\"><a href=\"#6-enumerate-函数\" class=\"headerlink\" title=\"6. enumerate()函数\"></a>6. enumerate()函数</h2><pre><code class=\"python\">enumerate(sequence, [start=0])</code></pre>\n<ul>\n<li>sequence：一个序列、迭代器或其他支持迭代对象。</li>\n<li>start：下标起始位置。</li>\n<li>返回 enumerate(枚举) 对象</li>\n</ul>\n<p>【例子】</p>\n<p>[56]:</p>\n<pre><code>seasons = [&#39;Spring&#39;, &#39;Summer&#39;, &#39;Fall&#39;, &#39;Winter&#39;]\nlst = list(enumerate(seasons))\nprint(lst)\n# [(0, &#39;Spring&#39;), (1, &#39;Summer&#39;), (2, &#39;Fall&#39;), (3, &#39;Winter&#39;)]\nlst = list(enumerate(seasons, start=1))  # 下标从 1 开始\nprint(lst)\n# [(1, &#39;Spring&#39;), (2, &#39;Summer&#39;), (3, &#39;Fall&#39;), (4, &#39;Winter&#39;)]\n[(0, &#39;Spring&#39;), (1, &#39;Summer&#39;), (2, &#39;Fall&#39;), (3, &#39;Winter&#39;)]\n[(1, &#39;Spring&#39;), (2, &#39;Summer&#39;), (3, &#39;Fall&#39;), (4, &#39;Winter&#39;)]</code></pre>\n<p><code>enumerate()</code>与 for 循环的结合使用。</p>\n<pre><code class=\"python\">for i, a in enumerate(A)\n    do something with a  </code></pre>\n<p>用 <code>enumerate(A)</code> 不仅返回了 <code>A</code> 中的元素，还顺便给该元素一个索引值 (默认从 0 开始)。此外，用 <code>enumerate(A, j)</code> 还可以确定索引起始值为 <code>j</code>。</p>\n<p>【例子】</p>\n<p>[57]:</p>\n<pre><code>languages = [&#39;Python&#39;, &#39;R&#39;, &#39;Matlab&#39;, &#39;C++&#39;]\nfor language in languages:\n    print(&#39;I love&#39;, language)\nprint(&#39;Done!&#39;)\n# I love Python\n# I love R\n# I love Matlab\n# I love C++\n# Done!\n\n</code></pre>\n</li>\n</ul>\n<pre><code>for i, language in enumerate(languages, 2):\n    print(i, &#39;I love&#39;, language)\nprint(&#39;Done!&#39;)\n# 2 I love Python\n# 3 I love R\n# 4 I love Matlab\n# 5 I love C++\n# Done!\nI love Python\nI love R\nI love Matlab\nI love C++\nDone!\n2 I love Python\n3 I love R\n4 I love Matlab\n5 I love C++\nDone!\n```\n\n------\n\n## 7. break 语句\n\n`break`语句可以跳出当前所在层的循环。\n\n【例子】\n\n[59]:\n\n```\nimport random\nsecret = random.randint(1, 10) #[1,10]之间的随机数\n\nwhile True:\n    temp = input(&quot;猜一猜小姐姐想的是哪个数字？&quot;)\n    guess = int(temp)\n    if guess &gt; secret:\n        print(&quot;大了，大了&quot;)\n    else:\n        if guess == secret:\n            print(&quot;你太了解小姐姐的心思了！&quot;)\n            print(&quot;哼，猜对也没有奖励！&quot;)\n            break\n        else:\n            print(&quot;小了，小了&quot;)\nprint(&quot;游戏结束，不玩儿啦！&quot;)\n猜一猜小姐姐想的是哪个数字？8\n你太了解小姐姐的心思了！\n哼，猜对也没有奖励！\n游戏结束，不玩儿啦！\n```\n\n------\n\n## 8. continue 语句\n\n`continue`终止本轮循环并开始下一轮循环。\n\n【例子】\n\n[60]:\n\n```\nfor i in range(10):\n    if i % 2 != 0:\n        print(i)\n        continue\n    i += 2\n    print(i)\n\n# 2\n# 1\n# 4\n# 3\n# 6\n# 5\n# 8\n# 7\n# 10\n# 9\n2\n1\n4\n3\n6\n5\n8\n7\n10\n9\n```\n\n------\n\n## 9. pass 语句\n\n`pass` 语句的意思是“不做任何事”，如果你在需要有语句的地方不写任何语句，那么解释器会提示出错，而 `pass` 语句就是用来解决这些问题的。\n\n【例子】\n\n```python\ndef a_func():\n\n# SyntaxError: unexpected EOF while parsing\n```\n\n【例子】\n\n```python\ndef a_func():\n    pass\n```\n\n`pass`是空语句，不做任何操作，只起到占位的作用，其作用是为了保持程序结构的完整性。尽管`pass`语句不做任何操作，但如果暂时不确定要在一个位置放上什么样的代码，可以先放置一个`pass`语句，让代码可以正常运行。\n\n------\n\n## 10. 推导式\n\n**列表推导式**\n\n```python\n[ expr for value in collection [if condition] ]\n```\n\n【例子】\n\n[61]:\n\n```\nx = [-4, -2, 0, 2, 4]\ny = [a * 2 for a in x]\nprint(y)\n# [-8, -4, 0, 4, 8]\n[-8, -4, 0, 4, 8]\n```\n\n【例子】\n\n[63]:\n\n```\nx = [i ** 2 for i in range(1, 10)]\nprint(x)\n# [1, 4, 9, 16, 25, 36, 49, 64, 81]\n[1, 4, 9, 16, 25, 36, 49, 64, 81]\n```\n\n【例子】\n\n[64]:\n\n```\nx = [(i, i ** 2) for i in range(6)]\nprint(x)\n\n# [(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]\n[(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]\n```\n\n【例子】\n\n[65]:\n\n```\nx = [i for i in range(100) if (i % 2) != 0 and (i % 3) == 0]\nprint(x)\n\n# [3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93, 99]\n[3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93, 99]\n```\n\n【例子】\n\n[66]:\n\n```\na = [(i, j) for i in range(0, 3) for j in range(0, 3)]\nprint(a)\n\n# [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]\n[(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]\n```\n\n【例子】\n\n[67]:\n\n```\nx = [[i, j] for i in range(0, 3) for j in range(0, 3)]\nprint(x)\n# [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]\n\nx[0][0] = 10\nprint(x)\n# [[10, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]\n[[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]\n[[10, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]\n```\n\n【例子】\n\n[68]:\n\n```\na = [(i, j) for i in range(0, 3) if i &lt; 1 for j in range(0, 3) if j &gt; 1]\nprint(a)\n\n# [(0, 2)]\n[(0, 2)]\n```\n\n**元组推导式**\n\n```python\n( expr for value in collection [if condition] )\n```\n\n【例子】\n\n[69]:\n\n```\na = (x for x in range(10))\nprint(a)\n\n# &lt;generator object &lt;genexpr&gt; at 0x0000025BE511CC48&gt;\n\nprint(tuple(a))\n\n# (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n&lt;generator object &lt;genexpr&gt; at 0x0000014CEC2E28B8&gt;\n(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n```\n\n**字典推导式**\n\n```python\n&#123; key_expr: value_expr for value in collection [if condition] &#125;\n```\n\n【例子】\n\n[70]:\n\n```\nb = &#123;i: i % 2 == 0 for i in range(10) if i % 3 == 0&#125;\nprint(b)\n# &#123;0: True, 3: False, 6: True, 9: False&#125;\n&#123;0: True, 3: False, 6: True, 9: False&#125;\n```\n\n**集合推导式**\n\n```\n&#123; expr for value in collection [if condition] &#125;\n```\n\n【例子】\n\n[71]:\n\n```\nc = &#123;i for i in [1, 2, 3, 4, 5, 5, 6, 4, 3, 2, 1]&#125;\nprint(c)\n# &#123;1, 2, 3, 4, 5, 6&#125;\n&#123;1, 2, 3, 4, 5, 6&#125;\n```\n\n**其它**\n\n- `next(iterator[, default])` Return the next item from the iterator. If default is given and the iterator is exhausted, it is returned instead of raising StopIteration.\n\n【例子】\n\n[72]:\n\n```\ne = (i for i in range(10))\nprint(e)\n# &lt;generator object &lt;genexpr&gt; at 0x0000007A0B8D01B0&gt;\n\nprint(next(e))  # 0\nprint(next(e))  # 1\n\nfor each in e:\n    print(each, end=&#39; &#39;)\n\n# 2 3 4 5 6 7 8 9\n&lt;generator object &lt;genexpr&gt; at 0x0000014CEC389C78&gt;\n0\n1\n2 3 4 5 6 7 8 9 \n```\n\n【例子】\n\n[73]:\n\n```\ns = sum([i for i in range(101)])\nprint(s)  # 5050\ns = sum((i for i in range(101)))\nprint(s)  # 5050\n5050\n5050\n```\n\n# 异常处理\n\n异常就是运行期检测到的错误。计算机语言针对可能出现的错误定义了异常类型，某种错误引发对应的异常时，异常处理程序将被启动，从而恢复程序的正常运行。\n\n## 1. Python 标准异常总结\n\n- BaseException：所有异常的 **基类**\n- Exception：常规异常的 **基类**\n- StandardError：所有的内建标准异常的基类\n- ArithmeticError：所有数值计算异常的基类\n- FloatingPointError：浮点计算异常\n- OverflowError：数值运算超出最大限制\n- ZeroDivisionError：除数为零\n- AssertionError：断言语句（assert）失败\n- AttributeError：尝试访问未知的对象属性\n- EOFError：没有内建输入，到达EOF标记\n- EnvironmentError：操作系统异常的基类\n- IOError：输入/输出操作失败\n- OSError：操作系统产生的异常（例如打开一个不存在的文件）\n- WindowsError：系统调用失败\n- ImportError：导入模块失败的时候\n- KeyboardInterrupt：用户中断执行\n- LookupError：无效数据查询的基类\n- IndexError：索引超出序列的范围\n- KeyError：字典中查找一个不存在的关键字\n- MemoryError：内存溢出（可通过删除对象释放内存）\n- NameError：尝试访问一个不存在的变量\n- UnboundLocalError：访问未初始化的本地变量\n- ReferenceError：弱引用试图访问已经垃圾回收了的对象\n- RuntimeError：一般的运行时异常\n- NotImplementedError：尚未实现的方法\n- SyntaxError：语法错误导致的异常\n- IndentationError：缩进错误导致的异常\n- TabError：Tab和空格混用\n- SystemError：一般的解释器系统异常\n- TypeError：不同类型间的无效操作\n- ValueError：传入无效的参数\n- UnicodeError：Unicode相关的异常\n- UnicodeDecodeError：Unicode解码时的异常\n- UnicodeEncodeError：Unicode编码错误导致的异常\n- UnicodeTranslateError：Unicode转换错误导致的异常\n\n异常体系内部有层次关系，Python异常体系中的部分关系如下所示：\n\n![Image](https://img-blog.csdnimg.cn/20200710131404548.png)\n\n------\n\n## 2. Python标准警告总结\n\n- Warning：警告的基类\n- DeprecationWarning：关于被弃用的特征的警告\n- FutureWarning：关于构造将来语义会有改变的警告\n- UserWarning：用户代码生成的警告\n- PendingDeprecationWarning：关于特性将会被废弃的警告\n- RuntimeWarning：可疑的运行时行为(runtime behavior)的警告\n- SyntaxWarning：可疑语法的警告\n- ImportWarning：用于在导入模块过程中触发的警告\n- UnicodeWarning：与Unicode相关的警告\n- BytesWarning：与字节或字节码相关的警告\n- ResourceWarning：与资源使用相关的警告\n\n------\n\n## 3. try - except 语句\n\n```python\ntry:\n    检测范围\nexcept Exception[as reason]:\n    出现异常后的处理代码\n```\n\ntry 语句按照如下方式工作：\n\n- 首先，执行`try`子句（在关键字`try`和关键字`except`之间的语句）\n- 如果没有异常发生，忽略`except`子句，`try`子句执行后结束。\n- 如果在执行`try`子句的过程中发生了异常，那么`try`子句余下的部分将被忽略。如果异常的类型和`except`之后的名称相符，那么对应的`except`子句将被执行。最后执行`try - except`语句之后的代码。\n- 如果一个异常没有与任何的`except`匹配，那么这个异常将会传递给上层的`try`中。\n\n【例子】\n\n[2]:\n\n```\ntry:\n    f = open(&#39;test.txt&#39;)\n    print(f.read())\n    f.close()\nexcept OSError:\n    print(&#39;打开文件出错&#39;)\n\n# 打开文件出错\n打开文件出错\n```\n\n【例子】\n\n[3]:\n\n```\ntry:\n    f = open(&#39;test.txt&#39;)\n    print(f.read())\n    f.close()\nexcept OSError as error:\n    print(&#39;打开文件出错\\n原因是：&#39; + str(error))\n\n# 打开文件出错\n# 原因是：[Errno 2] No such file or directory: &#39;test.txt&#39;\n打开文件出错\n原因是：[Errno 2] No such file or directory: &#39;test.txt&#39;\n```\n\n一个`try`语句可能包含多个`except`子句，分别来处理不同的特定的异常。最多只有一个分支会被执行。\n\n【例子】\n\n[4]:\n\n```\ntry:\n    int(&quot;abc&quot;)\n    s = 1 + &#39;1&#39;\n    f = open(&#39;test.txt&#39;)\n    print(f.read())\n    f.close()\nexcept OSError as error:\n    print(&#39;打开文件出错\\n原因是：&#39; + str(error))\nexcept TypeError as error:\n    print(&#39;类型出错\\n原因是：&#39; + str(error))\nexcept ValueError as error:\n    print(&#39;数值出错\\n原因是：&#39; + str(error))\n\n# 数值出错\n# 原因是：invalid literal for int() with base 10: &#39;abc&#39;\n数值出错\n原因是：invalid literal for int() with base 10: &#39;abc&#39;\n```\n\n【例子】\n\n[5]:\n\n```\ndict1 = &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;v&#39;: 22&#125;\ntry:\n    x = dict1[&#39;y&#39;]\nexcept LookupError:\n    print(&#39;查询错误&#39;)\nexcept KeyError:\n    print(&#39;键错误&#39;)\nelse:\n    print(x)\n\n# 查询错误\n查询错误\n```\n\n`try-except-else`语句尝试查询不在`dict`中的键值对，从而引发了异常。这一异常准确地说应属于`KeyError`，但由于`KeyError`是`LookupError`的子类，且将`LookupError`置于`KeyError`之前，因此程序优先执行该`except`代码块。所以，使用多个`except`代码块时，必须坚持对其规范排序，要从最具针对性的异常到最通用的异常。\n\n【例子】\n\n[6]:\n\n```\ndict1 = &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;v&#39;: 22&#125;\ntry:\n    x = dict1[&#39;y&#39;]\nexcept KeyError:\n    print(&#39;键错误&#39;)\nexcept LookupError:\n    print(&#39;查询错误&#39;)\nelse:\n    print(x)\n\n# 键错误\n键错误\n```\n\n【例子】一个 `except` 子句可以同时处理多个异常，这些异常将被放在一个括号里成为一个元组。\n\n[7]:\n\n```\ntry:\n    s = 1 + &#39;1&#39;\n    int(&quot;abc&quot;)\n    f = open(&#39;test.txt&#39;)\n    print(f.read())\n    f.close()\nexcept (OSError, TypeError, ValueError) as error:\n    print(&#39;出错了！\\n原因是：&#39; + str(error))\n\n# 出错了！\n# 原因是：unsupported operand type(s) for +: &#39;int&#39; and &#39;str&#39;\n出错了！\n原因是：unsupported operand type(s) for +: &#39;int&#39; and &#39;str&#39;\n```\n\n------\n\n## 4. try - except - finally 语句\n\ntry: 检测范围 except Exception[as reason]: 出现异常后的处理代码 finally: 无论如何都会被执行的代码\n\n不管`try`子句里面有没有发生异常，`finally`子句都会执行。\n\n【例子】如果一个异常在`try`子句里被抛出，而又没有任何的`except`把它截住，那么这个异常会在`finally`子句执行后被抛出。\n\n[10]:\n\n```\ndef divide(x, y):\n    try:\n        result = x / y\n        print(&quot;result is&quot;, result)\n    except ZeroDivisionError:\n        print(&quot;division by zero!&quot;)\n    finally:\n        print(&quot;executing finally clause&quot;)\n\n\ndivide(2, 1)\n# result is 2.0\n# executing finally clause\ndivide(2, 0)\n# division by zero!\n# executing finally clause\ndivide(&quot;2&quot;, &quot;1&quot;)\n# executing finally clause\n# TypeError: unsupported operand type(s) for /: &#39;str&#39; and &#39;str&#39;\nresult is 2.0\nexecuting finally clause\ndivision by zero!\nexecuting finally clause\n```\n\n------\n\n## 5. try - except - else 语句\n\n如果在`try`子句执行时没有发生异常，Python将执行`else`语句后的语句。\n\n```python\ntry:\n    检测范围\nexcept:\n    出现异常后的处理代码\nelse:\n    如果没有异常执行这块代码\n```\n\n使用`except`而不带任何异常类型，这不是一个很好的方式，我们不能通过该程序识别出具体的异常信息，因为它捕获所有的异常。\n\ntry: 检测范围 except(Exception1[, Exception2[,...ExceptionN]]]): 发生以上多个异常中的一个，执行这块代码 else: 如果没有异常执行这块代码\n\n【例子】\n\n[12]:\n\n```\ntry:\n    fh = open(&quot;testfile.txt&quot;, &quot;w&quot;)\n    fh.write(&quot;这是一个测试文件，用于测试异常!!&quot;)\nexcept IOError:\n    print(&quot;Error: 没有找到文件或读取文件失败&quot;)\nelse:\n    print(&quot;内容写入文件成功&quot;)\n    fh.close()\n\n# 内容写入文件成功\n内容写入文件成功\n```\n\n注意：`else`语句的存在必须以`except`语句的存在为前提，在没有`except`语句的`try`语句中使用`else`语句，会引发语法错误。\n\n------\n\n## 6. raise语句\n\nPython 使用`raise`语句抛出一个指定的异常。\n\n【例子】\n\n[13]:\n\n```\ntry:\n    raise NameError(&#39;HiThere&#39;)\nexcept NameError:\n    print(&#39;An exception flew by!&#39;)\n\n# An exception flew by!\nAn exception flew by!\n```</code></pre>\n",
            "tags": []
        },
        {
            "id": "https://alanosy.github.io/2021/01/26/2020-1-26/",
            "url": "https://alanosy.github.io/2021/01/26/2020-1-26/",
            "title": "2020-1-26",
            "date_published": "2021-01-26T02:55:39.000Z",
            "content_html": "<p>2020-1-26<br>开发出了Hexo站点</p>\n",
            "tags": []
        },
        {
            "id": "https://alanosy.github.io/2021/01/26/%E5%85%B3%E4%BA%8E%E6%88%91%E4%BB%AC/",
            "url": "https://alanosy.github.io/2021/01/26/%E5%85%B3%E4%BA%8E%E6%88%91%E4%BB%AC/",
            "title": "关于我们",
            "date_published": "2021-01-26T02:26:31.000Z",
            "content_html": "<p>本主题作者： Ruri Shimotsuki @優萌初華<br>本站主题链接： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUv\">https://shoka.lostyu.me</span></p>\n<p>此站站主：Alan<br>临近高考记录一下学习生涯<br>和自己的一些兴趣爱好<br>联系邮箱：<span class=\"exturl\" data-url=\"bWFpbHRvOiYjNjU7JiN4NmM7JiM5NzsmIzExMDsmIzExMTsmIzExNTsmIzY0OyYjOTc7JiN4NmM7JiN4Njk7JiN4Nzk7JiMxMTc7JiMxMTA7JiN4MmU7JiN4NjM7JiMxMTE7JiMxMDk7\">&#65;&#x6c;&#97;&#110;&#111;&#115;&#64;&#97;&#x6c;&#x69;&#x79;&#117;&#110;&#x2e;&#x63;&#111;&#109;</span><br>微信:fignet<br>QQ:9077584</p>\n<p>版权声明： 本站所有文章除特别声明外，均采用 (CC)BY-NC-SA 许可协议。转载请注明出处！</p>\n",
            "tags": []
        },
        {
            "id": "https://alanosy.github.io/2021/01/26/%E7%89%B9%E6%AE%8A%E5%8A%9F%E8%83%BD/",
            "url": "https://alanosy.github.io/2021/01/26/%E7%89%B9%E6%AE%8A%E5%8A%9F%E8%83%BD/",
            "title": "特殊功能",
            "date_published": "2021-01-26T01:27:48.000Z",
            "content_html": "<p>links 链接块<br>本功能参考 NexT，基于 Hexo Tag 功能，用来建立友链或其他网址链接功能。</p>\n<p>文章中的使用格式：</p>\n<p>使用 links 标签块，包围 yml 语法书写的内容，字段包括<br>site    站点名称    必填<br>owner    管理员名字    可选，默认为 site 的值<br>url        站点链接    必填<br>desc    站点描述    可选，默认为 url 的值<br>image    站点图片    可选，默认为 images/404.png<br>color    方块颜色    可选，默认为 #666</p>\n<pre><code class=\"bash\">&#123;% links %&#125;\n- site: #站点名称\n  owner: #管理员名字\n  url: #站点网址\n  desc: #简短描述\n  image: #一张图片\n  color: #颜色代码\n&#123;% endlinks %&#125;</code></pre>\n<p>举个栗子：</p>\n<pre><code class=\"bash\">&#123;% links %&#125;\n- site: 優萌初華\n  owner: 霜月琉璃\n  url: https://shoka.lostyu.me\n  desc: 琉璃的医学 & 编程笔记\n  image: https://cdn.jsdelivr.net/gh/amehime/shoka@latest/images/avatar.jpg\n  color: \"#e9546b\"\n\n- site: 優萌初華\n  owner: 霜月琉璃\n  url: https://shoka.lostyu.me\n  image: images/avatar.jpg\n\n- site: 優萌初華\n  url: https://shoka.lostyu.me\n  desc: 琉璃的医学 & 编程笔记\n  color: \"#9d5b8b\"\n&#123;% endlinks %&#125;</code></pre>\n<div class=\"links\"><div class=\"item\" title=\"霜月琉璃\" style=\"--block-color:#e9546b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\" data-background-image=\"https://cdn.jsdelivr.net/gh/amehime/shoka@latest/images/avatar.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\">優萌初華</span>\n          <p class=\"desc\">琉璃的医学 & 编程笔记</p>\n          </div></div><div class=\"item\" title=\"霜月琉璃\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\" data-background-image=\"//cdn.jsdelivr.net/gh/Alanosy/Alanosy.github.io@latest/images/avatar.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\">優萌初華</span>\n          <p class=\"desc\">https://shoka.lostyu.me</p>\n          </div></div><div class=\"item\" title=\"優萌初華\" style=\"--block-color:#9d5b8b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\" data-background-image=\"//cdn.jsdelivr.net/gh/Alanosy/Alanosy.github.io@latest/images/404.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\">優萌初華</span>\n          <p class=\"desc\">琉璃的医学 & 编程笔记</p>\n          </div></div></div>\n\n<p>以上标签块里的内容，还可以保存到一个 yml 文件中，然后使用 linksfile 标签。<br>其中， path 位于 <root>/source 目录下。</p>\n<pre><code class=\"bash\">&#123;% linksfile [path] %&#125;</code></pre>\n<p>举个栗子：</p>\n<pre><code class=\"bash\">&#123;% linksfile friends/_data.yml %&#125;</code></pre>\n<p>code 代码块</p>\n<p>使用 markdown-it-prism 进行代码高亮，支持显示行号、行高亮 mark 、命令行提示符 command 、代码块标题。</p>\n<p>基本格式： [language] [title] [url] [link text] [mark] [command]</p>\n<p>选项    描述    默认值<br>language</p>\n<p>支持的语言戳此<br>如果不需要代码高亮，但希望显示代码块样式，则设为 raw<br>留空或设为 info ，将不显示代码高亮和代码块样式<br>null</p>\n<p>title    代码块的标题文字    null<br>url    代码块标题右侧显示的链接    null<br>link text    上述链接显示的标题    link<br>mark</p>\n<p>行高亮显示，格式为 mark:行号,行号开始-行号结束,其他行号 。<br>例如 mark:1,4-7,10 ，将高亮显示第 1、4、5、6、7、10 行</p>\n<p>null</p>\n<p>command</p>\n<p>命令行提示符，格式为 command:(“提示内容”:行号,行号||”提示内容”:行号开始-行号结束)<br>例如 command:(“[root@localhost] $”:1,9-10||”[admin@remotehost] #”:4-6)</p>\n<p>null</p>\n<pre><code class=\"bash\">```java 行高亮 https://shoka.lostyu.me 参考链接 mark:1,6-7\nimport java.util.Scanner;\n...\nScanner in = new Scanner (System.in);\n// 输入 Scan 之后，按下键盘 Alt + “/” 键，Eclipse 下自动补全。\n\nSystem.out.println (in.nextLine ());\nSystem.out.println (&quot;Hello&quot; + &quot;world.&quot;);</code></pre>\n<pre><code class=\"bash\">pwd\n/usr/home/chris/bin\nls -la\ntotal 2\ndrwxr-xr-x   2 chris  chris     11 Jan 10 16:48 .\ndrwxr--r-x  45 chris  chris     92 Feb 14 11:10 ..\n-rwxr-xr-x   1 chris  chris    444 Aug 25  2013 backup\n-rwxr-xr-x   1 chris  chris    642 Jan 17 14:42 deploy\ngit add -A\ngit commit -m &quot;update&quot;\ngit push</code></pre>\n<pre><code class=\"bash\">import java.util.Scanner;\n...\nScanner in = new Scanner(System.in);\n// 输入 Scan 之后，按下键盘 Alt + “/” 键，Eclipse 下自动补全。\n\nSystem.out.println(in.nextLine());\nSystem.out.println(&quot;Hello&quot; + &quot; world.&quot;);</code></pre>\n<pre><code class=\"bash\">pwd\n/usr/home/chris/bin\nls -la\ntotal 2\ndrwxr-xr-x   2 chris  chris     11 Jan 10 16:48 .\ndrwxr--r-x  45 chris  chris     92 Feb 14 11:10 ..\n-rwxr-xr-x   1 chris  chris    444 Aug 25  2013 backup\n-rwxr-xr-x   1 chris  chris    642 Jan 17 14:42 deploy\ngit add -A\ngit commit -m &quot;update&quot;\ngit push</code></pre>\n<p>quiz 练习题与答案<br>这个功能是用来显示练习题的。<br>需要在 Front Matter 中添加 quiz: true ，以正确显示题型标签。</p>\n<pre><code class=\"bash\">---\ntitle: 练习题与答案\nquiz: true\n---\n\n1. 编译时多态主要指运算符重载与函数重载，而运行时多态主要指虚函数。 &#123;.quiz .true&#125;\n\n2. 有基类 `SHAPE`，派生类 `CIRCLE`，声明如下变量：  &#123;.quiz .multi&#125;\n    ```cpp\n    SHAPE shape1,*p1;\n    CIRCLE circle1,*q1;\n    ```\n    下列哪些项是 “派生类对象替换基类对象”。\n    - `p1=&amp;circle1;` &#123;.correct&#125;\n    - `q1=&amp;shape1;`\n    - `shape1=circle1;` &#123;.correct&#125;\n    - `circle1=shape1;`\n&#123;.options&#125;\n    &gt; - :heavy_check_mark: 令基类对象的指针指向派生类对象\n    &gt; - :x: 派生类指针指向基类的引用\n    &gt; - :heavy_check_mark: 派生类对象给基类对象赋值\n    &gt; - :x: 基类对象给派生类对象赋值\n    &gt; &#123;.options&#125;\n\n3. 下列叙述正确的是 []&#123;.gap&#125; 。 &#123;.quiz&#125;\n    - 虚函数只能定义成无参函数\n    - 虚函数不能有返回值\n    - 能定义虚构造函数\n    - A、B、C 都不对 &#123;.correct&#125;\n&#123;.options&#125;\n\n10. 如果定义 `int e=8; double f=6.4, g=8.9;`，则表达式 `f+int (e/3*int (f+g)/2)%4` 的值为 [9.4]&#123;.gap&#125;。 &#123;.quiz .fill&#125;\n    &gt; 注意运算顺序和数据类型\n    &gt; [8.4]&#123;.mistake&#125;</code></pre>\n<hr>\n<p>title: 练习题与答案<br>quiz: true</p>\n<hr>\n<ol>\n<li><p>编译时多态主要指运算符重载与函数重载，而运行时多态主要指虚函数。 {.quiz .true}</p>\n</li>\n<li><p>有基类 <code>SHAPE</code>，派生类 <code>CIRCLE</code>，声明如下变量：  {.quiz .multi}</p>\n<pre><code class=\"cpp\">SHAPE shape1,*p1;\nCIRCLE circle1,*q1;</code></pre>\n<p> 下列哪些项是 “派生类对象替换基类对象”。</p>\n<ul>\n<li><code>p1=&amp;circle1;</code> {.correct}</li>\n<li><code>q1=&amp;shape1;</code></li>\n<li><code>shape1=circle1;</code> {.correct}</li>\n<li><code>circle1=shape1;</code><br>{.options}<blockquote>\n<ul>\n<li>:heavy_check_mark: 令基类对象的指针指向派生类对象</li>\n<li>:x: 派生类指针指向基类的引用</li>\n<li>:heavy_check_mark: 派生类对象给基类对象赋值</li>\n<li>:x: 基类对象给派生类对象赋值<br>{.options}</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>下列叙述正确的是 []{.gap} 。 {.quiz}</p>\n<ul>\n<li>虚函数只能定义成无参函数</li>\n<li>虚函数不能有返回值</li>\n<li>能定义虚构造函数</li>\n<li>A、B、C 都不对 {.correct}<br>{.options}</li>\n</ul>\n</li>\n<li><p>如果定义 <code>int e=8; double f=6.4, g=8.9;</code>，则表达式 <code>f+int (e/3*int (f+g)/2)%4</code> 的值为 [9.4]{.gap}。 {.quiz .fill}</p>\n<blockquote>\n<p>注意运算顺序和数据类型<br>[8.4]{.mistake}<br>有基类 SHAPE ，派生类 CIRCLE ，声明如下变量：</p>\n</blockquote>\n<pre><code class=\"bash\">SHAPE shape1,*p1;\nCIRCLE circle1,*q1;</code></pre>\n</li>\n</ol>\n<p>使用说明<br>本功能基于 markdown-it-bracketed-spans 和 markdown-it-attrs</p>\n<pre><code class=\"bash\">\n标签    含义\n&#123;.quiz&#125;    选择题\n&#123;.quiz .multi&#125;    多选题\n&#123;.quiz .true&#125;    正确的判断题\n&#123;.quiz .false&#125;    错误的判断题\n&#123;.quiz .fill&#125;    填空题\n[]&#123;.gap&#125;    空白下划线\n[答案内容]&#123;.gap&#125;    答案内容带下划线\n&#123;.options&#125;    ABCDE 选项\n&#123;.correct&#125;    选择题的正确选项\n&gt;    答案解析\n[8.4]&#123;.mistake&#125;    错题备注</code></pre>\n<p>#emoji 绘文字</p>\n<p>本功能基于 markdown-it-emoji ，所有标签参考戳此</p>\n<pre><code class=\"bash\">:kissing_heart:\n:ring:\n:notes:</code></pre>\n<p>effects 文字特效<br>本功能基于 markdown-it-ins 、 markdown-it-bracketed-spans 和 markdown-it-attrs</p>\n<p>本主题风格颜色通用样式：default、primary、success、info、warning、danger</p>\n<pre><code class=\"bash\">++ 下划线 ++\n++ 波浪线 ++&#123;.wavy&#125;\n++ 着重点 ++&#123;.dot&#125;\n++ 紫色下划线 ++&#123;.primary&#125;\n++ 绿色波浪线 ++&#123;.wavy .success&#125;\n++ 黄色着重点 ++&#123;.dot .warning&#125;\n~~ 删除线～～\n~~ 红色删除线～～&#123;.danger&#125;\n== 荧光高亮 ==\n[赤橙黄绿青蓝紫]&#123;.rainbow&#125;\n[红色]&#123;.red&#125;\n[粉色]&#123;.pink&#125;\n[橙色]&#123;.orange&#125;\n[红色]&#123;.yellow&#125;\n[绿色]&#123;.green&#125;\n[靛青]&#123;.aqua&#125;\n[蓝色]&#123;.blue&#125;\n[紫色]&#123;.purple&#125;\n[灰色]&#123;.grey&#125;\n快捷键 [Ctrl]&#123;.kbd&#125; + [C]&#123;.kbd .red&#125;\nH~2~0\n29^th^</code></pre>\n<p>++ 下划线 ++<br>++ 波浪线 ++{.wavy}<br>++ 着重点 ++{.dot}<br>++ 紫色下划线 ++{.primary}<br>++ 绿色波浪线 ++{.wavy .success}<br>++ 黄色着重点 ++{.dot .warning}<br>~~ 删除线～～<br>~~ 红色删除线～～{.danger}<br>== 荧光高亮 ==<br>[赤橙黄绿青蓝紫]{.rainbow}<br>[红色]{.red}<br>[粉色]{.pink}<br>[橙色]{.orange}<br>[红色]{.yellow}<br>[绿色]{.green}<br>[靛青]{.aqua}<br>[蓝色]{.blue}<br>[紫色]{.purple}<br>[灰色]{.grey}<br>快捷键 [Ctrl]{.kbd} + [C]{.kbd .red}<br>H<del>2</del>0<br>29^th^</p>\n<p>spoiler 隐藏文字<br>本功能基于 markdown-it-spoiler 和 markdown-it-attrs</p>\n<pre><code class=\"bash\">!! 黑幕黑幕黑幕黑幕黑幕黑幕！！： 鼠标滑过显示内容\n!! 模糊模糊模糊模糊模糊模糊！！&#123;.bulr&#125; ： 选中文字显示内容</code></pre>\n<p>!! 黑幕黑幕黑幕黑幕黑幕黑幕！！： 鼠标滑过显示内容<br>!! 模糊模糊模糊模糊模糊模糊！！{.bulr} ： 选中文字显示内容</p>\n<p>#label 标签块<br>本功能基于 markdown-it-bracketed-spans 和 markdown-it-attrs<br>有以下颜色可选</p>\n<pre><code class=\"bash\">[default]&#123;.label&#125;\n[primary]&#123;.label .primary&#125;\n[info]&#123;.label .info&#125;\n[:heavy_check_mark:success]&#123;.label .success&#125;\n[warning]&#123;.label .warning&#125;\n[:broken_heart:danger]&#123;.label .danger&#125;</code></pre>\n<p>[default]{.label}<br>[primary]{.label .primary}<br>[info]{.label .info}<br>[:heavy_check_mark:success]{.label .success}<br>[warning]{.label .warning}<br>[:broken_heart:danger]{.label .danger}</p>\n<p>note 提醒块<br>本功能基于 markdown-it-container<br>标签为：</p>\n<p>开始行    :::[风格颜色]<br>结束行</p>\n<pre><code class=\"bash\">:::default\n默认默认\n:::\n\n:::primary\n基本基本\n:::\n\n:::info\n提示提示\n:::\n\n:::success\n成功成功\n:::\n\n:::warning\n警告警告\n:::\n\n:::danger\n危险危险\n:::\n\n:::danger no-icon\n危险危险\n:::</code></pre>\n<p>:::default<br>默认默认<br>:::</p>\n<p>:::primary<br>基本基本<br>:::</p>\n<p>:::info<br>提示提示<br>:::</p>\n<p>:::success<br>成功成功<br>:::</p>\n<p>:::warning<br>警告警告<br>:::</p>\n<p>:::danger<br>危险危险<br>:::</p>\n<p>:::danger no-icon<br>危险危险<br>:::</p>\n<p>tab 标签卡<br>本功能基于 markdown-it-container<br>标签为：</p>\n<p>开始行    ;;;[同一ID] [标签名称]<br>结束行    ;;;</p>\n<pre><code class=\"bash\">;;;id1 卡片 1\n这里是卡片 1 的内容\n** 加粗 **\n[success]&#123;.label .success&#125;\n\n&#123;% links %&#125;\n- site: 優萌初華\n  owner: 霜月琉璃\n  url: https://shoka.lostyu.me\n  desc: 琉璃的医学 & 编程笔记\n  image: https://cdn.jsdelivr.net/gh/amehime/shoka@latest/images/avatar.jpg\n  color: \"#e9546b\"\n&#123;% endlinks %&#125;\n;;;\n\n;;;id1 卡片 2\n这里是卡片 2 的内容\n:::danger\n危险危险\n:::\n- 第一行\n- 第二行\n;;;\n\n;;;id2 ②号标签卡片 1\n这里是卡片 1 的内容\n;;;\n\n;;;id2 ②号标签卡片 2\n这里是卡片 2 的内容\n;;;</code></pre>\n<p>;;;id1 卡片 1<br>这里是卡片 1 的内容<br>** 加粗 **<br>[success]{.label .success}</p>\n<div class=\"links\"><div class=\"item\" title=\"霜月琉璃\" style=\"--block-color:#e9546b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\" data-background-image=\"https://cdn.jsdelivr.net/gh/amehime/shoka@latest/images/avatar.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\">優萌初華</span>\n          <p class=\"desc\">琉璃的医学 & 编程笔记</p>\n          </div></div></div>\n<p>;;;</p>\n<p>;;;id1 卡片 2<br>这里是卡片 2 的内容<br>:::danger<br>危险危险<br>:::</p>\n<ul>\n<li>第一行</li>\n<li>第二行<br>;;;</li>\n</ul>\n<p>;;;id2 ②号标签卡片 1<br>这里是卡片 1 的内容<br>;;;</p>\n<p>;;;id2 ②号标签卡片 2<br>这里是卡片 2 的内容<br>;;;</p>\n<p>#collapse 折叠块<br>本功能基于 markdown-it-container<br>标签为：</p>\n<p>开始行    +++[风格颜色] [标题文字]<br>结束行    +++</p>\n<pre><code class=\"bash\">+++ 默认默认 这里是一段文字\n++ 下划线 ++\n+++\n\n\n+++primary 紫色\n:::info\n参考信息\n:::\n\n- 第一行\n- 第二行\n+++\n\n\n+++info  蓝色\n;;;id3 卡片 1\n这里是卡片 1 的内容\n;;;\n\n;;;id3 卡片 2\n这里是卡片 2 的内容\n;;;\n+++\n\n+++success 绿色\n&#123;% links %&#125;\n- site: 優萌初華\n  url: https://shoka.lostyu.me\n  color: \"#e9546b\"\n&#123;% endlinks %&#125;\n+++\n\n+++warning 黄色\n!! 警告警告警告警告警告！！&#123;.bulr&#125;\n[label]&#123;.label .success&#125;\n+++\n\n+++danger 红色\n[danger]&#123;.label .danger&#125;\n+++</code></pre>\n<p>+++ 默认默认 这里是一段文字<br>++ 下划线 ++<br>+++</p>\n<p>+++primary 紫色<br>:::info<br>参考信息<br>:::</p>\n<ul>\n<li>第一行</li>\n<li>第二行</li>\n</ul>\n<p>+++</p>\n<p>+++info  蓝色<br>;;;id3 卡片 1<br>这里是卡片 1 的内容<br>;;;</p>\n<p>;;;id3 卡片 2<br>这里是卡片 2 的内容<br>;;;<br>+++</p>\n<p>+++success 绿色</p>\n<div class=\"links\"><div class=\"item\" title=\"優萌初華\" style=\"--block-color:#e9546b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\" data-background-image=\"//cdn.jsdelivr.net/gh/Alanosy/Alanosy.github.io@latest/images/404.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\">優萌初華</span>\n          <p class=\"desc\">https://shoka.lostyu.me</p>\n          </div></div></div>\n<p>+++</p>\n<p>+++warning 黄色<br>!! 警告警告警告警告警告！！{.bulr}<br>[label]{.label .success}<br>+++</p>\n<p>+++danger 红色<br>[danger]{.label .danger}<br>+++</p>\n<p>taskList 待办事项<br>本功能基于 markdown-it-task-checkbox 。<br>可以利用 markdown-it-attrs 添加风格颜色，只可以给 ul 标签添加，需要新建两行。</p>\n<pre><code class=\"bash\">- [ ] 这是一个小叉叉\n- [x] 这是一个红色勾勾\n\n&#123;.danger&#125;\n\n- [ ] 未完成\n- [x] 完成\n\n&#123;.primary&#125;\n\n- [ ] 未完成\n- [x] 默认颜色</code></pre>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 这是一个小叉叉</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 这是一个红色勾勾</li>\n</ul>\n<p>{.danger}</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 未完成</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 完成</li>\n</ul>\n<p>{.primary}</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 未完成</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 默认颜色</li>\n</ul>\n<p>furigana 文字注音<br>原本用于日语汉字假名注音，但别的注音也可以。<br>为了兼容性，采用 markdown-it-ruby 的基本格式： {文字^注音} ，并且为了兼容表格，将分隔符由 | 换成了 ^ 。<br>注音分隔基于 furigana-markdown-it 显示说明看这里</p>\n<p>{取り返す^とりかえす}    取とり返かえす<br>{可愛い犬^か+わい・い・いぬ}    可愛かわいい犬いぬ<br>{可愛い犬^か・わい・いいぬ}    可か愛わいい犬いぬ<br>{アクセラレータ^accelerator}    アクセラレータaccelerator<br>{accelerator^アクセラレータ}    acceleratorアクセラレータ<br>{食べる^たべる}    食たべる<br>{食べる^=たべる}    食べるたべる<br>{あいうえお^*}    あ●い●う●え●お●<br>{あいうえお^*❤}    あ❤い❤う❤え❤お❤<br>{常用账号^contact}    常用账号</p>\n<p>media 多媒体<br>本功能基于 Hexo Tag 功能，使用 media 标签，目前可选择两种类型，即 audio 和 video 。</p>\n<pre><code class=\"bash\">&#123;% media audio %&#125;\n... 音频列表\n&#123;% endmedia %&#125;\n\n&#123;% media video %&#125;\n... 视频列表\n&#123;% endmedia %&#125;</code></pre>\n<p>标签包绕一段 yml 格式的内容，格式与背景音乐的配置类似。</p>\n<p>亦可以直接使用网易云、虾米、QQ 音乐的播放列表、单曲。</p>\n<pre><code class=\"bash\">&#123;% media audio %&#125;\n- title: 列表 1\n  list:\n    - https://music.163.com/#/playlist?id=2943811283\n    - https://music.163.com/#/playlist?id=2297706586\n- title: 列表 2\n  list:\n    - https://music.163.com/#/playlist?id=2031842656\n&#123;% endmedia %&#125;\n\n\n&#123;% media video %&#125;\n- name: \"测试 1\"\n  url: https://cdn.kastatic.org/ka-youtube-converted/O_nY1TM2RZM.mp4/O_nY1TM2RZM.mp4#t=0\n- name: \"测试 2\"\n  url: https://cdn.kastatic.org/ka-youtube-converted/O_nY1TM2RZM.mp4/O_nY1TM2RZM.mp4#t=0\n&#123;% endmedia %&#125;</code></pre>\n<p>math 数学公式<br>本功能基于 markdown-it-katex<br>在 Front Matter 中添加 math: true 以支持 KaTex</p>\n<pre><code class=\"bash\">---\ntitle: 数学公式显示\nmath: true\n---\n\n行内公式：$\\sqrt &#123;3x-1&#125;+(1+x)^2$\n\n独立块显示：\n$$\\begin &#123;array&#125;&#123;c&#125;\n\n\\nabla \\times \\vec &#123;\\mathbf &#123;B&#125;&#125; -\\, \\frac1c\\, \\frac &#123;\\partial\\vec &#123;\\mathbf &#123;E&#125;&#125;&#125;&#123;\\partial t&#125; &amp;\n= \\frac &#123;4\\pi&#125;&#123;c&#125;\\vec &#123;\\mathbf &#123;j&#125;&#125;    \\nabla \\cdot \\vec &#123;\\mathbf &#123;E&#125;&#125; &amp; = 4 \\pi \\rho \\\\\n\n\\nabla \\times \\vec &#123;\\mathbf &#123;E&#125;&#125;\\, +\\, \\frac1c\\, \\frac &#123;\\partial\\vec &#123;\\mathbf &#123;B&#125;&#125;&#125;&#123;\\partial t&#125; &amp; = \\vec &#123;\\mathbf &#123;0&#125;&#125; \\\\\n\n\\nabla \\cdot \\vec &#123;\\mathbf &#123;B&#125;&#125; &amp; = 0\n\n\\end &#123;array&#125;$$</code></pre>\n<p>mermaid 流程图<br>本功能基于 markdown-it-mermaid<br>在 Front Matter 中添加 mermaid: true 以支持 Mermaid</p>\n<pre><code class=\"bash\">---\ntitle: 流程图显示\nmermaid: true\n---\n\n```mermaid\ngraph LR\n    A [Square Rect] -- Link text --&gt; B ((Circle))\n    A --&gt; C (Round Rect)\n    B --&gt; D &#123;Rhombus&#125;\n    C --&gt; D</code></pre>\n<pre><code class=\"mermaid\">sequenceDiagram\n    loop Daily query\n        Alice-&gt;&gt;Bob: Hello Bob, how are you?\n        alt is sick\n            Bob-&gt;&gt;Alice: Not so good :(\n        else is well\n            Bob-&gt;&gt;Alice: Feeling fresh like a daisy\n        end\n\n        opt Extra response\n            Bob-&gt;&gt;Alice: Thanks for asking\n        end\n    end</code></pre>\n<pre><code>---\ntitle: 流程图显示\nmermaid: true\n---\n\n```mermaid\ngraph LR\n    A [Square Rect] -- Link text --&gt; B ((Circle))\n    A --&gt; C (Round Rect)\n    B --&gt; D &#123;Rhombus&#125;\n    C --&gt; D</code></pre>\n<pre><code class=\"mermaid\">sequenceDiagram\n    loop Daily query\n        Alice-&gt;&gt;Bob: Hello Bob, how are you?\n        alt is sick\n            Bob-&gt;&gt;Alice: Not so good :(\n        else is well\n            Bob-&gt;&gt;Alice: Feeling fresh like a daisy\n        end\n\n        opt Extra response\n            Bob-&gt;&gt;Alice: Thanks for asking\n        end\n    end</code></pre>\n",
            "tags": []
        },
        {
            "id": "https://alanosy.github.io/2021/01/25/Linux%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/",
            "url": "https://alanosy.github.io/2021/01/25/Linux%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/",
            "title": "Linux搭建博客",
            "date_published": "2021-01-25T05:58:22.000Z",
            "content_html": "<p>Hexo简介<br>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Gitee上，是搭建博客的首选框架。大家可以进入hexo官网进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看</p>\n<p>安装Git<br>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理</p>\n<pre><code class=\"bash\">$ apt-get install git -y</code></pre>\n<p>安装nodejs<br>Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具</p>\n<p>wp-block-code</p>\n<pre><code class=\"bash\">$ apt-get install nodejs npm -y</code></pre>\n<p>安装完后，输入命令</p>\n<p>wp-block-code</p>\n<pre><code class=\"bash\">$ node -v</code></pre>\n<p>wp-block-code</p>\n<pre><code class=\"bash\">$ npm -v</code></pre>\n<p>检查是否安装成功</p>\n<p>更换npm源为淘宝源</p>\n<p>wp-block-code</p>\n<pre><code class=\"bash\">$ npm config set registry https://registry.npm.taobao.org</code></pre>\n<p>安装hexo<br>前面git和nodejs安装好后，就可以安装hexo了，先创建一个文件夹filename，然后cd到这个文件夹下</p>\n<p>输入命令</p>\n<p>wp-block-code</p>\n<pre><code class=\"bash\">$ npm install -g hexo-cli</code></pre>\n<p>输入命令</p>\n<p>wp-block-code</p>\n<pre><code class=\"bash\">$ hexo -v</code></pre>\n<p>查看版本信息</p>\n<p>初始化hexo</p>\n<pre><code class=\"bash\">wp-block-code\n$ hexo init filename(文件名随意定义)\nwp-block-code\n$ cd filename //进入这个文件夹\nwp-block-code\n$ npm install</code></pre>\n<pre><code class=\"bash\">$ cd &lt;folder&gt; #说明：将操作位置转移到将要存放项目的文件夹目录（便于区分，我的项目文件夹名为hexo,~/root/hexo以下将使用这个文件夹）\n$ hexo init #说明：自动在文件夹（hexo1）中创建项目所需的文件\n$ npm install #说明：安装依赖包\n$ hexo generate #说明：构建，会在hexo1中创建public文件夹</code></pre>\n<p>执行完以上命令后，会多出以下文件和文件夹<br>例如<br>新建完成后，指定文件夹目录下有：</p>\n<pre><code class=\"bash\">_config.yml：站点的配置文件，需要备份\nthemes：主题文件夹，需要备份\nsource：博客文章的 .md 文件，需要备份\nscaffolds：文章的模板，需要备份\npackage.json：安装包的名称，需要备份\n.gitignore：限定在 push 时哪些文件可以忽略，需要备份\n.git：主题和站点都有，标志这是一个 git 项目，不需要备份\nnode_modules：是安装包的目录，在执行 npm install 的时候会重新生成，不需要备份\npublic：是 hexo g 生成的静态网页，不需要备份\n.deploy_git：同上，hexo g 也会生成，不需要备份</code></pre>\n<p>db.json：文件，不需要备份<br>输入命令<br>wp-block-code</p>\n<pre><code class=\"bash\">$ hexo g</code></pre>\n<p>输入命令<br>wp-block-code</p>\n<pre><code class=\"bash\">$ hexo s</code></pre>\n<p>打开hexo的服务<br>在浏览器输入</p>\n<pre><code class=\"bash\">$ http://localhost:4000</code></pre>\n<p>就可以看到你生成的博客<br>使用ctrl+c停止服务<br>Hexo+Github<br>GitHub创建个人仓库<br>注册登录github官网，点击右上角加号，点击New repository，新建仓库<br>创建一个和用户名相同的仓库,即<span class=\"exturl\" data-url=\"aHR0cDovL3h4eHguZ2l0aHViLmlvLOWFtuS4rXh4eOaYr2dpdGh1YueahOeUqOaIt+WQjS8=\">http://xxxx.github.io，其中xxx是github的用户名</span><br>点击create repository<br>Git初始化设置<br>输入命令<br>wp-block-code</p>\n<pre><code class=\"bash\">$ git config --global user.name &quot;yourname&quot; </code></pre>\n<p>wp-block-code</p>\n<pre><code class=\"bash\">$ git config --global user.email &quot;youremail&quot;</code></pre>\n<p>yourname是github用户名，youremail是注册github的邮箱<br>wp-block-code</p>\n<pre><code class=\"bash\">$ git config user.name </code></pre>\n<p>wp-block-code</p>\n<pre><code class=\"bash\">$ git config user.email</code></pre>\n<p>检查是否正确，输入命令<br>生成SSH添加到GitHub<br>输入命令，创建SSH,一路回车<br>wp-block-code</p>\n<pre><code class=\"bash\">$ ssh-keygen -t rsa -C &quot;youremail&quot;</code></pre>\n<p>查看SSH KEY，输入命令<br>wp-block-code</p>\n<pre><code class=\"bash\">$ cat ~/.ssh/id_rsa.pub</code></pre>\n<p>复制id_rsa.pub里面的全部内容<br>在github的setting中，找到SSH keys的设置选项，点击New SSH key，粘贴id_rsa.pub里面的全部内容<br>输入命令<br>wp-block-code</p>\n<pre><code class=\"bash\">$ ssh -T git@github.com</code></pre>\n<p>查看是否连接成功<br>打开站点配置文件 _config.yml，修改添加以下内容<br>wp-block-code</p>\n<pre><code class=\"bash\">deploy:\n  type: git\n  repo: git@github.com:yourgithubname/yourgithubname.github.io.git\n  branch: master</code></pre>\n<p>安装deploy-git ，也就是部署的命令,这样才能用命令部署到github<br>wp-block-code</p>\n<pre><code class=\"bash\">$ npm install hexo-deployer-git --save</code></pre>\n<p>输入命令<br>wp-block-code</p>\n<pre><code class=\"bash\">$ hexo clean 第一次安装不用清缓存\n$ hexo clean &amp;&amp;　hexo g -d 　缩写\n$ hexo g = hexo generate 生成静态文件\n$ hexo generate -deploy 生成静态文件后立即部署网站</code></pre>\n<p>打开下面的网址</p>\n<pre><code class=\"bash\">$ http://yourname.github.io</code></pre>\n<p>就可看到和<br><span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo0MDAwLw==\">http://localhost:4000</span><br>一样的了！<br>关联Git仓库<br>wp-block-code</p>\n<pre><code class=\"bash\">$ git clone https://github.com/你的用户名/你的用户名.github.io.git</code></pre>\n<p>执行之后会在当前目录生成’你的用户名.github.io’的文件夹，这是关联github仓库的文件夹，需要上传的文件都会移动到这里<br>更多精彩内容请点击hexo官网<br>(附上我的博客链接)<br>Hexo+Gitee<br>Gitee创建个人仓库<br>打开码云官网，注册登陆，创建项目，点击右上角加号，新建仓库<br>开启 Gitee Pages<br>点击启动<br>启动后，点击蓝色链接打开网址<br>初始化Git设置<br>输入命令<br>wp-block-code</p>\n<pre><code class=\"bash\">$ git config --global user.name &quot;这里输入你的Gitee注册名&quot;// 按回车\n$ git config --global user.email &quot;这里输你的Gitee邮箱&quot;</code></pre>\n<p>生成SSH密钥文件<br>wp-block-code</p>\n<pre><code class=\"bash\">$ ssh-keygen -t rsa -C &quot;你的Gitee注册邮箱&quot;\n$ // 可不输入，三个回车</code></pre>\n<p>复制粘贴到码云<br>配置 _config.yml<br>点击复制克隆/下载里面的https的内容<br>修改添加_config.yml以下内容<br>wp-block-code</p>\n<pre><code class=\"bash\">url: Gitee Pages 服务，网站地址： https://空间名.gitee.io/仓库名(粘贴)\nroot: /仓库名/\nwp-block-code\ndeploy:\n  type: git\n  repo: https://gitee.com/空间名/仓库名(粘贴)\n  branch: master</code></pre>\n<p>基础配置可以参考官方文档的配置说明</p>\n<pre><code class=\"bash\">$ wp-block-code\n$ hexo clean &amp;&amp;　hexo g -d 　缩写 清缓存\n$ hexo g = hexo generate 生成静态文件\n$ hexo generate -deploy 生成静态文件后立即部署网站自动上传到gitee</code></pre>\n<p>打开Gitee Pages 服务 ，每次上传或改动，都要点击“更新”打开网址访问</p>\n",
            "tags": []
        }
    ]
}