<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://alanosy.github.io</id>
    <title>Alan</title>
    <link href="https://alanosy.github.io" />
    <updated>2021-01-26T06:51:00.117Z</updated>
    <entry>
        <id>https://alanosy.github.io/2021/01/26/hello-world/</id>
        <title>Hello Hexo</title>
        <link rel="alternate" href="https://alanosy.github.io/2021/01/26/hello-world/"/>
        <content type="html">&lt;p&gt;Welcome to &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvLw==&#34;&gt;Hexo&lt;/span&gt;! This is your very first post. Check &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv&#34;&gt;documentation&lt;/span&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=&#34;&gt;troubleshooting&lt;/span&gt; or you can ask me on &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==&#34;&gt;GitHub&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id=&#34;quick-start&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#quick-start&#34;&gt;#&lt;/a&gt; Quick Start&lt;/h2&gt;
&lt;h3 id=&#34;create-a-new-post&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#create-a-new-post&#34;&gt;#&lt;/a&gt; Create a new post&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo new &lt;span class=&#34;token string&#34;&gt;&#34;My New Post&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s&#34;&gt;Writing&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;run-server&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#run-server&#34;&gt;#&lt;/a&gt; Run server&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo server&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=&#34;&gt;Server&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;generate-static-files&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#generate-static-files&#34;&gt;#&lt;/a&gt; Generate static files&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo generate&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s&#34;&gt;Generating&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;deploy-to-remote-sites&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#deploy-to-remote-sites&#34;&gt;#&lt;/a&gt; Deploy to remote sites&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo deploy&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s&#34;&gt;Deployment&lt;/span&gt;&lt;/p&gt;
</content>
        <updated>2021-01-26T06:51:00.117Z</updated>
    </entry>
    <entry>
        <id>https://alanosy.github.io/2021/01/26/python-day-2/</id>
        <title>python_day_2</title>
        <link rel="alternate" href="https://alanosy.github.io/2021/01/26/python-day-2/"/>
        <content type="html">&lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;Python 是一种通用编程语言，其在科学计算和机器学习领域具有广泛的应用。如果我们打算利用 Python 来执行机器学习，那么对 Python 有一些基本的了解就是至关重要的。本 Python 入门系列体验就是为这样的初学者精心准备的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本实验包括以下内容&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;列表
&lt;ul&gt;
&lt;li&gt;列表的定义&lt;/li&gt;
&lt;li&gt;列表的创建&lt;/li&gt;
&lt;li&gt;向列表中添加元素&lt;/li&gt;
&lt;li&gt;删除列表中的元素&lt;/li&gt;
&lt;li&gt;获取列表中的元素&lt;/li&gt;
&lt;li&gt;列表的常用操作符&lt;/li&gt;
&lt;li&gt;列表的其他方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;元组
&lt;ul&gt;
&lt;li&gt;创建和访问一个元组&lt;/li&gt;
&lt;li&gt;更新和删除一个元组&lt;/li&gt;
&lt;li&gt;元组相关的操作符&lt;/li&gt;
&lt;li&gt;内置方法&lt;/li&gt;
&lt;li&gt;解压元组&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;字符串
&lt;ul&gt;
&lt;li&gt;字符串的定义&lt;/li&gt;
&lt;li&gt;字符串的切片与拼接&lt;/li&gt;
&lt;li&gt;字符串的常用内置方法&lt;/li&gt;
&lt;li&gt;字符串格式化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;字典
&lt;ul&gt;
&lt;li&gt;可变类型与不可变类型&lt;/li&gt;
&lt;li&gt;字典的定义&lt;/li&gt;
&lt;li&gt;创建和访问字典&lt;/li&gt;
&lt;li&gt;字典的内置方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;集合
&lt;ul&gt;
&lt;li&gt;集合的创建&lt;/li&gt;
&lt;li&gt;访问集合中的值&lt;/li&gt;
&lt;li&gt;集合的内置方法&lt;/li&gt;
&lt;li&gt;集合的转换&lt;/li&gt;
&lt;li&gt;不可变集合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;序列
&lt;ul&gt;
&lt;li&gt;针对序列的内置函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;列表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#列表&#34;&gt;#&lt;/a&gt; 列表&lt;/h1&gt;
&lt;p&gt;简单数据类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整型 &lt;code&gt;&amp;lt;class &#39;int&#39;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;浮点型 &lt;code&gt;&amp;lt;class &#39;float&#39;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;布尔型 &lt;code&gt;&amp;lt;class &#39;bool&#39;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;容器数据类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;列表 &lt;code&gt;&amp;lt;class &#39;list&#39;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;元组 &lt;code&gt;&amp;lt;class &#39;tuple&#39;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;字典 &lt;code&gt;&amp;lt;class &#39;dict&#39;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;集合 &lt;code&gt;&amp;lt;class &#39;set&#39;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;字符串 &lt;code&gt;&amp;lt;class &#39;str&#39;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-列表的定义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-列表的定义&#34;&gt;#&lt;/a&gt; 1. 列表的定义&lt;/h2&gt;
&lt;p&gt;列表是有序集合，没有固定大小，能够保存任意数量任意类型的 Python 对象，语法为  &lt;code&gt;[元素1, 元素2, ..., 元素n]&lt;/code&gt; 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关键点是「中括号 []」和「逗号，」&lt;/li&gt;
&lt;li&gt;中括号 把所有元素绑在一起&lt;/li&gt;
&lt;li&gt;逗号 将每个元素一一分开&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-列表的创建&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-列表的创建&#34;&gt;#&lt;/a&gt; 2. 列表的创建&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;创建一个普通列表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[1]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]
print(x, type(x))
# [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;] &amp;lt;class &#39;list&#39;&amp;gt;

x = [2, 3, 4, 5, 6, 7]
print(x, type(x))
# [2, 3, 4, 5, 6, 7] &amp;lt;class &#39;list&#39;&amp;gt;
[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;] &amp;lt;class &#39;list&#39;&amp;gt;
[2, 3, 4, 5, 6, 7] &amp;lt;class &#39;list&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;利用 &lt;code&gt;range()&lt;/code&gt;  创建列表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[2]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = list(range(10))
print(x, type(x))
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &amp;lt;class &#39;list&#39;&amp;gt;

x = list(range(1, 11, 2))
print(x, type(x))
# [1, 3, 5, 7, 9] &amp;lt;class &#39;list&#39;&amp;gt;

x = list(range(10, 1, -2))
print(x, type(x))
# [10, 8, 6, 4, 2] &amp;lt;class &#39;list&#39;&amp;gt;
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &amp;lt;class &#39;list&#39;&amp;gt;
[1, 3, 5, 7, 9] &amp;lt;class &#39;list&#39;&amp;gt;
[10, 8, 6, 4, 2] &amp;lt;class &#39;list&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;利用推导式创建列表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[3]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = [0] * 5
print(x, type(x))
# [0, 0, 0, 0, 0] &amp;lt;class &#39;list&#39;&amp;gt;

x = [0 for i in range(5)]
print(x, type(x))
# [0, 0, 0, 0, 0] &amp;lt;class &#39;list&#39;&amp;gt;

x = [i for i in range(10)]
print(x, type(x))
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &amp;lt;class &#39;list&#39;&amp;gt;

x = [i for i in range(1, 10, 2)]
print(x, type(x))
# [1, 3, 5, 7, 9] &amp;lt;class &#39;list&#39;&amp;gt;

x = [i for i in range(10, 1, -2)]
print(x, type(x))
# [10, 8, 6, 4, 2] &amp;lt;class &#39;list&#39;&amp;gt;

x = [i ** 2 for i in range(1, 10)]
print(x, type(x))
# [1, 4, 9, 16, 25, 36, 49, 64, 81] &amp;lt;class &#39;list&#39;&amp;gt;

x = [i for i in range(100) if (i % 2) != 0 and (i % 3) == 0]
print(x, type(x))

# [3, 9, 15, 21, 27, 33, 39,
[0, 0, 0, 0, 0] &amp;lt;class &#39;list&#39;&amp;gt;
[0, 0, 0, 0, 0] &amp;lt;class &#39;list&#39;&amp;gt;
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] &amp;lt;class &#39;list&#39;&amp;gt;
[1, 3, 5, 7, 9] &amp;lt;class &#39;list&#39;&amp;gt;
[10, 8, 6, 4, 2] &amp;lt;class &#39;list&#39;&amp;gt;
[1, 4, 9, 16, 25, 36, 49, 64, 81] &amp;lt;class &#39;list&#39;&amp;gt;
[3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93, 99] &amp;lt;class &#39;list&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;由于 list 的元素可以是任何对象，因此列表中所保存的是对象的指针。即使保存一个简单的 &lt;code&gt;[1,2,3]&lt;/code&gt; ，也有 3 个指针和 3 个整数对象。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;x = [a] * 4&lt;/code&gt;  操作中，只是创建 4 个指向 list 的引用，所以一旦 &lt;code&gt;a&lt;/code&gt;  改变， &lt;code&gt;x&lt;/code&gt;  中 4 个 &lt;code&gt;a&lt;/code&gt;  也会随之改变。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[4]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = [[0] * 3] * 4
print(x, type(x))
# [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] &amp;lt;class &#39;list&#39;&amp;gt;

x[0][0] = 1
print(x, type(x))
# [[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] &amp;lt;class &#39;list&#39;&amp;gt;

a = [0] * 3
x = [a] * 4
print(x, type(x))
# [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] &amp;lt;class &#39;list&#39;&amp;gt;

x[0][0] = 1
print(x, type(x))
# [[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] &amp;lt;class &#39;list&#39;&amp;gt;
[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] &amp;lt;class &#39;list&#39;&amp;gt;
[[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] &amp;lt;class &#39;list&#39;&amp;gt;
[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]] &amp;lt;class &#39;list&#39;&amp;gt;
[[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]] &amp;lt;class &#39;list&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;创建一个混合列表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[5]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix = [1, &#39;lsgo&#39;, 3.14, [1, 2, 3]]
print(mix, type(mix))  
# [1, &#39;lsgo&#39;, 3.14, [1, 2, 3]] &amp;lt;class &#39;list&#39;&amp;gt;
[1, &#39;lsgo&#39;, 3.14, [1, 2, 3]] &amp;lt;class &#39;list&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;创建一个空列表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[6]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;empty = []
print(empty, type(empty))  # [] &amp;lt;class &#39;list&#39;&amp;gt;
[] &amp;lt;class &#39;list&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;列表不像元组，列表内容可更改 (mutable)，因此附加 ( &lt;code&gt;append&lt;/code&gt; ,  &lt;code&gt;extend&lt;/code&gt; )、插入 ( &lt;code&gt;insert&lt;/code&gt; )、删除 ( &lt;code&gt;remove&lt;/code&gt; ,  &lt;code&gt;pop&lt;/code&gt; ) 这些操作都可以用在它身上。&lt;/p&gt;
&lt;h2 id=&#34;3-向列表中添加元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-向列表中添加元素&#34;&gt;#&lt;/a&gt; 3. 向列表中添加元素&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list.append(obj)&lt;/code&gt;  在列表末尾添加新的对象，只接受一个参数，参数可以是任何数据类型，被追加的元素在 list 中保持着原结构类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[7]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]
x.append(&#39;Thursday&#39;)
print(x)  
# [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Thursday&#39;]

print(len(x))  # 6
[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Thursday&#39;]
6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此元素如果是一个 list，那么这个 list 将作为一个整体进行追加，注意 &lt;code&gt;append()&lt;/code&gt;  和 &lt;code&gt;extend()&lt;/code&gt;  的区别。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[8]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]
x.append([&#39;Thursday&#39;, &#39;Sunday&#39;])
print(x)  
# [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, [&#39;Thursday&#39;, &#39;Sunday&#39;]]

print(len(x))  # 6
[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, [&#39;Thursday&#39;, &#39;Sunday&#39;]]
6
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list.extend(seq)&lt;/code&gt;  在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[9]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]
x.extend([&#39;Thursday&#39;, &#39;Sunday&#39;])
print(x)  
# [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Thursday&#39;, &#39;Sunday&#39;]

print(len(x))  # 7
[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Thursday&#39;, &#39;Sunday&#39;]
7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;严格来说  &lt;code&gt;append&lt;/code&gt;  是追加，把一个东西整体添加在列表后，而  &lt;code&gt;extend&lt;/code&gt;  是扩展，把一个东西里的所有元素添加在列表后。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list.insert(index, obj)&lt;/code&gt;  在编号  &lt;code&gt;index&lt;/code&gt;  位置插入  &lt;code&gt;obj&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[10]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]
x.insert(2, &#39;Sunday&#39;)
print(x)
# [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Sunday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]

print(len(x))  # 6
[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Sunday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]
6
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-删除列表中的元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-删除列表中的元素&#34;&gt;#&lt;/a&gt; 4. 删除列表中的元素&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list.remove(obj)&lt;/code&gt;  移除列表中某个值的第一个匹配项&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[11]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]
x.remove(&#39;Monday&#39;)
print(x)  # [&#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]
[&#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list.pop([index=-1])&lt;/code&gt;  移除列表中的一个元素（默认最后一个元素），并且返回该元素的值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[12]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]
y = x.pop()
print(y)  # Friday

y = x.pop(0)
print(y)  # Monday

y = x.pop(-2)
print(y)  # Wednesday
print(x)  # [&#39;Tuesday&#39;, &#39;Thursday&#39;]
Friday
Monday
Wednesday
[&#39;Tuesday&#39;, &#39;Thursday&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;remove&lt;/code&gt;  和  &lt;code&gt;pop&lt;/code&gt;  都可以删除元素，前者是指定具体要删除的元素，后者是指定一个索引。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;del var1[, var2 ……]&lt;/code&gt;  删除单个或多个对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;如果知道要删除的元素在列表中的位置，可使用 &lt;code&gt;del&lt;/code&gt;  语句。&lt;/p&gt;
&lt;p&gt;[13]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]
del x[0:2]
print(x)  # [&#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]
[&#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果你要从列表中删除一个元素，且不再以任何方式使用它，就使用 &lt;code&gt;del&lt;/code&gt;  语句；如果你要在删除元素后还能继续使用它，就使用方法 &lt;code&gt;pop()&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;5-获取列表中的元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-获取列表中的元素&#34;&gt;#&lt;/a&gt; 5. 获取列表中的元素&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;通过元素的索引值，从列表获取单个元素，注意，列表索引值是从 0 开始的。&lt;/li&gt;
&lt;li&gt;通过将索引指定为 - 1，可让 Python 返回最后一个列表元素，索引 -2 返回倒数第二个列表元素，以此类推。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[14]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, [&#39;Thursday&#39;, &#39;Friday&#39;]]
print(x[0], type(x[0]))  # Monday &amp;lt;class &#39;str&#39;&amp;gt;
print(x[-1], type(x[-1]))  # [&#39;Thursday&#39;, &#39;Friday&#39;] &amp;lt;class &#39;list&#39;&amp;gt;
print(x[-2], type(x[-2]))  # Wednesday &amp;lt;class &#39;str&#39;&amp;gt;
Monday &amp;lt;class &#39;str&#39;&amp;gt;
[&#39;Thursday&#39;, &#39;Friday&#39;] &amp;lt;class &#39;list&#39;&amp;gt;
Wednesday &amp;lt;class &#39;str&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;切片的通用写法是  &lt;code&gt;start : stop : step&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;情况 1 - “start :”&lt;/li&gt;
&lt;li&gt;以  &lt;code&gt;step&lt;/code&gt;  为 1 (默认) 从编号  &lt;code&gt;start&lt;/code&gt;  往列表尾部切片。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[15]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]
print(x[3:])  # [&#39;Thursday&#39;, &#39;Friday&#39;]
print(x[-3:])  # [&#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]
[&#39;Thursday&#39;, &#39;Friday&#39;]
[&#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;情况 2 - “: stop”&lt;/li&gt;
&lt;li&gt;以  &lt;code&gt;step&lt;/code&gt;  为 1 (默认) 从列表头部往编号  &lt;code&gt;stop&lt;/code&gt;  切片。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[16]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;week = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]
print(week[:3])  # [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;]
print(week[:-3])  # [&#39;Monday&#39;, &#39;Tuesday&#39;]
[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;]
[&#39;Monday&#39;, &#39;Tuesday&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;情况 3 - “start : stop”&lt;/li&gt;
&lt;li&gt;以  &lt;code&gt;step&lt;/code&gt;  为 1 (默认) 从编号  &lt;code&gt;start&lt;/code&gt;  往编号  &lt;code&gt;stop&lt;/code&gt;  切片。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[17]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;week = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]
print(week[1:3])  # [&#39;Tuesday&#39;, &#39;Wednesday&#39;]
print(week[-3:-1])  # [&#39;Wednesday&#39;, &#39;Thursday&#39;]
[&#39;Tuesday&#39;, &#39;Wednesday&#39;]
[&#39;Wednesday&#39;, &#39;Thursday&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;情况 4 - “start : stop : step”&lt;/li&gt;
&lt;li&gt;以具体的  &lt;code&gt;step&lt;/code&gt;  从编号  &lt;code&gt;start&lt;/code&gt;  往编号  &lt;code&gt;stop&lt;/code&gt;  切片。注意最后把  &lt;code&gt;step&lt;/code&gt;  设为 -1，相当于将列表反向排列。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[18]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;week = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]
print(week[1:4:2])  # [&#39;Tuesday&#39;, &#39;Thursday&#39;]
print(week[:4:2])  # [&#39;Monday&#39;, &#39;Wednesday&#39;]
print(week[1::2])  # [&#39;Tuesday&#39;, &#39;Thursday&#39;]
print(week[::-1])  
# [&#39;Friday&#39;, &#39;Thursday&#39;, &#39;Wednesday&#39;, &#39;Tuesday&#39;, &#39;Monday&#39;]
[&#39;Tuesday&#39;, &#39;Thursday&#39;]
[&#39;Monday&#39;, &#39;Wednesday&#39;]
[&#39;Tuesday&#39;, &#39;Thursday&#39;]
[&#39;Friday&#39;, &#39;Thursday&#39;, &#39;Wednesday&#39;, &#39;Tuesday&#39;, &#39;Monday&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;情况 5 - &amp;quot;:&amp;quot;&lt;/li&gt;
&lt;li&gt;复制列表中的所有元素（浅拷贝）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[19]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;eek = [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]
print(week[:])  
# [&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]
[&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】浅拷贝与深拷贝&lt;/p&gt;
&lt;p&gt;[20]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;list1 = [123, 456, 789, 213]
list2 = list1
list3 = list1[:]

print(list2)  # [123, 456, 789, 213]
print(list3)  # [123, 456, 789, 213]
list1.sort()
print(list2)  # [123, 213, 456, 789] 
print(list3)  # [123, 456, 789, 213]

list1 = [[123, 456], [789, 213]]
list2 = list1
list3 = list1[:]
print(list2)  # [[123, 456], [789, 213]]
print(list3)  # [[123, 456], [789, 213]]
list1[0][0] = 111
print(list2)  # [[111, 456], [789, 213]]
print(list3)  # [[111, 456], [789, 213]]
[123, 456, 789, 213]
[123, 456, 789, 213]
[123, 213, 456, 789]
[123, 456, 789, 213]
[[123, 456], [789, 213]]
[[123, 456], [789, 213]]
[[111, 456], [789, 213]]
[[111, 456], [789, 213]]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;6-列表的常用操作符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-列表的常用操作符&#34;&gt;#&lt;/a&gt; 6. 列表的常用操作符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;等号操作符： &lt;code&gt;==&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;连接操作符  &lt;code&gt;+&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重复操作符  &lt;code&gt;*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;成员关系操作符  &lt;code&gt;in&lt;/code&gt; 、 &lt;code&gt;not in&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;「等号 ==」，只有成员、成员位置都相同时才返回 True。&lt;/p&gt;
&lt;p&gt;列表拼接有两种方式，用「加号 +」和「乘号 *」，前者首尾拼接，后者复制拼接。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[21]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;list1 = [123, 456]
list2 = [456, 123]
list3 = [123, 456]

print(list1 == list2)  # False
print(list1 == list3)  # True

list4 = list1 + list2  # extend()
print(list4)  # [123, 456, 456, 123]

list5 = list3 * 3
print(list5)  # [123, 456, 123, 456, 123, 456]

list3 *= 3
print(list3)  # [123, 456, 123, 456, 123, 456]

print(123 in list3)  # True
print(456 not in list3)  # False
False
True
[123, 456, 456, 123]
[123, 456, 123, 456, 123, 456]
[123, 456, 123, 456, 123, 456]
True
False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;前面三种方法（ &lt;code&gt;append&lt;/code&gt; ,  &lt;code&gt;extend&lt;/code&gt; ,  &lt;code&gt;insert&lt;/code&gt; ）可对列表增加元素，它们没有返回值，是直接修改了原数据对象。 而将两个 list 相加，需要创建新的 list 对象，从而需要消耗额外的内存，特别是当 list 较大时，尽量不要使用 “+” 来添加 list。&lt;/p&gt;
&lt;h2 id=&#34;7-列表的其它方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7-列表的其它方法&#34;&gt;#&lt;/a&gt; 7. 列表的其它方法&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;list.count(obj)&lt;/code&gt;  统计某个元素在列表中出现的次数&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[22]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;list1 = [123, 456] * 3
print(list1)  # [123, 456, 123, 456, 123, 456]
num = list1.count(123)
print(num)  # 3
[123, 456, 123, 456, 123, 456]
3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;list.index(x[, start[, end]])&lt;/code&gt;  从列表中找出某个值第一个匹配项的索引位置&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[23]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;list1 = [123, 456] * 5
print(list1.index(123))  # 0
print(list1.index(123, 1))  # 2
print(list1.index(123, 3, 7))  # 4
0
2
4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;list.reverse()&lt;/code&gt;  反向列表中元素&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[24]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = [123, 456, 789]
x.reverse()
print(x)  # [789, 456, 123]
[789, 456, 123]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;list.sort(key=None, reverse=False)&lt;/code&gt;  对原列表进行排序。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;key&lt;/code&gt;  – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reverse&lt;/code&gt;  – 排序规则， &lt;code&gt;reverse = True&lt;/code&gt;  降序，  &lt;code&gt;reverse = False&lt;/code&gt;  升序（默认）。&lt;/li&gt;
&lt;li&gt;该方法没有返回值，但是会对列表的对象进行排序。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[25]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = [123, 456, 789, 213]
x.sort()
print(x)
# [123, 213, 456, 789]

x.sort(reverse=True)
print(x)
# [789, 456, 213, 123]


# 获取列表的第二个元素
def takeSecond(elem):
    return elem[1]


x = [(2, 2), (3, 4), (4, 1), (1, 3)]
x.sort(key=takeSecond)
print(x)
# [(4, 1), (2, 2), (1, 3), (3, 4)]

x.sort(key=lambda a: a[0])
print(x)
# [(1, 3), (2, 2), (3, 4), (4, 1)]
[123, 213, 456, 789]
[789, 456, 213, 123]
[(4, 1), (2, 2), (1, 3), (3, 4)]
[(1, 3), (2, 2), (3, 4), (4, 1)]
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;元组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#元组&#34;&gt;#&lt;/a&gt; 元组&lt;/h1&gt;
&lt;p&gt;「元组」定义语法为： &lt;code&gt;(元素1, 元素2, ..., 元素n)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;小括号把所有元素绑在一起&lt;/li&gt;
&lt;li&gt;逗号将每个元素一一分开&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-创建和访问一个元组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-创建和访问一个元组&#34;&gt;#&lt;/a&gt; 1. 创建和访问一个元组&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Python 的元组与列表类似，不同之处在于 tuple 被创建后就不能对其进行修改，类似字符串。&lt;/li&gt;
&lt;li&gt;元组使用小括号，列表使用方括号。&lt;/li&gt;
&lt;li&gt;元组与列表类似，也用整数来对它进行索引 (indexing) 和切片 (slicing)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[26]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;t1 = (1, 10.31, &#39;python&#39;)
t2 = 1, 10.31, &#39;python&#39;
print(t1, type(t1))
# (1, 10.31, &#39;python&#39;) &amp;lt;class &#39;tuple&#39;&amp;gt;

print(t2, type(t2))
# (1, 10.31, &#39;python&#39;) &amp;lt;class &#39;tuple&#39;&amp;gt;

tuple1 = (1, 2, 3, 4, 5, 6, 7, 8)
print(tuple1[1])  # 2
print(tuple1[5:])  # (6, 7, 8)
print(tuple1[:5])  # (1, 2, 3, 4, 5)
tuple2 = tuple1[:]
print(tuple2)  # (1, 2, 3, 4, 5, 6, 7, 8)
(1, 10.31, &#39;python&#39;) &amp;lt;class &#39;tuple&#39;&amp;gt;
(1, 10.31, &#39;python&#39;) &amp;lt;class &#39;tuple&#39;&amp;gt;
2
(6, 7, 8)
(1, 2, 3, 4, 5)
(1, 2, 3, 4, 5, 6, 7, 8)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;创建元组可以用小括号 ()，也可以什么都不用，为了可读性，建议还是用 ()。&lt;/li&gt;
&lt;li&gt;元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[27]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = (1)
print(type(x))  # &amp;lt;class &#39;int&#39;&amp;gt;
x = 2, 3, 4, 5
print(type(x))  # &amp;lt;class &#39;tuple&#39;&amp;gt;
x = []
print(type(x))  # &amp;lt;class &#39;list&#39;&amp;gt;
x = ()
print(type(x))  # &amp;lt;class &#39;tuple&#39;&amp;gt;
x = (1,)
print(type(x))  # &amp;lt;class &#39;tuple&#39;&amp;gt;
&amp;lt;class &#39;int&#39;&amp;gt;
&amp;lt;class &#39;tuple&#39;&amp;gt;
&amp;lt;class &#39;list&#39;&amp;gt;
&amp;lt;class &#39;tuple&#39;&amp;gt;
&amp;lt;class &#39;tuple&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[28]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print(8 * (8))  # 64
print(8 * (8,))  # (8, 8, 8, 8, 8, 8, 8, 8)
64
(8, 8, 8, 8, 8, 8, 8, 8)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】创建二维元组。&lt;/p&gt;
&lt;p&gt;[29]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = (1, 10.31, &#39;python&#39;), (&#39;data&#39;, 11)
print(x)
# ((1, 10.31, &#39;python&#39;), (&#39;data&#39;, 11))

print(x[0])
# (1, 10.31, &#39;python&#39;)
print(x[0][0], x[0][1], x[0][2])
# 1 10.31 python

print(x[0][0:2])
# (1, 10.31)
((1, 10.31, &#39;python&#39;), (&#39;data&#39;, 11))
(1, 10.31, &#39;python&#39;)
1 10.31 python
(1, 10.31)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-更新和删除一个元组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-更新和删除一个元组&#34;&gt;#&lt;/a&gt; 2. 更新和删除一个元组&lt;/h2&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[30]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;week = (&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;)
week = week[:2] + (&#39;Wednesday&#39;,) + week[2:]
print(week)  # (&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;)
(&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】元组有不可更改 (immutable) 的性质，因此不能直接给元组的元素赋值，但是只要元组中的元素可更改 (mutable)，那么我们可以直接更改其元素，注意这跟赋值其元素不同。&lt;/p&gt;
&lt;p&gt;[31]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;t1 = (1, 2, 3, [4, 5, 6])
print(t1)  # (1, 2, 3, [4, 5, 6])

t1[3][0] = 9
print(t1)  # (1, 2, 3, [9, 5, 6])
(1, 2, 3, [4, 5, 6])
(1, 2, 3, [9, 5, 6])
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-元组相关的操作符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-元组相关的操作符&#34;&gt;#&lt;/a&gt; 3. 元组相关的操作符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;等号操作符： &lt;code&gt;==&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;连接操作符  &lt;code&gt;+&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重复操作符  &lt;code&gt;*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;成员关系操作符  &lt;code&gt;in&lt;/code&gt; 、 &lt;code&gt;not in&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;「等号 ==」，只有成员、成员位置都相同时才返回 True。&lt;/p&gt;
&lt;p&gt;元组拼接有两种方式，用「加号 +」和「乘号 *」，前者首尾拼接，后者复制拼接。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[32]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;t1 = (123, 456)
t2 = (456, 123)
t3 = (123, 456)

print(t1 == t2)  # False
print(t1 == t3)  # True

t4 = t1 + t2
print(t4)  # (123, 456, 456, 123)

t5 = t3 * 3
print(t5)  # (123, 456, 123, 456, 123, 456)

t3 *= 3
print(t3)  # (123, 456, 123, 456, 123, 456)

print(123 in t3)  # True
print(456 not in t3)  # False
False
True
(123, 456, 456, 123)
(123, 456, 123, 456, 123, 456)
(123, 456, 123, 456, 123, 456)
True
False
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-内置方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-内置方法&#34;&gt;#&lt;/a&gt; 4. 内置方法&lt;/h2&gt;
&lt;p&gt;元组大小和内容都不可更改，因此只有  &lt;code&gt;count&lt;/code&gt;  和  &lt;code&gt;index&lt;/code&gt;  两种方法。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[33]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;t = (1, 10.31, &#39;python&#39;)
print(t.count(&#39;python&#39;))  # 1
print(t.index(10.31))  # 1
1
1
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;count(&#39;python&#39;)&lt;/code&gt;  是记录在元组  &lt;code&gt;t&lt;/code&gt;  中该元素出现几次，显然是 1 次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index(10.31)&lt;/code&gt;  是找到该元素在元组  &lt;code&gt;t&lt;/code&gt;  的索引，显然是 1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-解压元组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-解压元组&#34;&gt;#&lt;/a&gt; 5. 解压元组&lt;/h2&gt;
&lt;p&gt;【例子】解压（unpack）一维元组（有几个元素左边括号定义几个变量）&lt;/p&gt;
&lt;p&gt;[34]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;t = (1, 10.31, &#39;python&#39;)
(a, b, c) = t
print(a, b, c)
# 1 10.31 python
1 10.31 python
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】解压二维元组（按照元组里的元组结构来定义变量）&lt;/p&gt;
&lt;p&gt;[35]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;t = (1, 10.31, (&#39;OK&#39;, &#39;python&#39;))
(a, b, (c, d)) = t
print(a, b, c, d)
# 1 10.31 OK python
1 10.31 OK python
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】如果你只想要元组其中几个元素，用通配符「*」，英文叫 wildcard，在计算机语言中代表一个或多个元素。下例就是把多个元素丢给了  &lt;code&gt;rest&lt;/code&gt;  变量。&lt;/p&gt;
&lt;p&gt;[36]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;t = 1, 2, 3, 4, 5
a, b, *rest, c = t
print(a, b, c)  # 1 2 5
print(rest)  # [3, 4]
1 2 5
[3, 4]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】如果你根本不在乎 rest 变量，那么就用通配符「*」加上下划线「_」。&lt;/p&gt;
&lt;p&gt;[37]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;t = 1, 2, 3, 4, 5
a, b, *_ = t
print(a, b)  # 1 2
1 2
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串&#34;&gt;#&lt;/a&gt; 字符串&lt;/h1&gt;
&lt;h2 id=&#34;1-字符串的定义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-字符串的定义&#34;&gt;#&lt;/a&gt; 1. 字符串的定义&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Python 中字符串被定义为引号之间的字符集合。&lt;/li&gt;
&lt;li&gt;Python 支持使用成对的 单引号 或 双引号。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[38]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;t1 = &#39;i love Python!&#39;
print(t1, type(t1))
# i love Python! &amp;lt;class &#39;str&#39;&amp;gt;

t2 = &amp;quot;I love Python!&amp;quot;
print(t2, type(t2))
# I love Python! &amp;lt;class &#39;str&#39;&amp;gt;

print(5 + 8)  # 13
print(&#39;5&#39; + &#39;8&#39;)  # 58
i love Python! &amp;lt;class &#39;str&#39;&amp;gt;
I love Python! &amp;lt;class &#39;str&#39;&amp;gt;
13
58
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Python 的常用转义字符&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;转义字符&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\\&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;反斜杠符号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\&#39;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;单引号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;双引号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;换行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;横向制表符 (TAB)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;\r&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;回车&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;【例子】如果字符串中需要出现单引号或双引号，可以使用转义符号 &lt;code&gt;\&lt;/code&gt;  对字符串中的符号进行转义。&lt;/p&gt;
&lt;p&gt;[39]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print(&#39;let\&#39;s go&#39;)  # let&#39;s go
print(&amp;quot;let&#39;s go&amp;quot;)  # let&#39;s go
print(&#39;C:\\now&#39;)  # C:\now
print(&amp;quot;C:\\Program Files\\Intel\\Wifi\\Help&amp;quot;)
# C:\Program Files\Intel\Wifi\Help
let&#39;s go
let&#39;s go
C:\now
C:\Program Files\Intel\Wifi\Help
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】原始字符串只需要在字符串前边加一个英文字母 r 即可。&lt;/p&gt;
&lt;p&gt;[40]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print(r&#39;C:\Program Files\Intel\Wifi\Help&#39;)  
# C:\Program Files\Intel\Wifi\Help
C:\Program Files\Intel\Wifi\Help
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。&lt;/p&gt;
&lt;p&gt;[41]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;para_str = &amp;quot;&amp;quot;&amp;quot;这是一个多行字符串的实例
多行字符串可以使用制表符
TAB ( \t )。
也可以使用换行符 [ \n ]。
&amp;quot;&amp;quot;&amp;quot;
print(para_str)
# 这是一个多行字符串的实例
# 多行字符串可以使用制表符
# TAB (    )。
# 也可以使用换行符 [
#  ]。

para_str = &#39;&#39;&#39;这是一个多行字符串的实例
多行字符串可以使用制表符
TAB ( \t )。
也可以使用换行符 [ \n ]。
&#39;&#39;&#39;
print(para_str)
# 这是一个多行字符串的实例
# 多行字符串可以使用制表符
# TAB (      )。
# 也可以使用换行符 [ 
#  ]。
这是一个多行字符串的实例
多行字符串可以使用制表符
TAB ( 	 )。
也可以使用换行符 [ 
 ]。

这是一个多行字符串的实例
多行字符串可以使用制表符
TAB ( 	 )。
也可以使用换行符 [ 
 ]。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-字符串的切片与拼接&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-字符串的切片与拼接&#34;&gt;#&lt;/a&gt; 2. 字符串的切片与拼接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;类似于元组具有不可修改性&lt;/li&gt;
&lt;li&gt;从 0 开始 (和 Java 一样)&lt;/li&gt;
&lt;li&gt;切片通常写成  &lt;code&gt;start:end&lt;/code&gt;  这种形式，包括「 &lt;code&gt;start&lt;/code&gt;  索引」对应的元素，不包括「 &lt;code&gt;end&lt;/code&gt;  索引」对应的元素。&lt;/li&gt;
&lt;li&gt;索引值可正可负，正索引从 0 开始，从左往右；负索引从 -1 开始，从右往左。使用负数索引时，会从最后一个元素开始计数。最后一个元素的位置编号是 -1。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[42]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;str1 = &#39;I Love LsgoGroup&#39;
print(str1[:6])  # I Love
print(str1[5])  # e
print(str1[:6] + &amp;quot; 插入的字符串 &amp;quot; + str1[6:])  
# I Love 插入的字符串  LsgoGroup

s = &#39;Python&#39;
print(s)  # Python
print(s[2:4])  # th
print(s[-5:-2])  # yth
print(s[2])  # t
print(s[-1])  # n
I Love
e
I Love 插入的字符串  LsgoGroup
Python
th
yth
t
n
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-字符串的常用内置方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-字符串的常用内置方法&#34;&gt;#&lt;/a&gt; 3. 字符串的常用内置方法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;capitalize()&lt;/code&gt;  将字符串的第一个字符转换为大写。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[43]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;str2 = &#39;xiaoxie&#39;
print(str2.capitalize())  # Xiaoxie
Xiaoxie
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lower()&lt;/code&gt;  转换字符串中所有大写字符为小写。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;upper()&lt;/code&gt;  转换字符串中的小写字母为大写。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swapcase()&lt;/code&gt;  将字符串中大写转换为小写，小写转换为大写。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[44]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;str2 = &amp;quot;DAXIExiaoxie&amp;quot;
print(str2.lower())  # daxiexiaoxie
print(str2.upper())  # DAXIEXIAOXIE
print(str2.swapcase())  # daxieXIAOXIE
daxiexiaoxie
DAXIEXIAOXIE
daxieXIAOXIE
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;count(str, beg= 0,end=len(string))&lt;/code&gt;  返回 &lt;code&gt;str&lt;/code&gt;  在 string 里面出现的次数，如果 &lt;code&gt;beg&lt;/code&gt;  或者 &lt;code&gt;end&lt;/code&gt;  指定则返回指定范围内 &lt;code&gt;str&lt;/code&gt;  出现的次数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[45]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;str2 = &amp;quot;DAXIExiaoxie&amp;quot;
print(str2.count(&#39;xi&#39;))  # 2
2
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;endswith(suffix, beg=0, end=len(string))&lt;/code&gt;  检查字符串是否以指定子字符串  &lt;code&gt;suffix&lt;/code&gt;  结束，如果是，返回 True，否则返回 False。如果  &lt;code&gt;beg&lt;/code&gt;  和  &lt;code&gt;end&lt;/code&gt;  指定值，则在指定范围内检查。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;startswith(substr, beg=0,end=len(string))&lt;/code&gt;  检查字符串是否以指定子字符串  &lt;code&gt;substr&lt;/code&gt;  开头，如果是，返回 True，否则返回 False。如果  &lt;code&gt;beg&lt;/code&gt;  和  &lt;code&gt;end&lt;/code&gt;  指定值，则在指定范围内检查。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[46]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;str2 = &amp;quot;DAXIExiaoxie&amp;quot;
print(str2.endswith(&#39;ie&#39;))  # True
print(str2.endswith(&#39;xi&#39;))  # False
print(str2.startswith(&#39;Da&#39;))  # False
print(str2.startswith(&#39;DA&#39;))  # True
True
False
False
True
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;find(str, beg=0, end=len(string))&lt;/code&gt;  检测  &lt;code&gt;str&lt;/code&gt;  是否包含在字符串中，如果指定范围  &lt;code&gt;beg&lt;/code&gt;  和  &lt;code&gt;end&lt;/code&gt; ，则检查是否包含在指定范围内，如果包含，返回开始的索引值，否则返回 -1。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rfind(str, beg=0,end=len(string))&lt;/code&gt;  类似于  &lt;code&gt;find()&lt;/code&gt;  函数，不过是从右边开始查找。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[47]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;str2 = &amp;quot;DAXIExiaoxie&amp;quot;
print(str2.find(&#39;xi&#39;))  # 5
print(str2.find(&#39;ix&#39;))  # -1
print(str2.rfind(&#39;xi&#39;))  # 9
5
-1
9
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;isnumeric()&lt;/code&gt;  如果字符串中只包含数字字符，则返回 True，否则返回 False。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[48]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;str3 = &#39;12345&#39;
print(str3.isnumeric())  # True
str3 += &#39;a&#39;
print(str3.isnumeric())  # False
True
False
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ljust(width[, fillchar])&lt;/code&gt;  返回一个原字符串左对齐，并使用 &lt;code&gt;fillchar&lt;/code&gt; （默认空格）填充至长度 &lt;code&gt;width&lt;/code&gt;  的新字符串。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rjust(width[, fillchar])&lt;/code&gt;  返回一个原字符串右对齐，并使用 &lt;code&gt;fillchar&lt;/code&gt; （默认空格）填充至长度 &lt;code&gt;width&lt;/code&gt;  的新字符串。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[49]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;str4 = &#39;1101&#39;
print(str4.ljust(8, &#39;0&#39;))  # 11010000
print(str4.rjust(8, &#39;0&#39;))  # 00001101
11010000
00001101
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lstrip([chars])&lt;/code&gt;  截掉字符串左边的空格或指定字符。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rstrip([chars])&lt;/code&gt;  删除字符串末尾的空格或指定字符。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strip([chars])&lt;/code&gt;  在字符串上执行 &lt;code&gt;lstrip()&lt;/code&gt;  和 &lt;code&gt;rstrip()&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[50]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;str5 = &#39; I Love LsgoGroup &#39;
print(str5.lstrip())  # &#39;I Love LsgoGroup &#39;
print(str5.lstrip().strip(&#39;I&#39;))  # &#39; Love LsgoGroup &#39;
print(str5.rstrip())  # &#39; I Love LsgoGroup&#39;
print(str5.strip())  # &#39;I Love LsgoGroup&#39;
print(str5.strip().strip(&#39;p&#39;))  # &#39;I Love LsgoGrou&#39;
I Love LsgoGroup 
 Love LsgoGroup 
 I Love LsgoGroup
I Love LsgoGroup
I Love LsgoGrou
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;partition(sub)&lt;/code&gt;  找到子字符串 sub，把字符串分为一个三元组 &lt;code&gt;(pre_sub,sub,fol_sub)&lt;/code&gt; ，如果字符串中不包含 sub 则返回 &lt;code&gt;(&#39;原字符串&#39;,&#39;&#39;,&#39;&#39;)&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rpartition(sub)&lt;/code&gt;  类似于 &lt;code&gt;partition()&lt;/code&gt;  方法，不过是从右边开始查找。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[51]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;str5 = &#39; I Love LsgoGroup &#39;
print(str5.strip().partition(&#39;o&#39;))  # (&#39;I L&#39;, &#39;o&#39;, &#39;ve LsgoGroup&#39;)
print(str5.strip().partition(&#39;m&#39;))  # (&#39;I Love LsgoGroup&#39;, &#39;&#39;, &#39;&#39;)
print(str5.strip().rpartition(&#39;o&#39;))  # (&#39;I Love LsgoGr&#39;, &#39;o&#39;, &#39;up&#39;)
(&#39;I L&#39;, &#39;o&#39;, &#39;ve LsgoGroup&#39;)
(&#39;I Love LsgoGroup&#39;, &#39;&#39;, &#39;&#39;)
(&#39;I Love LsgoGr&#39;, &#39;o&#39;, &#39;up&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;replace(old, new [, max])&lt;/code&gt;  把 将字符串中的 &lt;code&gt;old&lt;/code&gt;  替换成 &lt;code&gt;new&lt;/code&gt; ，如果 &lt;code&gt;max&lt;/code&gt;  指定，则替换不超过 &lt;code&gt;max&lt;/code&gt;  次。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[52]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;str5 = &#39; I Love LsgoGroup &#39;
print(str5.strip().replace(&#39;I&#39;, &#39;We&#39;))  # We Love LsgoGroup
We Love LsgoGroup
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;split(str=&amp;quot;&amp;quot;, num)&lt;/code&gt;  不带参数默认是以空格为分隔符切片字符串，如果 &lt;code&gt;num&lt;/code&gt;  参数有设置，则仅分隔 &lt;code&gt;num&lt;/code&gt;  个子字符串，返回切片后的子字符串拼接的列表。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[53]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;str5 = &#39; I Love LsgoGroup &#39;
print(str5.strip().split())  # [&#39;I&#39;, &#39;Love&#39;, &#39;LsgoGroup&#39;]
print(str5.strip().split(&#39;o&#39;))  # [&#39;I L&#39;, &#39;ve Lsg&#39;, &#39;Gr&#39;, &#39;up&#39;]
[&#39;I&#39;, &#39;Love&#39;, &#39;LsgoGroup&#39;]
[&#39;I L&#39;, &#39;ve Lsg&#39;, &#39;Gr&#39;, &#39;up&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[54]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;u = &amp;quot;www.baidu.com.cn&amp;quot;
# 使用默认分隔符
print(u.split())  # [&#39;www.baidu.com.cn&#39;]

# 以&amp;quot;.&amp;quot;为分隔符
print((u.split(&#39;.&#39;)))  # [&#39;www&#39;, &#39;baidu&#39;, &#39;com&#39;, &#39;cn&#39;]

# 分割0次
print((u.split(&amp;quot;.&amp;quot;, 0)))  # [&#39;www.baidu.com.cn&#39;]

# 分割一次
print((u.split(&amp;quot;.&amp;quot;, 1)))  # [&#39;www&#39;, &#39;baidu.com.cn&#39;]

# 分割两次
print(u.split(&amp;quot;.&amp;quot;, 2))  # [&#39;www&#39;, &#39;baidu&#39;, &#39;com.cn&#39;]

# 分割两次，并取序列为1的项
print((u.split(&amp;quot;.&amp;quot;, 2)[1]))  # baidu

# 分割两次，并把分割后的三个部分保存到三个变量
u1, u2, u3 = u.split(&amp;quot;.&amp;quot;, 2)
print(u1)  # www
print(u2)  # baidu
print(u3)  # com.cn
[&#39;www.baidu.com.cn&#39;]
[&#39;www&#39;, &#39;baidu&#39;, &#39;com&#39;, &#39;cn&#39;]
[&#39;www.baidu.com.cn&#39;]
[&#39;www&#39;, &#39;baidu.com.cn&#39;]
[&#39;www&#39;, &#39;baidu&#39;, &#39;com.cn&#39;]
baidu
www
baidu
com.cn
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】去掉换行符&lt;/p&gt;
&lt;p&gt;[55]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;c = &#39;&#39;&#39;say
hello
baby&#39;&#39;&#39;

print(c)
# say
# hello
# baby

print(c.split(&#39;\n&#39;))  # [&#39;say&#39;, &#39;hello&#39;, &#39;baby&#39;]
say
hello
baby
[&#39;say&#39;, &#39;hello&#39;, &#39;baby&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[56]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;string = &amp;quot;hello boy&amp;lt;[www.baidu.com]&amp;gt;byebye&amp;quot;
print(string.split(&#39;[&#39;)[1].split(&#39;]&#39;)[0])  # www.baidu.com
print(string.split(&#39;[&#39;)[1].split(&#39;]&#39;)[0].split(&#39;.&#39;))  # [&#39;www&#39;, &#39;baidu&#39;, &#39;com&#39;]
www.baidu.com
[&#39;www&#39;, &#39;baidu&#39;, &#39;com&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;splitlines([keepends])&lt;/code&gt;  按照行 (’\r’, ‘\r\n’, \n’) 分隔，返回一个包含各行作为元素的列表，如果参数 &lt;code&gt;keepends&lt;/code&gt;  为 False，不包含换行符，如果为 True，则保留换行符。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[57]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;str6 = &#39;I \n Love \n LsgoGroup&#39;
print(str6.splitlines())  # [&#39;I &#39;, &#39; Love &#39;, &#39; LsgoGroup&#39;]
print(str6.splitlines(True))  # [&#39;I \n&#39;, &#39; Love \n&#39;, &#39; LsgoGroup&#39;]
[&#39;I &#39;, &#39; Love &#39;, &#39; LsgoGroup&#39;]
[&#39;I \n&#39;, &#39; Love \n&#39;, &#39; LsgoGroup&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;maketrans(intab, outtab)&lt;/code&gt;  创建字符映射的转换表，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;translate(table, deletechars=&amp;quot;&amp;quot;)&lt;/code&gt;  根据参数 &lt;code&gt;table&lt;/code&gt;  给出的表，转换字符串的字符，要过滤掉的字符放到 &lt;code&gt;deletechars&lt;/code&gt;  参数中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[58]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;str7 = &#39;this is string example....wow!!!&#39;
intab = &#39;aeiou&#39;
outtab = &#39;12345&#39;
trantab = str7.maketrans(intab, outtab)
print(trantab)  # &amp;#123;97: 49, 111: 52, 117: 53, 101: 50, 105: 51&amp;#125;
print(str7.translate(trantab))  # th3s 3s str3ng 2x1mpl2....w4w!!!
&amp;#123;97: 49, 101: 50, 105: 51, 111: 52, 117: 53&amp;#125;
th3s 3s str3ng 2x1mpl2....w4w!!!
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-字符串格式化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-字符串格式化&#34;&gt;#&lt;/a&gt; 4. 字符串格式化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;format&lt;/code&gt;  格式化函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[59]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;str8 = &amp;quot;&amp;#123;0&amp;#125; Love &amp;#123;1&amp;#125;&amp;quot;.format(&#39;I&#39;, &#39;Lsgogroup&#39;)  # 位置参数
print(str8)  # I Love Lsgogroup

str8 = &amp;quot;&amp;#123;a&amp;#125; Love &amp;#123;b&amp;#125;&amp;quot;.format(a=&#39;I&#39;, b=&#39;Lsgogroup&#39;)  # 关键字参数
print(str8)  # I Love Lsgogroup

str8 = &amp;quot;&amp;#123;0&amp;#125; Love &amp;#123;b&amp;#125;&amp;quot;.format(&#39;I&#39;, b=&#39;Lsgogroup&#39;)  # 位置参数要在关键字参数之前
print(str8)  # I Love Lsgogroup

str8 = &#39;&amp;#123;0:.2f&amp;#125;&amp;#123;1&amp;#125;&#39;.format(27.658, &#39;GB&#39;)  # 保留小数点后两位
print(str8)  # 27.66GB
I Love Lsgogroup
I Love Lsgogroup
I Love Lsgogroup
27.66GB
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Python 字符串格式化符号&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;符 号&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;%c&lt;/td&gt;
&lt;td&gt;格式化字符及其 ASCII 码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%s&lt;/td&gt;
&lt;td&gt;格式化字符串，用 str () 方法处理对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%r&lt;/td&gt;
&lt;td&gt;格式化字符串，用 rper () 方法处理对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%d&lt;/td&gt;
&lt;td&gt;格式化整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%o&lt;/td&gt;
&lt;td&gt;格式化无符号八进制数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%x&lt;/td&gt;
&lt;td&gt;格式化无符号十六进制数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%X&lt;/td&gt;
&lt;td&gt;格式化无符号十六进制数（大写）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%f&lt;/td&gt;
&lt;td&gt;格式化浮点数字，可指定小数点后的精度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%e&lt;/td&gt;
&lt;td&gt;用科学计数法格式化浮点数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%E&lt;/td&gt;
&lt;td&gt;作用同 % e，用科学计数法格式化浮点数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%g&lt;/td&gt;
&lt;td&gt;根据值的大小决定使用 % f 或 % e&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%G&lt;/td&gt;
&lt;td&gt;作用同 % g，根据值的大小决定使用 % f 或 % E&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[60]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print(&#39;%c&#39; % 97)  # a
print(&#39;%c %c %c&#39; % (97, 98, 99))  # a b c
print(&#39;%d + %d = %d&#39; % (4, 5, 9))  # 4 + 5 = 9
print(&amp;quot;我叫 %s 今年 %d 岁!&amp;quot; % (&#39;小明&#39;, 10))  # 我叫 小明 今年 10 岁!
print(&#39;%o&#39; % 10)  # 12
print(&#39;%x&#39; % 10)  # a
print(&#39;%X&#39; % 10)  # A
print(&#39;%f&#39; % 27.658)  # 27.658000
print(&#39;%e&#39; % 27.658)  # 2.765800e+01
print(&#39;%E&#39; % 27.658)  # 2.765800E+01
print(&#39;%g&#39; % 27.658)  # 27.658
text = &amp;quot;I am %d years old.&amp;quot; % 22
print(&amp;quot;I said: %s.&amp;quot; % text)  # I said: I am 22 years old..
print(&amp;quot;I said: %r.&amp;quot; % text)  # I said: &#39;I am 22 years old.&#39;
a
a b c
4 + 5 = 9
我叫 小明 今年 10 岁!
12
a
A
27.658000
2.765800e+01
2.765800E+01
27.658
I said: I am 22 years old..
I said: &#39;I am 22 years old.&#39;.
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;格式化操作符辅助指令&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;符号&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;m.n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;m 是显示的最小总宽度，n 是小数点后的位数（如果可用的话）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用作左对齐&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在正数前面显示加号 (+)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;#&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在八进制数前面显示零 (‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;显示的数字前面填充’0’而不是默认的空格&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[61]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print(&#39;%5.1f&#39; % 27.658)  # &#39; 27.7&#39;
print(&#39;%.2e&#39; % 27.658)  # 2.77e+01
print(&#39;%10d&#39; % 10)  # &#39;        10&#39;
print(&#39;%-10d&#39; % 10)  # &#39;10        &#39;
print(&#39;%+d&#39; % 10)  # +10
print(&#39;%#o&#39; % 10)  # 0o12
print(&#39;%#x&#39; % 108)  # 0x6c
print(&#39;%010d&#39; % 5)  # 0000000005
 27.7
2.77e+01
        10
10        
+10
0o12
0x6c
0000000005
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;字典&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字典&#34;&gt;#&lt;/a&gt; 字典&lt;/h1&gt;
&lt;h2 id=&#34;1-可变类型与不可变类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-可变类型与不可变类型&#34;&gt;#&lt;/a&gt; 1. 可变类型与不可变类型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;序列是以连续的整数为索引，与此不同的是，字典以 &amp;quot;关键字&amp;quot; 为索引，关键字可以是任意不可变类型，通常用字符串或数值。&lt;/li&gt;
&lt;li&gt;字典是 Python 唯一的一个 映射类型，字符串、元组、列表属于序列类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么如何快速判断一个数据类型  &lt;code&gt;X&lt;/code&gt;  是不是可变类型的呢？两种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;麻烦方法：用  &lt;code&gt;id(X)&lt;/code&gt;  函数，对 X 进行某种操作，比较操作前后的  &lt;code&gt;id&lt;/code&gt; ，如果不一样，则  &lt;code&gt;X&lt;/code&gt;  不可变，如果一样，则  &lt;code&gt;X&lt;/code&gt;  可变。&lt;/li&gt;
&lt;li&gt;便捷方法：用  &lt;code&gt;hash(X)&lt;/code&gt; ，只要不报错，证明  &lt;code&gt;X&lt;/code&gt;  可被哈希，即不可变，反过来不可被哈希，即可变。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[62]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;i = 1
print(id(i))  # 140732167000896
i = i + 2
print(id(i))  # 140732167000960

l = [1, 2]
print(id(l))  # 4300825160
l.append(&#39;Python&#39;)
print(id(l))  # 4300825160
140731832701760
140731832701824
2131670369800
2131670369800
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;整数  &lt;code&gt;i&lt;/code&gt;  在加 1 之后的  &lt;code&gt;id&lt;/code&gt;  和之前不一样，因此加完之后的这个  &lt;code&gt;i&lt;/code&gt;  (虽然名字没变)，但不是加之前的那个  &lt;code&gt;i&lt;/code&gt;  了，因此整数是不可变类型。&lt;/li&gt;
&lt;li&gt;列表  &lt;code&gt;l&lt;/code&gt;  在附加  &lt;code&gt;&#39;Python&#39;&lt;/code&gt;  之后的  &lt;code&gt;id&lt;/code&gt;  和之前一样，因此列表是可变类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[1]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print(hash(&#39;Name&#39;))  # 7047218704141848153

print(hash((1, 2, &#39;Python&#39;)))  # 1704535747474881831

print(hash([1, 2, &#39;Python&#39;]))
# TypeError: unhashable type: &#39;list&#39;


-6668157630988609386
-1857436431894091236
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&amp;lt;ipython-input-1-6416367464f8&amp;gt; in &amp;lt;module&amp;gt;()
      3 print(hash((1, 2, &#39;Python&#39;)))  # 1704535747474881831
      4 
----&amp;gt; 5 print(hash([1, 2, &#39;Python&#39;]))
      6 # TypeError: unhashable type: &#39;list&#39;

TypeError: unhashable type: &#39;list&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[ ]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print(hash(&amp;#123;1, 2, 3&amp;#125;))
# TypeError: unhashable type: &#39;set&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;数值、字符和元组 都能被哈希，因此它们是不可变类型。&lt;/li&gt;
&lt;li&gt;列表、集合、字典不能被哈希，因此它是可变类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-字典的定义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-字典的定义&#34;&gt;#&lt;/a&gt; 2. 字典的定义&lt;/h2&gt;
&lt;p&gt;字典 是无序的 键：值（ &lt;code&gt;key:value&lt;/code&gt; ）对集合，键必须是互不相同的（在同一个字典之内）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dict&lt;/code&gt;  内部存放的顺序和  &lt;code&gt;key&lt;/code&gt;  放入的顺序是没有关系的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dict&lt;/code&gt;  查找和插入的速度极快，不会随着  &lt;code&gt;key&lt;/code&gt;  的增加而增加，但是需要占用大量的内存。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;字典 定义语法为  &lt;code&gt;&amp;#123;元素1, 元素2, ..., 元素n&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其中每一个元素是一个「键值对」-- 键：值 ( &lt;code&gt;key:value&lt;/code&gt; )&lt;/li&gt;
&lt;li&gt;关键点是「大括号 {}」,「逗号，」和「冒号 :」&lt;/li&gt;
&lt;li&gt;大括号 – 把所有元素绑在一起&lt;/li&gt;
&lt;li&gt;逗号 – 将每个键值对分开&lt;/li&gt;
&lt;li&gt;冒号 – 将键和值分开&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-创建和访问字典&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-创建和访问字典&#34;&gt;#&lt;/a&gt; 3. 创建和访问字典&lt;/h2&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[88]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brand = [&#39;李宁&#39;, &#39;耐克&#39;, &#39;阿迪达斯&#39;]
slogan = [&#39;一切皆有可能&#39;, &#39;Just do it&#39;, &#39;Impossible is nothing&#39;]
print(&#39;耐克的口号是:&#39;, slogan[brand.index(&#39;耐克&#39;)])  
# 耐克的口号是: Just do it

dic = &amp;#123;&#39;李宁&#39;: &#39;一切皆有可能&#39;, &#39;耐克&#39;: &#39;Just do it&#39;, &#39;阿迪达斯&#39;: &#39;Impossible is nothing&#39;&amp;#125;
print(&#39;耐克的口号是:&#39;, dic[&#39;耐克&#39;])  
# 耐克的口号是: Just do it
耐克的口号是: Just do it
耐克的口号是: Just do it
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】通过字符串或数值作为 &lt;code&gt;key&lt;/code&gt;  来创建字典。&lt;/p&gt;
&lt;p&gt;[2]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dic1 = &amp;#123;1: &#39;one&#39;, 2: &#39;two&#39;, 3: &#39;three&#39;&amp;#125;
print(dic1)  # &amp;#123;1: &#39;one&#39;, 2: &#39;two&#39;, 3: &#39;three&#39;&amp;#125;
print(dic1[1])  # one
print(dic1[4])  # KeyError: 4

&amp;#123;1: &#39;one&#39;, 2: &#39;two&#39;, 3: &#39;three&#39;&amp;#125;
one
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
&amp;lt;ipython-input-2-bb8d02bd63a3&amp;gt; in &amp;lt;module&amp;gt;()
      2 print(dic1)  # &amp;#123;1: &#39;one&#39;, 2: &#39;two&#39;, 3: &#39;three&#39;&amp;#125;
      3 print(dic1[1])  # one
----&amp;gt; 4 print(dic1[4])  # KeyError: 4

KeyError: 4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[3]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dic2 = &amp;#123;&#39;rice&#39;: 35, &#39;wheat&#39;: 101, &#39;corn&#39;: 67&amp;#125;
print(dic2)  # &amp;#123;&#39;wheat&#39;: 101, &#39;corn&#39;: 67, &#39;rice&#39;: 35&amp;#125;
print(dic2[&#39;rice&#39;])  # 35
&amp;#123;&#39;rice&#39;: 35, &#39;wheat&#39;: 101, &#39;corn&#39;: 67&amp;#125;
35
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意：如果我们取的键在字典中不存在，会直接报错 &lt;code&gt;KeyError&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;【例子】通过元组作为 &lt;code&gt;key&lt;/code&gt;  来创建字典，但一般不这样使用。&lt;/p&gt;
&lt;p&gt;[91]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dic = &amp;#123;(1, 2, 3): &amp;quot;Tom&amp;quot;, &amp;quot;Age&amp;quot;: 12, 3: [3, 5, 7]&amp;#125;
print(dic)  # &amp;#123;(1, 2, 3): &#39;Tom&#39;, &#39;Age&#39;: 12, 3: [3, 5, 7]&amp;#125;
print(type(dic))  # &amp;lt;class &#39;dict&#39;&amp;gt;
&amp;#123;(1, 2, 3): &#39;Tom&#39;, &#39;Age&#39;: 12, 3: [3, 5, 7]&amp;#125;
&amp;lt;class &#39;dict&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过构造函数 &lt;code&gt;dict&lt;/code&gt;  来创建字典。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dict()&lt;/code&gt;  创建一个空的字典。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】通过 &lt;code&gt;key&lt;/code&gt;  直接把数据放入字典中，但一个 &lt;code&gt;key&lt;/code&gt;  只能对应一个 &lt;code&gt;value&lt;/code&gt; ，多次对一个 &lt;code&gt;key&lt;/code&gt;  放入  &lt;code&gt;value&lt;/code&gt; ，后面的值会把前面的值冲掉。&lt;/p&gt;
&lt;p&gt;[92]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dic = dict()
dic[&#39;a&#39;] = 1
dic[&#39;b&#39;] = 2
dic[&#39;c&#39;] = 3

print(dic)
# &amp;#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3&amp;#125;

dic[&#39;a&#39;] = 11
print(dic)
# &amp;#123;&#39;a&#39;: 11, &#39;b&#39;: 2, &#39;c&#39;: 3&amp;#125;

dic[&#39;d&#39;] = 4
print(dic)
# &amp;#123;&#39;a&#39;: 11, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&amp;#125;
&amp;#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3&amp;#125;
&amp;#123;&#39;a&#39;: 11, &#39;b&#39;: 2, &#39;c&#39;: 3&amp;#125;
&amp;#123;&#39;a&#39;: 11, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dict(mapping)&lt;/code&gt;  new dictionary initialized from a mapping object’s (key, value) pairs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[95]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dic1 = dict([(&#39;apple&#39;, 4139), (&#39;peach&#39;, 4127), (&#39;cherry&#39;, 4098)])
print(dic1)  # &amp;#123;&#39;cherry&#39;: 4098, &#39;apple&#39;: 4139, &#39;peach&#39;: 4127&amp;#125;

dic2 = dict(((&#39;apple&#39;, 4139), (&#39;peach&#39;, 4127), (&#39;cherry&#39;, 4098)))
print(dic2)  # &amp;#123;&#39;peach&#39;: 4127, &#39;cherry&#39;: 4098, &#39;apple&#39;: 4139&amp;#125;
&amp;#123;&#39;apple&#39;: 4139, &#39;peach&#39;: 4127, &#39;cherry&#39;: 4098&amp;#125;
&amp;#123;&#39;apple&#39;: 4139, &#39;peach&#39;: 4127, &#39;cherry&#39;: 4098&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dict(**kwargs)&lt;/code&gt;  -&amp;gt; new dictionary initialized with the name=value pairs in the keyword argument list. For example: dict(one=1, two=2)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】这种情况下，键只能为字符串类型，并且创建的时候字符串不能加引号，加上就会直接报语法错误。&lt;/p&gt;
&lt;p&gt;[96]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dic = dict(name=&#39;Tom&#39;, age=10)
print(dic)  # &amp;#123;&#39;name&#39;: &#39;Tom&#39;, &#39;age&#39;: 10&amp;#125;
print(type(dic))  # &amp;lt;class &#39;dict&#39;&amp;gt;
&amp;#123;&#39;name&#39;: &#39;Tom&#39;, &#39;age&#39;: 10&amp;#125;
&amp;lt;class &#39;dict&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-字典的内置方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-字典的内置方法&#34;&gt;#&lt;/a&gt; 4. 字典的内置方法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dict.fromkeys(seq[, value])&lt;/code&gt;  用于创建一个新字典，以序列  &lt;code&gt;seq&lt;/code&gt;  中元素做字典的键， &lt;code&gt;value&lt;/code&gt;  为字典所有键对应的初始值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[97]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;seq = (&#39;name&#39;, &#39;age&#39;, &#39;sex&#39;)
dic1 = dict.fromkeys(seq)
print(dic1)
# &amp;#123;&#39;name&#39;: None, &#39;age&#39;: None, &#39;sex&#39;: None&amp;#125;

dic2 = dict.fromkeys(seq, 10)
print(dic2)
# &amp;#123;&#39;name&#39;: 10, &#39;age&#39;: 10, &#39;sex&#39;: 10&amp;#125;

dic3 = dict.fromkeys(seq, (&#39;小马&#39;, &#39;8&#39;, &#39;男&#39;))
print(dic3)
# &amp;#123;&#39;name&#39;: (&#39;小马&#39;, &#39;8&#39;, &#39;男&#39;), &#39;age&#39;: (&#39;小马&#39;, &#39;8&#39;, &#39;男&#39;), &#39;sex&#39;: (&#39;小马&#39;, &#39;8&#39;, &#39;男&#39;)&amp;#125;
&amp;#123;&#39;name&#39;: None, &#39;age&#39;: None, &#39;sex&#39;: None&amp;#125;
&amp;#123;&#39;name&#39;: 10, &#39;age&#39;: 10, &#39;sex&#39;: 10&amp;#125;
&amp;#123;&#39;name&#39;: (&#39;小马&#39;, &#39;8&#39;, &#39;男&#39;), &#39;age&#39;: (&#39;小马&#39;, &#39;8&#39;, &#39;男&#39;), &#39;sex&#39;: (&#39;小马&#39;, &#39;8&#39;, &#39;男&#39;)&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dict.keys()&lt;/code&gt;  返回一个可迭代对象，可以使用  &lt;code&gt;list()&lt;/code&gt;  来转换为列表，列表为字典中的所有键。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[98]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dic = &amp;#123;&#39;Name&#39;: &#39;lsgogroup&#39;, &#39;Age&#39;: 7&amp;#125;
print(dic.keys())  # dict_keys([&#39;Name&#39;, &#39;Age&#39;])
lst = list(dic.keys())  # 转换为列表
print(lst)  # [&#39;Name&#39;, &#39;Age&#39;]
dict_keys([&#39;Name&#39;, &#39;Age&#39;])
[&#39;Name&#39;, &#39;Age&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dict.values()&lt;/code&gt;  返回一个迭代器，可以使用  &lt;code&gt;list()&lt;/code&gt;  来转换为列表，列表为字典中的所有值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[100]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dic = &amp;#123;&#39;Sex&#39;: &#39;female&#39;, &#39;Age&#39;: 7, &#39;Name&#39;: &#39;Zara&#39;&amp;#125;
print(dic.values())
# dict_values([&#39;female&#39;, 7, &#39;Zara&#39;])

print(list(dic.values()))
# [7, &#39;female&#39;, &#39;Zara&#39;]
dict_values([&#39;female&#39;, 7, &#39;Zara&#39;])
[&#39;female&#39;, 7, &#39;Zara&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dict.items()&lt;/code&gt;  以列表返回可遍历的 (键，值) 元组数组。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[101]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dic = &amp;#123;&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 7&amp;#125;
print(dic.items())
# dict_items([(&#39;Name&#39;, &#39;Lsgogroup&#39;), (&#39;Age&#39;, 7)])

print(tuple(dic.items()))
# ((&#39;Name&#39;, &#39;Lsgogroup&#39;), (&#39;Age&#39;, 7))

print(list(dic.items()))
# [(&#39;Name&#39;, &#39;Lsgogroup&#39;), (&#39;Age&#39;, 7)]
dict_items([(&#39;Name&#39;, &#39;Lsgogroup&#39;), (&#39;Age&#39;, 7)])
((&#39;Name&#39;, &#39;Lsgogroup&#39;), (&#39;Age&#39;, 7))
[(&#39;Name&#39;, &#39;Lsgogroup&#39;), (&#39;Age&#39;, 7)]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dict.get(key, default=None)&lt;/code&gt;  返回指定键的值，如果值不在字典中返回默认值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[102]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dic = &amp;#123;&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 27&amp;#125;
print(&amp;quot;Age 值为 : %s&amp;quot; % dic.get(&#39;Age&#39;))  # Age 值为 : 27
print(&amp;quot;Sex 值为 : %s&amp;quot; % dic.get(&#39;Sex&#39;, &amp;quot;NA&amp;quot;))  # Sex 值为 : NA
print(dic)  # &amp;#123;&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 27&amp;#125;
Age 值为 : 27
Sex 值为 : NA
&amp;#123;&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 27&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dict.setdefault(key, default=None)&lt;/code&gt;  和 &lt;code&gt;get()&lt;/code&gt;  方法 类似，如果键不存在于字典中，将会添加键并将值设为默认值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[103]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dic = &amp;#123;&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 7&amp;#125;
print(&amp;quot;Age 键的值为 : %s&amp;quot; % dic.setdefault(&#39;Age&#39;, None))  # Age 键的值为 : 7
print(&amp;quot;Sex 键的值为 : %s&amp;quot; % dic.setdefault(&#39;Sex&#39;, None))  # Sex 键的值为 : None
print(dic)  
# &amp;#123;&#39;Age&#39;: 7, &#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Sex&#39;: None&amp;#125;
Age 键的值为 : 7
Sex 键的值为 : None
&amp;#123;&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 7, &#39;Sex&#39;: None&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;key in dict&lt;/code&gt;   &lt;code&gt;in&lt;/code&gt;  操作符用于判断键是否存在于字典中，如果键在字典 dict 里返回 &lt;code&gt;true&lt;/code&gt; ，否则返回 &lt;code&gt;false&lt;/code&gt; 。而 &lt;code&gt;not in&lt;/code&gt;  操作符刚好相反，如果键在字典 dict 里返回 &lt;code&gt;false&lt;/code&gt; ，否则返回 &lt;code&gt;true&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[104]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dic = &amp;#123;&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 7&amp;#125;

# in 检测键 Age 是否存在
if &#39;Age&#39; in dic:
    print(&amp;quot;键 Age 存在&amp;quot;)
else:
    print(&amp;quot;键 Age 不存在&amp;quot;)

# 检测键 Sex 是否存在
if &#39;Sex&#39; in dic:
    print(&amp;quot;键 Sex 存在&amp;quot;)
else:
    print(&amp;quot;键 Sex 不存在&amp;quot;)

# not in 检测键 Age 是否存在
if &#39;Age&#39; not in dic:
    print(&amp;quot;键 Age 不存在&amp;quot;)
else:
    print(&amp;quot;键 Age 存在&amp;quot;)

# 键 Age 存在
# 键 Sex 不存在
# 键 Age 存在
键 Age 存在
键 Sex 不存在
键 Age 存在
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dict.pop(key[,default])&lt;/code&gt;  删除字典给定键  &lt;code&gt;key&lt;/code&gt;  所对应的值，返回值为被删除的值。 &lt;code&gt;key&lt;/code&gt;  值必须给出。若 &lt;code&gt;key&lt;/code&gt;  不存在，则返回  &lt;code&gt;default&lt;/code&gt;  值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;del dict[key]&lt;/code&gt;  删除字典给定键  &lt;code&gt;key&lt;/code&gt;  所对应的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[105]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dic1 = &amp;#123;1: &amp;quot;a&amp;quot;, 2: [1, 2]&amp;#125;
print(dic1.pop(1), dic1)  # a &amp;#123;2: [1, 2]&amp;#125;

# 设置默认值，必须添加，否则报错
print(dic1.pop(3, &amp;quot;nokey&amp;quot;), dic1)  # nokey &amp;#123;2: [1, 2]&amp;#125;

del dic1[2]
print(dic1)  # &amp;#123;&amp;#125;
a &amp;#123;2: [1, 2]&amp;#125;
nokey &amp;#123;2: [1, 2]&amp;#125;
&amp;#123;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dict.popitem()&lt;/code&gt;  随机返回并删除字典中的一对键和值，如果字典已经为空，却调用了此方法，就报出 KeyError 异常。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[107]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dic1 = &amp;#123;1: &amp;quot;a&amp;quot;, 2: [1, 2]&amp;#125;
print(dic1.popitem())  # &amp;#123;2: [1, 2]&amp;#125;
print(dic1)  # (1, &#39;a&#39;)
(2, [1, 2])
&amp;#123;1: &#39;a&#39;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dict.clear()&lt;/code&gt;  用于删除字典内所有元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[108]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dic = &amp;#123;&#39;Name&#39;: &#39;Zara&#39;, &#39;Age&#39;: 7&amp;#125;
print(&amp;quot;字典长度 : %d&amp;quot; % len(dic))  # 字典长度 : 2
dic.clear()
print(&amp;quot;字典删除后长度 : %d&amp;quot; % len(dic))  
# 字典删除后长度 : 0
字典长度 : 2
字典删除后长度 : 0
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dict.copy()&lt;/code&gt;  返回一个字典的浅复制。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[109]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dic1 = &amp;#123;&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;&amp;#125;
dic2 = dic1.copy()
print(&amp;quot;dic2&amp;quot;)  
# &amp;#123;&#39;Age&#39;: 7, &#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Class&#39;: &#39;First&#39;&amp;#125;
dic2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】直接赋值和 copy 的区别&lt;/p&gt;
&lt;p&gt;[110]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dic1 = &amp;#123;&#39;user&#39;: &#39;lsgogroup&#39;, &#39;num&#39;: [1, 2, 3]&amp;#125;

# 引用对象
dic2 = dic1  
# 浅拷贝父对象（一级目录），子对象（二级目录）不拷贝，还是引用
dic3 = dic1.copy()  

print(id(dic1))  # 148635574728
print(id(dic2))  # 148635574728
print(id(dic3))  # 148635574344

# 修改 data 数据
dic1[&#39;user&#39;] = &#39;root&#39;
dic1[&#39;num&#39;].remove(1)

# 输出结果
print(dic1)  # &amp;#123;&#39;user&#39;: &#39;root&#39;, &#39;num&#39;: [2, 3]&amp;#125;
print(dic2)  # &amp;#123;&#39;user&#39;: &#39;root&#39;, &#39;num&#39;: [2, 3]&amp;#125;
print(dic3)  # &amp;#123;&#39;user&#39;: &#39;runoob&#39;, &#39;num&#39;: [2, 3]&amp;#125;
2131669221448
2131669221448
2131669225120
&amp;#123;&#39;user&#39;: &#39;root&#39;, &#39;num&#39;: [2, 3]&amp;#125;
&amp;#123;&#39;user&#39;: &#39;root&#39;, &#39;num&#39;: [2, 3]&amp;#125;
&amp;#123;&#39;user&#39;: &#39;lsgogroup&#39;, &#39;num&#39;: [2, 3]&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dict.update(dict2)&lt;/code&gt;  把字典参数  &lt;code&gt;dict2&lt;/code&gt;  的  &lt;code&gt;key:value&lt;/code&gt;  对 更新到字典  &lt;code&gt;dict&lt;/code&gt;  里。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[111]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dic = &amp;#123;&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 7&amp;#125;
dic2 = &amp;#123;&#39;Sex&#39;: &#39;female&#39;, &#39;Age&#39;: 8&amp;#125;
dic.update(dic2)
print(dic)  
# &amp;#123;&#39;Sex&#39;: &#39;female&#39;, &#39;Age&#39;: 8, &#39;Name&#39;: &#39;Lsgogroup&#39;&amp;#125;
&amp;#123;&#39;Name&#39;: &#39;Lsgogroup&#39;, &#39;Age&#39;: 8, &#39;Sex&#39;: &#39;female&#39;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;集合&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#集合&#34;&gt;#&lt;/a&gt; 集合&lt;/h1&gt;
&lt;p&gt;Python 中 &lt;code&gt;set&lt;/code&gt;  与 &lt;code&gt;dict&lt;/code&gt;  类似，也是一组 &lt;code&gt;key&lt;/code&gt;  的集合，但不存储 &lt;code&gt;value&lt;/code&gt; 。由于 &lt;code&gt;key&lt;/code&gt;  不能重复，所以，在 &lt;code&gt;set&lt;/code&gt;  中，没有重复的 &lt;code&gt;key&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;注意， &lt;code&gt;key&lt;/code&gt;  为不可变类型，即可哈希的值。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[112]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;num = &amp;#123;&amp;#125;
print(type(num))  # &amp;lt;class &#39;dict&#39;&amp;gt;
num = &amp;#123;1, 2, 3, 4&amp;#125;
print(type(num))  # &amp;lt;class &#39;set&#39;&amp;gt;
&amp;lt;class &#39;dict&#39;&amp;gt;
&amp;lt;class &#39;set&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;1-集合的创建&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-集合的创建&#34;&gt;#&lt;/a&gt; 1. 集合的创建&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;先创建对象再加入元素。&lt;/li&gt;
&lt;li&gt;在创建空集合的时候只能使用 &lt;code&gt;s = set()&lt;/code&gt; ，因为 &lt;code&gt;s = &amp;#123;&amp;#125;&lt;/code&gt;  创建的是空字典。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[113]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;basket = set()
basket.add(&#39;apple&#39;)
basket.add(&#39;banana&#39;)
print(basket)  # &amp;#123;&#39;banana&#39;, &#39;apple&#39;&amp;#125;
&amp;#123;&#39;banana&#39;, &#39;apple&#39;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;直接把一堆元素用花括号括起来 &lt;code&gt;&amp;#123;元素1, 元素2, ..., 元素n&amp;#125;&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;重复元素在 &lt;code&gt;set&lt;/code&gt;  中会被自动被过滤。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[114]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;basket = &amp;#123;&#39;apple&#39;, &#39;orange&#39;, &#39;apple&#39;, &#39;pear&#39;, &#39;orange&#39;, &#39;banana&#39;&amp;#125;
print(basket)  # &amp;#123;&#39;banana&#39;, &#39;apple&#39;, &#39;pear&#39;, &#39;orange&#39;&amp;#125;
&amp;#123;&#39;pear&#39;, &#39;orange&#39;, &#39;banana&#39;, &#39;apple&#39;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;set(value)&lt;/code&gt;  工厂函数，把列表或元组转换成集合。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[115]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a = set(&#39;abracadabra&#39;)
print(a)  
# &amp;#123;&#39;r&#39;, &#39;b&#39;, &#39;d&#39;, &#39;c&#39;, &#39;a&#39;&amp;#125;

b = set((&amp;quot;Google&amp;quot;, &amp;quot;Lsgogroup&amp;quot;, &amp;quot;Taobao&amp;quot;, &amp;quot;Taobao&amp;quot;))
print(b)  
# &amp;#123;&#39;Taobao&#39;, &#39;Lsgogroup&#39;, &#39;Google&#39;&amp;#125;

c = set([&amp;quot;Google&amp;quot;, &amp;quot;Lsgogroup&amp;quot;, &amp;quot;Taobao&amp;quot;, &amp;quot;Google&amp;quot;])
print(c)  
# &amp;#123;&#39;Taobao&#39;, &#39;Lsgogroup&#39;, &#39;Google&#39;&amp;#125;
&amp;#123;&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;&amp;#125;
&amp;#123;&#39;Taobao&#39;, &#39;Google&#39;, &#39;Lsgogroup&#39;&amp;#125;
&amp;#123;&#39;Taobao&#39;, &#39;Google&#39;, &#39;Lsgogroup&#39;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】去掉列表中重复的元素&lt;/p&gt;
&lt;p&gt;[116]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lst = [0, 1, 2, 3, 4, 5, 5, 3, 1]

temp = []
for item in lst:
    if item not in temp:
        temp.append(item)

print(temp)  # [0, 1, 2, 3, 4, 5]

a = set(lst)
print(list(a))  # [0, 1, 2, 3, 4, 5]
[0, 1, 2, 3, 4, 5]
[0, 1, 2, 3, 4, 5]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从结果发现集合的两个特点：无序 (unordered) 和唯一 (unique)。&lt;/p&gt;
&lt;p&gt;由于  &lt;code&gt;set&lt;/code&gt;  存储的是无序集合，所以我们不可以为集合创建索引或执行切片 (slice) 操作，也没有键 (keys) 可用来获取集合中元素的值，但是可以判断一个元素是否在集合中。&lt;/p&gt;
&lt;h2 id=&#34;2-访问集合中的值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-访问集合中的值&#34;&gt;#&lt;/a&gt; 2. 访问集合中的值&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;可以使用 &lt;code&gt;len()&lt;/code&gt;  內建函数得到集合的大小。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[117]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;s = set([&#39;Google&#39;, &#39;Baidu&#39;, &#39;Taobao&#39;])
print(len(s))  # 3
3
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;可以使用 &lt;code&gt;for&lt;/code&gt;  把集合中的数据一个个读取出来。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[7]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;s = set([&#39;Google&#39;, &#39;Baidu&#39;, &#39;Taobao&#39;])
for item in s:
    print(item)
    
# Baidu
# Google
# Taobao
Baidu
Taobao
Google
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;可以通过 &lt;code&gt;in&lt;/code&gt;  或 &lt;code&gt;not in&lt;/code&gt;  判断一个元素是否在集合中已经存在&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[119]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;s = set([&#39;Google&#39;, &#39;Baidu&#39;, &#39;Taobao&#39;])
print(&#39;Taobao&#39; in s)  # True
print(&#39;Facebook&#39; not in s)  # True
True
True
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-集合的内置方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-集合的内置方法&#34;&gt;#&lt;/a&gt; 3. 集合的内置方法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set.add(elmnt)&lt;/code&gt;  用于给集合添加元素，如果添加的元素在集合中已存在，则不执行任何操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[120]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fruits = &amp;#123;&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;&amp;#125;
fruits.add(&amp;quot;orange&amp;quot;)
print(fruits)  
# &amp;#123;&#39;orange&#39;, &#39;cherry&#39;, &#39;banana&#39;, &#39;apple&#39;&amp;#125;

fruits.add(&amp;quot;apple&amp;quot;)
print(fruits)  
# &amp;#123;&#39;orange&#39;, &#39;cherry&#39;, &#39;banana&#39;, &#39;apple&#39;&amp;#125;
&amp;#123;&#39;cherry&#39;, &#39;orange&#39;, &#39;banana&#39;, &#39;apple&#39;&amp;#125;
&amp;#123;&#39;cherry&#39;, &#39;orange&#39;, &#39;banana&#39;, &#39;apple&#39;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set.update(set)&lt;/code&gt;  用于修改当前集合，可以添加新的元素或集合到当前集合中，如果添加的元素在集合中已存在，则该元素只会出现一次，重复的会忽略。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[121]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = &amp;#123;&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;&amp;#125;
y = &amp;#123;&amp;quot;google&amp;quot;, &amp;quot;baidu&amp;quot;, &amp;quot;apple&amp;quot;&amp;#125;
x.update(y)
print(x)
# &amp;#123;&#39;cherry&#39;, &#39;banana&#39;, &#39;apple&#39;, &#39;google&#39;, &#39;baidu&#39;&amp;#125;

y.update([&amp;quot;lsgo&amp;quot;, &amp;quot;dreamtech&amp;quot;])
print(y)
# &amp;#123;&#39;lsgo&#39;, &#39;baidu&#39;, &#39;dreamtech&#39;, &#39;apple&#39;, &#39;google&#39;&amp;#125;
&amp;#123;&#39;google&#39;, &#39;banana&#39;, &#39;cherry&#39;, &#39;apple&#39;, &#39;baidu&#39;&amp;#125;
&amp;#123;&#39;apple&#39;, &#39;dreamtech&#39;, &#39;lsgo&#39;, &#39;google&#39;, &#39;baidu&#39;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set.remove(item)&lt;/code&gt;  用于移除集合中的指定元素。如果元素不存在，则会发生错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[122]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fruits = &amp;#123;&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;&amp;#125;
fruits.remove(&amp;quot;banana&amp;quot;)
print(fruits)  # &amp;#123;&#39;apple&#39;, &#39;cherry&#39;&amp;#125;
&amp;#123;&#39;cherry&#39;, &#39;apple&#39;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set.discard(value)&lt;/code&gt;  用于移除指定的集合元素。 &lt;code&gt;remove()&lt;/code&gt;  方法在移除一个不存在的元素时会发生错误，而  &lt;code&gt;discard()&lt;/code&gt;  方法不会。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[123]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fruits = &amp;#123;&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;&amp;#125;
fruits.discard(&amp;quot;banana&amp;quot;)
print(fruits)  # &amp;#123;&#39;apple&#39;, &#39;cherry&#39;&amp;#125;
&amp;#123;&#39;cherry&#39;, &#39;apple&#39;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set.pop()&lt;/code&gt;  用于随机移除一个元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[66]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fruits = &amp;#123;&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;&amp;#125;
x = fruits.pop()
print(fruits)  # &amp;#123;&#39;cherry&#39;, &#39;apple&#39;&amp;#125;
print(x)  # banana
&amp;#123;&#39;banana&#39;, &#39;apple&#39;&amp;#125;
cherry
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;由于 set 是无序和无重复元素的集合，所以两个或多个 set 可以做数学意义上的集合操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set.intersection(set1, set2)&lt;/code&gt;  返回两个集合的交集。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set1 &amp;amp; set2&lt;/code&gt;  返回两个集合的交集。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set.intersection_update(set1, set2)&lt;/code&gt;  交集，在原始的集合上移除不重叠的元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[67]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a = set(&#39;abracadabra&#39;)
b = set(&#39;alacazam&#39;)
print(a)  # &amp;#123;&#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;b&#39;, &#39;d&#39;&amp;#125;
print(b)  # &amp;#123;&#39;c&#39;, &#39;a&#39;, &#39;l&#39;, &#39;m&#39;, &#39;z&#39;&amp;#125;

c = a.intersection(b)
print(c)  # &amp;#123;&#39;a&#39;, &#39;c&#39;&amp;#125;
print(a &amp;amp; b)  # &amp;#123;&#39;c&#39;, &#39;a&#39;&amp;#125;
print(a)  # &amp;#123;&#39;a&#39;, &#39;r&#39;, &#39;c&#39;, &#39;b&#39;, &#39;d&#39;&amp;#125;

a.intersection_update(b)
print(a)  # &amp;#123;&#39;a&#39;, &#39;c&#39;&amp;#125;
&amp;#123;&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;&amp;#125;
&amp;#123;&#39;l&#39;, &#39;a&#39;, &#39;c&#39;, &#39;z&#39;, &#39;m&#39;&amp;#125;
&amp;#123;&#39;a&#39;, &#39;c&#39;&amp;#125;
&amp;#123;&#39;a&#39;, &#39;c&#39;&amp;#125;
&amp;#123;&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;&amp;#125;
&amp;#123;&#39;a&#39;, &#39;c&#39;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set.union(set1, set2)&lt;/code&gt;  返回两个集合的并集。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set1 | set2&lt;/code&gt;  返回两个集合的并集。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[68]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a = set(&#39;abracadabra&#39;)
b = set(&#39;alacazam&#39;)
print(a)  # &amp;#123;&#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;b&#39;, &#39;d&#39;&amp;#125;
print(b)  # &amp;#123;&#39;c&#39;, &#39;a&#39;, &#39;l&#39;, &#39;m&#39;, &#39;z&#39;&amp;#125;

print(a | b)  
# &amp;#123;&#39;l&#39;, &#39;d&#39;, &#39;m&#39;, &#39;b&#39;, &#39;a&#39;, &#39;r&#39;, &#39;z&#39;, &#39;c&#39;&amp;#125;

c = a.union(b)
print(c)  
# &amp;#123;&#39;c&#39;, &#39;a&#39;, &#39;d&#39;, &#39;m&#39;, &#39;r&#39;, &#39;b&#39;, &#39;z&#39;, &#39;l&#39;&amp;#125;
&amp;#123;&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;&amp;#125;
&amp;#123;&#39;l&#39;, &#39;a&#39;, &#39;c&#39;, &#39;z&#39;, &#39;m&#39;&amp;#125;
&amp;#123;&#39;l&#39;, &#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;z&#39;, &#39;d&#39;, &#39;m&#39;&amp;#125;
&amp;#123;&#39;l&#39;, &#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;z&#39;, &#39;d&#39;, &#39;m&#39;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set.difference(set)&lt;/code&gt;  返回集合的差集。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set1 - set2&lt;/code&gt;  返回集合的差集。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set.difference_update(set)&lt;/code&gt;  集合的差集，直接在原来的集合中移除元素，没有返回值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[69]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a = set(&#39;abracadabra&#39;)
b = set(&#39;alacazam&#39;)
print(a)  # &amp;#123;&#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;b&#39;, &#39;d&#39;&amp;#125;
print(b)  # &amp;#123;&#39;c&#39;, &#39;a&#39;, &#39;l&#39;, &#39;m&#39;, &#39;z&#39;&amp;#125;

c = a.difference(b)
print(c)  # &amp;#123;&#39;b&#39;, &#39;d&#39;, &#39;r&#39;&amp;#125;
print(a - b)  # &amp;#123;&#39;d&#39;, &#39;b&#39;, &#39;r&#39;&amp;#125;

print(a)  # &amp;#123;&#39;r&#39;, &#39;d&#39;, &#39;c&#39;, &#39;a&#39;, &#39;b&#39;&amp;#125;
a.difference_update(b)
print(a)  # &amp;#123;&#39;d&#39;, &#39;r&#39;, &#39;b&#39;&amp;#125;
&amp;#123;&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;&amp;#125;
&amp;#123;&#39;l&#39;, &#39;a&#39;, &#39;c&#39;, &#39;z&#39;, &#39;m&#39;&amp;#125;
&amp;#123;&#39;d&#39;, &#39;b&#39;, &#39;r&#39;&amp;#125;
&amp;#123;&#39;d&#39;, &#39;b&#39;, &#39;r&#39;&amp;#125;
&amp;#123;&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;&amp;#125;
&amp;#123;&#39;b&#39;, &#39;r&#39;, &#39;d&#39;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set.symmetric_difference(set)&lt;/code&gt;  返回集合的异或。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set1 ^ set2&lt;/code&gt;  返回集合的异或。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set.symmetric_difference_update(set)&lt;/code&gt;  移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[70]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a = set(&#39;abracadabra&#39;)
b = set(&#39;alacazam&#39;)
print(a)  # &amp;#123;&#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;b&#39;, &#39;d&#39;&amp;#125;
print(b)  # &amp;#123;&#39;c&#39;, &#39;a&#39;, &#39;l&#39;, &#39;m&#39;, &#39;z&#39;&amp;#125;

c = a.symmetric_difference(b)
print(c)  # &amp;#123;&#39;m&#39;, &#39;r&#39;, &#39;l&#39;, &#39;b&#39;, &#39;z&#39;, &#39;d&#39;&amp;#125;
print(a ^ b)  # &amp;#123;&#39;m&#39;, &#39;r&#39;, &#39;l&#39;, &#39;b&#39;, &#39;z&#39;, &#39;d&#39;&amp;#125;

print(a)  # &amp;#123;&#39;r&#39;, &#39;d&#39;, &#39;c&#39;, &#39;a&#39;, &#39;b&#39;&amp;#125;
a.symmetric_difference_update(b)
print(a)  # &amp;#123;&#39;r&#39;, &#39;b&#39;, &#39;m&#39;, &#39;l&#39;, &#39;z&#39;, &#39;d&#39;&amp;#125;
&amp;#123;&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;&amp;#125;
&amp;#123;&#39;l&#39;, &#39;a&#39;, &#39;c&#39;, &#39;z&#39;, &#39;m&#39;&amp;#125;
&amp;#123;&#39;l&#39;, &#39;b&#39;, &#39;z&#39;, &#39;r&#39;, &#39;d&#39;, &#39;m&#39;&amp;#125;
&amp;#123;&#39;l&#39;, &#39;b&#39;, &#39;z&#39;, &#39;r&#39;, &#39;d&#39;, &#39;m&#39;&amp;#125;
&amp;#123;&#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;&amp;#125;
&amp;#123;&#39;l&#39;, &#39;b&#39;, &#39;r&#39;, &#39;z&#39;, &#39;d&#39;, &#39;m&#39;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set.issubset(set)&lt;/code&gt;  判断集合是不是被其他集合包含，如果是则返回 True，否则返回 False。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set1 &amp;lt;= set2&lt;/code&gt;  判断集合是不是被其他集合包含，如果是则返回 True，否则返回 False。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[71]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = &amp;#123;&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;&amp;#125;
y = &amp;#123;&amp;quot;f&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;a&amp;quot;&amp;#125;
z = x.issubset(y)
print(z)  # True
print(x &amp;lt;= y)  # True

x = &amp;#123;&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;&amp;#125;
y = &amp;#123;&amp;quot;f&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;b&amp;quot;&amp;#125;
z = x.issubset(y)
print(z)  # False
print(x &amp;lt;= y)  # False
True
True
False
False
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set.issuperset(set)&lt;/code&gt;  用于判断集合是不是包含其他集合，如果是则返回 True，否则返回 False。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set1 &amp;gt;= set2&lt;/code&gt;  判断集合是不是包含其他集合，如果是则返回 True，否则返回 False。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[72]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = &amp;#123;&amp;quot;f&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;a&amp;quot;&amp;#125;
y = &amp;#123;&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;&amp;#125;
z = x.issuperset(y)
print(z)  # True
print(x &amp;gt;= y)  # True

x = &amp;#123;&amp;quot;f&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;b&amp;quot;&amp;#125;
y = &amp;#123;&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;&amp;#125;
z = x.issuperset(y)
print(z)  # False
print(x &amp;gt;= y)  # False
True
True
False
False
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set.isdisjoint(set)&lt;/code&gt;  用于判断两个集合是不是不相交，如果是返回 True，否则返回 False。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[73]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = &amp;#123;&amp;quot;f&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;b&amp;quot;&amp;#125;
y = &amp;#123;&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;&amp;#125;
z = x.isdisjoint(y)
print(z)  # False

x = &amp;#123;&amp;quot;f&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;m&amp;quot;, &amp;quot;g&amp;quot;&amp;#125;
y = &amp;#123;&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;&amp;#125;
z = x.isdisjoint(y)
print(z)  # True
False
True
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-集合的转换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-集合的转换&#34;&gt;#&lt;/a&gt; 4. 集合的转换&lt;/h2&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[74]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;se = set(range(4))
li = list(se)
tu = tuple(se)

print(se, type(se))  # &amp;#123;0, 1, 2, 3&amp;#125; &amp;lt;class &#39;set&#39;&amp;gt;
print(li, type(li))  # [0, 1, 2, 3] &amp;lt;class &#39;list&#39;&amp;gt;
print(tu, type(tu))  # (0, 1, 2, 3) &amp;lt;class &#39;tuple&#39;&amp;gt;
&amp;#123;0, 1, 2, 3&amp;#125; &amp;lt;class &#39;set&#39;&amp;gt;
[0, 1, 2, 3] &amp;lt;class &#39;list&#39;&amp;gt;
(0, 1, 2, 3) &amp;lt;class &#39;tuple&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;5-不可变集合&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-不可变集合&#34;&gt;#&lt;/a&gt; 5. 不可变集合&lt;/h2&gt;
&lt;p&gt;Python 提供了不能改变元素的集合的实现版本，即不能增加或删除元素，类型名叫 &lt;code&gt;frozenset&lt;/code&gt; 。需要注意的是 &lt;code&gt;frozenset&lt;/code&gt;  仍然可以进行集合操作，只是不能用带有 &lt;code&gt;update&lt;/code&gt;  的方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;frozenset([iterable])&lt;/code&gt;  返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[75]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a = frozenset(range(10))  # 生成一个新的不可变集合
print(a)  
# frozenset(&amp;#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9&amp;#125;)

b = frozenset(&#39;lsgogroup&#39;)
print(b)  
# frozenset(&amp;#123;&#39;g&#39;, &#39;s&#39;, &#39;p&#39;, &#39;r&#39;, &#39;u&#39;, &#39;o&#39;, &#39;l&#39;&amp;#125;)
frozenset(&amp;#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9&amp;#125;)
frozenset(&amp;#123;&#39;l&#39;, &#39;g&#39;, &#39;r&#39;, &#39;u&#39;, &#39;o&#39;, &#39;s&#39;, &#39;p&#39;&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;序列&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#序列&#34;&gt;#&lt;/a&gt; 序列&lt;/h1&gt;
&lt;p&gt;在 Python 中，序列类型包括字符串、列表、元组、集合和字典，这些序列支持一些通用的操作，但比较特殊的是，集合和字典不支持索引、切片、相加和相乘操作。&lt;/p&gt;
&lt;h2 id=&#34;1-针对序列的内置函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-针对序列的内置函数&#34;&gt;#&lt;/a&gt; 1. 针对序列的内置函数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list(sub)&lt;/code&gt;  把一个可迭代对象转换为列表。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[76]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a = list()
print(a)  # []

b = &#39;I Love LsgoGroup&#39;
b = list(b)
print(b)  
# [&#39;I&#39;, &#39; &#39;, &#39;L&#39;, &#39;o&#39;, &#39;v&#39;, &#39;e&#39;, &#39; &#39;, &#39;L&#39;, &#39;s&#39;, &#39;g&#39;, &#39;o&#39;, &#39;G&#39;, &#39;r&#39;, &#39;o&#39;, &#39;u&#39;, &#39;p&#39;]

c = (1, 1, 2, 3, 5, 8)
c = list(c)
print(c)  # [1, 1, 2, 3, 5, 8]
[]
[&#39;I&#39;, &#39; &#39;, &#39;L&#39;, &#39;o&#39;, &#39;v&#39;, &#39;e&#39;, &#39; &#39;, &#39;L&#39;, &#39;s&#39;, &#39;g&#39;, &#39;o&#39;, &#39;G&#39;, &#39;r&#39;, &#39;o&#39;, &#39;u&#39;, &#39;p&#39;]
[1, 1, 2, 3, 5, 8]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tuple(sub)&lt;/code&gt;  把一个可迭代对象转换为元组。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[77]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a = tuple()
print(a)  # ()

b = &#39;I Love LsgoGroup&#39;
b = tuple(b)
print(b)  
# (&#39;I&#39;, &#39; &#39;, &#39;L&#39;, &#39;o&#39;, &#39;v&#39;, &#39;e&#39;, &#39; &#39;, &#39;L&#39;, &#39;s&#39;, &#39;g&#39;, &#39;o&#39;, &#39;G&#39;, &#39;r&#39;, &#39;o&#39;, &#39;u&#39;, &#39;p&#39;)

c = [1, 1, 2, 3, 5, 8]
c = tuple(c)
print(c)  # (1, 1, 2, 3, 5, 8)
()
(&#39;I&#39;, &#39; &#39;, &#39;L&#39;, &#39;o&#39;, &#39;v&#39;, &#39;e&#39;, &#39; &#39;, &#39;L&#39;, &#39;s&#39;, &#39;g&#39;, &#39;o&#39;, &#39;G&#39;, &#39;r&#39;, &#39;o&#39;, &#39;u&#39;, &#39;p&#39;)
(1, 1, 2, 3, 5, 8)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;str(obj)&lt;/code&gt;  把 obj 对象转换为字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[78]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a = 123
a = str(a)
print(a)  # 123
123
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;len(s)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;返回对象（字符、列表、元组等）长度或元素个数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt;  – 对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[79]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a = list()
print(len(a))  # 0

b = (&#39;I&#39;, &#39; &#39;, &#39;L&#39;, &#39;o&#39;, &#39;v&#39;, &#39;e&#39;, &#39; &#39;, &#39;L&#39;, &#39;s&#39;, &#39;g&#39;, &#39;o&#39;, &#39;G&#39;, &#39;r&#39;, &#39;o&#39;, &#39;u&#39;, &#39;p&#39;)
print(len(b))  # 16

c = &#39;I Love LsgoGroup&#39;
print(len(c))  # 16
0
16
16
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;max(sub)&lt;/code&gt;  返回序列或者参数集合中的最大值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[80]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print(max(1, 2, 3, 4, 5))  # 5
print(max([-8, 99, 3, 7, 83]))  # 99
print(max(&#39;IloveLsgoGroup&#39;))  # v
5
99
v
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;min(sub)&lt;/code&gt;  返回序列或参数集合中的最小值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[81]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print(min(1, 2, 3, 4, 5))  # 1
print(min([-8, 99, 3, 7, 83]))  # -8
print(min(&#39;IloveLsgoGroup&#39;))  # G
1
-8
G
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sum(iterable[, start=0])&lt;/code&gt;  返回序列 &lt;code&gt;iterable&lt;/code&gt;  与可选参数 &lt;code&gt;start&lt;/code&gt;  的总和。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[82]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print(sum([1, 3, 5, 7, 9]))  # 25
print(sum([1, 3, 5, 7, 9], 10))  # 35
print(sum((1, 3, 5, 7, 9)))  # 25
print(sum((1, 3, 5, 7, 9), 20))  # 45
25
35
25
45
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;sorted(iterable, key=None, reverse=False)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对所有可迭代的对象进行排序操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;iterable&lt;/code&gt;  – 可迭代对象。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;key&lt;/code&gt;  – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reverse&lt;/code&gt;  – 排序规则， &lt;code&gt;reverse = True&lt;/code&gt;  降序 ，  &lt;code&gt;reverse = False&lt;/code&gt;  升序（默认）。&lt;/li&gt;
&lt;li&gt;返回重新排序的列表。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[83]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = [-8, 99, 3, 7, 83]
print(sorted(x))  # [-8, 3, 7, 83, 99]
print(sorted(x, reverse=True))  # [99, 83, 7, 3, -8]

t = (&amp;#123;&amp;quot;age&amp;quot;: 20, &amp;quot;name&amp;quot;: &amp;quot;a&amp;quot;&amp;#125;, &amp;#123;&amp;quot;age&amp;quot;: 25, &amp;quot;name&amp;quot;: &amp;quot;b&amp;quot;&amp;#125;, &amp;#123;&amp;quot;age&amp;quot;: 10, &amp;quot;name&amp;quot;: &amp;quot;c&amp;quot;&amp;#125;)
x = sorted(t, key=lambda a: a[&amp;quot;age&amp;quot;])
print(x)
# [&amp;#123;&#39;age&#39;: 10, &#39;name&#39;: &#39;c&#39;&amp;#125;, &amp;#123;&#39;age&#39;: 20, &#39;name&#39;: &#39;a&#39;&amp;#125;, &amp;#123;&#39;age&#39;: 25, &#39;name&#39;: &#39;b&#39;&amp;#125;]
[-8, 3, 7, 83, 99]
[99, 83, 7, 3, -8]
[&amp;#123;&#39;age&#39;: 10, &#39;name&#39;: &#39;c&#39;&amp;#125;, &amp;#123;&#39;age&#39;: 20, &#39;name&#39;: &#39;a&#39;&amp;#125;, &amp;#123;&#39;age&#39;: 25, &#39;name&#39;: &#39;b&#39;&amp;#125;]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;reversed(seq)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;函数返回一个反转的迭代器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;seq&lt;/code&gt;  – 要转换的序列，可以是 tuple, string, list 或 range。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[84]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;s = &#39;lsgogroup&#39;
x = reversed(s)
print(type(x))  # &amp;lt;class &#39;reversed&#39;&amp;gt;
print(x)  # &amp;lt;reversed object at 0x000002507E8EC2C8&amp;gt;
print(list(x))
# [&#39;p&#39;, &#39;u&#39;, &#39;o&#39;, &#39;r&#39;, &#39;g&#39;, &#39;o&#39;, &#39;g&#39;, &#39;s&#39;, &#39;l&#39;]

t = (&#39;l&#39;, &#39;s&#39;, &#39;g&#39;, &#39;o&#39;, &#39;g&#39;, &#39;r&#39;, &#39;o&#39;, &#39;u&#39;, &#39;p&#39;)
print(list(reversed(t)))
# [&#39;p&#39;, &#39;u&#39;, &#39;o&#39;, &#39;r&#39;, &#39;g&#39;, &#39;o&#39;, &#39;g&#39;, &#39;s&#39;, &#39;l&#39;]

r = range(5, 9)
print(list(reversed(r)))
# [8, 7, 6, 5]

x = [-8, 99, 3, 7, 83]
print(list(reversed(x)))
# [83, 7, 3, 99, -8]
&amp;lt;class &#39;reversed&#39;&amp;gt;
&amp;lt;reversed object at 0x000001F0517DFD68&amp;gt;
[&#39;p&#39;, &#39;u&#39;, &#39;o&#39;, &#39;r&#39;, &#39;g&#39;, &#39;o&#39;, &#39;g&#39;, &#39;s&#39;, &#39;l&#39;]
[&#39;p&#39;, &#39;u&#39;, &#39;o&#39;, &#39;r&#39;, &#39;g&#39;, &#39;o&#39;, &#39;g&#39;, &#39;s&#39;, &#39;l&#39;]
[8, 7, 6, 5]
[83, 7, 3, 99, -8]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;enumerate(sequence, [start=0])&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】用于将一个可遍历的数据对象 (如列表、元组或字符串) 组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。&lt;/p&gt;
&lt;p&gt;[85]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;seasons = [&#39;Spring&#39;, &#39;Summer&#39;, &#39;Fall&#39;, &#39;Winter&#39;]
a = list(enumerate(seasons))
print(a)  
# [(0, &#39;Spring&#39;), (1, &#39;Summer&#39;), (2, &#39;Fall&#39;), (3, &#39;Winter&#39;)]

b = list(enumerate(seasons, 1))
print(b)  
# [(1, &#39;Spring&#39;), (2, &#39;Summer&#39;), (3, &#39;Fall&#39;), (4, &#39;Winter&#39;)]

for i, element in a:
    print(&#39;&amp;#123;0&amp;#125;,&amp;#123;1&amp;#125;&#39;.format(i, element))
# 0,Spring
# 1,Summer
# 2,Fall
# 3,Winter
[(0, &#39;Spring&#39;), (1, &#39;Summer&#39;), (2, &#39;Fall&#39;), (3, &#39;Winter&#39;)]
[(1, &#39;Spring&#39;), (2, &#39;Summer&#39;), (3, &#39;Fall&#39;), (4, &#39;Winter&#39;)]
0,Spring
1,Summer
2,Fall
3,Winter
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;zip(iter1 [,iter2 [...]])
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，这样做的好处是节约了不少的内存。&lt;/li&gt;
&lt;li&gt;我们可以使用  &lt;code&gt;list()&lt;/code&gt;  转换来输出列表。&lt;/li&gt;
&lt;li&gt;如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用  &lt;code&gt;*&lt;/code&gt;  号操作符，可以将元组解压为列表。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[86]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a = [1, 2, 3]
b = [4, 5, 6]
c = [4, 5, 6, 7, 8]

zipped = zip(a, b)
print(zipped)  # &amp;lt;zip object at 0x000000C5D89EDD88&amp;gt;
print(list(zipped))  # [(1, 4), (2, 5), (3, 6)]
zipped = zip(a, c)
print(list(zipped))  # [(1, 4), (2, 5), (3, 6)]

a1, a2 = zip(*zip(a, b))
print(list(a1))  # [1, 2, 3]
print(list(a2))  # [4, 5, 6]
&amp;lt;zip object at 0x000001F0517E38C8&amp;gt;
[(1, 4), (2, 5), (3, 6)]
[(1, 4), (2, 5), (3, 6)]
[1, 2, 3]
[4, 5, 6]
&lt;/code&gt;&lt;/pre&gt;
</content>
        <updated>2021-01-26T06:41:39.000Z</updated>
    </entry>
    <entry>
        <id>https://alanosy.github.io/2021/01/26/python-day-1/</id>
        <title>python_day_1</title>
        <link rel="alternate" href="https://alanosy.github.io/2021/01/26/python-day-1/"/>
        <content type="html">&lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;Python 是一种通用编程语言，其在科学计算和机器学习领域具有广泛的应用。如果我们打算利用 Python 来执行机器学习，那么对 Python 有一些基本的了解就是至关重要的。本 Python 入门系列体验就是为这样的初学者精心准备的。&lt;/p&gt;
&lt;p&gt;本实验包括以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;变量、运算符与数据类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;注释&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 python 中，# 表示注释，作用于整行&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bashs&#34;&gt;print(&amp;quot;Hello World&amp;quot;)
#我的第一个程序
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中” 我的第一个程序 “在代码不起运行作用&lt;/p&gt;
&lt;p&gt;另外还有多行注释用 ``` 来标注&lt;/p&gt;
&lt;p&gt;例如&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​```&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;这是一个多引号注释&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;用于注释多行&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;···&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;print&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Hello china&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;运算符&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;算术运算符&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;大于&lt;/th&gt;
&lt;th&gt;&lt;code&gt;2 &amp;gt; 1&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;大于等于&lt;/td&gt;
&lt;td&gt;&lt;code&gt;2 &amp;gt;= 4&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;小于&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1 &amp;lt; 2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;小于等于&lt;/td&gt;
&lt;td&gt;&lt;code&gt;5 &amp;lt;= 2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;==&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等于&lt;/td&gt;
&lt;td&gt;&lt;code&gt;3 == 4&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;!=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不等于&lt;/td&gt;
&lt;td&gt;&lt;code&gt;3 != 5&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 12&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 0.75&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;比较运算符&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;and&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;与&lt;/th&gt;
&lt;th&gt;&lt;code&gt;(3 &amp;gt; 2) and (3 &amp;lt; 5)&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;or&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;或&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(1 &amp;gt; 3) or (9 &amp;lt; 2)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;not&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非&lt;/td&gt;
&lt;td&gt;&lt;code&gt;not (2 &amp;gt; 1)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;逻辑运算符&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;and&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;与&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;code&gt;(3 &amp;gt; 2) and (3 &amp;lt; 5)&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;or&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;或&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;(1 &amp;gt; 3) or (9 &amp;lt; 2)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;not&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;非&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;not (2 &amp;gt; 1)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;on&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;位运算符&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;~&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;按位取反&lt;/th&gt;
&lt;th&gt;&lt;code&gt;~4&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;按位与&lt;/td&gt;
&lt;td&gt;&lt;code&gt;4 &amp;amp; 5&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;   |&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;按位或&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;^&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;按位异或&lt;/td&gt;
&lt;td&gt;&lt;code&gt;4 ^ 5&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左移&lt;/td&gt;
&lt;td&gt;&lt;code&gt;4 &amp;lt;&amp;lt; 2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;右移&lt;/td&gt;
&lt;td&gt;&lt;code&gt;4 &amp;gt;&amp;gt; 2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 0b100&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 0b101&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# -0b101 -5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 0b100 4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 0b101 5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 0b1 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 0b10000 16&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 0b1 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;三元运算符&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; y&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    small &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    small &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; y&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;small&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;其他运算符&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;in&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;存在&lt;/th&gt;
&lt;th&gt;&lt;code&gt;&#39;A&#39; in [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;not in&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不存在&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&#39;h&#39; not in [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;is&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;quot;hello&amp;quot; is &amp;quot;hello&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;not is&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不是&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;quot;hello&amp;quot; is not &amp;quot;hello&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;letters &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;B&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;C&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;A&#39;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; letters&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;A&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39; exists&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;h&#39;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; letters&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;h&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39; not exists&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# A exists&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# h not exists&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;hello&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;hello&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a &lt;span class=&#34;token keyword&#34;&gt;is&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# True True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a &lt;span class=&#34;token keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;not&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# False False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;hello&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;hello&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a &lt;span class=&#34;token keyword&#34;&gt;is&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# False True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a &lt;span class=&#34;token keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;not&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# True False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is, is not 对比的是两个变量的内存地址&lt;/li&gt;
&lt;li&gt;==, != 对比的是两个变量的值&lt;/li&gt;
&lt;li&gt;比较的两个变量，指向的都是地址不可变的类型（str 等），那么 is，is not 和 ==，！= 是完全等价的。&lt;/li&gt;
&lt;li&gt;对比的两个变量，指向的是地址可变的类型（list，dict，tuple 等），则两者是有区别的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;运算符的优先级&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;**&lt;/th&gt;
&lt;th&gt;指数（最高优先级）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;~±&lt;/td&gt;
&lt;td&gt;按位翻转，一元加号和减号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;* / % //&lt;/td&gt;
&lt;td&gt;乘，除，取模和取整除）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+ -&lt;/td&gt;
&lt;td&gt;加法减法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;&amp;gt; &amp;lt;&amp;lt;&lt;/td&gt;
&lt;td&gt;右移，左移运算符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;amp;&lt;/td&gt;
&lt;td&gt;位‘AND’&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^|&lt;/td&gt;
&lt;td&gt;位运算符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;=&amp;lt;&amp;gt;&amp;gt;=&lt;/td&gt;
&lt;td&gt;比较运算符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&amp;gt;==!=&lt;/td&gt;
&lt;td&gt;等于运算符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;=%=/=//=-=+=*=**=&lt;/td&gt;
&lt;td&gt;赋值运算符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;is is not&lt;/td&gt;
&lt;td&gt;身份运算符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;in not in&lt;/td&gt;
&lt;td&gt;成员运算符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;not and or&lt;/td&gt;
&lt;td&gt;逻辑运算符&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# -9&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 0.1111111111111111&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# -12.5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;变量和赋值&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在使用变量之前，需要对其先赋值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;变量名可以包括字母、数字、下划线、但变量名不能以数字开头。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python 变量名是大小写敏感的，foo != Foo。&lt;/p&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;first &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;second &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;third &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; first + second&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;print&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;third&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;数据类型与转换&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;int&lt;/th&gt;
&lt;th&gt;整型  &lt;code&gt;&amp;lt;class &#39;int&#39;&amp;gt;&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;-876, 10&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;浮点型 &lt;code&gt;&amp;lt;class &#39;float&#39;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;3.149, 11.11&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;布尔型 &lt;code&gt;&amp;lt;class &#39;bool&#39;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;True, False&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; input&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;i=&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;print&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i,type&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;))&lt;/span&gt;可以查看i的类型&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;获取类型信息  &lt;code&gt;type(object)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;type ()` 不会认为子类是一种父类类型，不考虑继承关系。&lt;/p&gt;
&lt;p&gt;isinstance ()` 会认为子类是一种父类类型，考虑继承关系。&lt;/p&gt;
&lt;p&gt;如果要判断两个类型是否相同推荐使用  &lt;code&gt;isinstance()&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;类型转换&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;转换为整型  &lt;code&gt;int(x, base=10)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;转换为字符串  &lt;code&gt;str(object=&#39;&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;转换为浮点型  &lt;code&gt;float(x)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;print () 函数&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;print&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;*objects, &lt;span class=&#34;token assign-left variable&#34;&gt;sep&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39; &#39;&lt;/span&gt;, &lt;span class=&#34;token assign-left variable&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;&lt;span class=&#34;token entity&#34; title=&#34;\n&#34;&gt;\n&lt;/span&gt;&#39;&lt;/span&gt;, &lt;span class=&#34;token assign-left variable&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;sys.stdout, &lt;span class=&#34;token assign-left variable&#34;&gt;flush&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;False&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;将对象以字符串表示的方式格式化输出到流文件对象 file 里。其中所有非关键字参数都按 &lt;code&gt;str()&lt;/code&gt;  方式进行转换为字符串输出；&lt;/li&gt;
&lt;li&gt;关键字参数 &lt;code&gt;sep&lt;/code&gt;  是实现分隔符，比如多个参数输出时想要输出中间的分隔字符；&lt;/li&gt;
&lt;li&gt;关键字参数 &lt;code&gt;end&lt;/code&gt;  是输出结束时的字符，默认是换行符 &lt;code&gt;\n&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;关键字参数 &lt;code&gt;file&lt;/code&gt;  是定义流输出的文件，可以是标准的系统输出 &lt;code&gt;sys.stdout&lt;/code&gt; ，也可以重定义为别的文件；&lt;/li&gt;
&lt;li&gt;关键字参数 &lt;code&gt;flush&lt;/code&gt;  是立即把内容输出到流文件，不作缓存。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;位运算&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;原码、反码和补码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二进制有三种不同的表示形式：原码、反码和补码，计算机内部使用补码来表示。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原码&lt;/strong&gt;：就是其二进制表示（注意，有一位符号位）。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;反码&lt;/strong&gt;：正数的反码就是原码，负数的反码是符号位不变，其余位取反（对应正数按位取反）。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;补码&lt;/strong&gt;：正数的补码就是原码，负数的补码是反码 + 1。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按位非操作～&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按位与操作 &amp;amp;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按位或操作 |&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按位异或操作 ^&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按位左移操作 &amp;lt;&amp;lt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;88&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按位右移操作 &amp;gt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用位运算实现快速计算&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过  &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; ， &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;  快速计算 2 的倍数问题。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;n &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; 计算 n&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;n &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; 计算 n&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;，负奇数的运算不可用&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;n &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; 计算 n&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt;m&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;，即乘以 &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; 的 m 次方&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;n &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; m &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; 计算 n&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt;m&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;，即除以 &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; 的 m 次方&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; n &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt;n&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;通过  &lt;code&gt;^&lt;/code&gt;  快速交换两个整数。 通过  &lt;code&gt;^&lt;/code&gt;  快速交换两个整数。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; b&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;b &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; b&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;通过  &lt;code&gt;a &amp;amp; (-a)&lt;/code&gt;  快速获取 &lt;code&gt;a&lt;/code&gt;  的最后为 1 位置的整数。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用位运算实现整数集合&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个数的二进制表示可以看作是一个集合（0 表示不在集合中，1 表示在集合中）。&lt;/p&gt;
&lt;p&gt;比如集合  &lt;code&gt;&amp;#123;1, 3, 4, 8&amp;#125;&lt;/code&gt; ，可以表示成  &lt;code&gt;01 00 01 10 10&lt;/code&gt;  而对应的位运算也就可以看作是对集合进行的操作。&lt;/p&gt;
&lt;p&gt;元素与集合的操作：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; 把 i 插入到集合中&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; 把 i 从集合中删除&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; 判断 i 是否属于该集合（零不属于，非零属于）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;集合之间的操作：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a 补   &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;a&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a 交 b &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; b&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a 并 b &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; b&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a 差 b &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;注意：整数在内存中是以补码的形式存在的，输出自然也是按照补码输出。&lt;/p&gt;
&lt;p&gt;【例子】 Python 的 &lt;code&gt;bin()&lt;/code&gt;  输出。&lt;/p&gt;
&lt;p&gt;[37]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print(bin(3))  # 0b11
print(bin(-3))  # -0b11

print(bin(-3 &amp;amp; 0xffffffff))  
# 0b11111111111111111111111111111101

print(bin(0xfffffffd))       
# 0b11111111111111111111111111111101

print(0xfffffffd)  # 4294967293
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python 中 &lt;code&gt;bin&lt;/code&gt;  一个负数（十进制表示），输出的是它的原码的二进制表示加上个负号，巨坑。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python 中的整型是补码形式存储的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python 中整型是不限制长度的不会超范围溢出。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以为了获得负数（十进制表示）的补码，需要手动将其和十六进制数 &lt;code&gt;0xffffffff&lt;/code&gt;  进行按位与操作，再交给 &lt;code&gt;bin()&lt;/code&gt;  进行输出，得到的才是负数的补码表示。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;条件语句&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&#34;if-语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#if-语句&#34;&gt;#&lt;/a&gt; if 语句&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; expression&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    expr_true_suite&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;if 语句的  &lt;code&gt;expr_true_suite&lt;/code&gt;  代码块只有当条件表达式  &lt;code&gt;expression&lt;/code&gt;  结果为真时才执行，否则将继续执行紧跟在该代码块后面的语句。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单个 if 语句中的  &lt;code&gt;expression&lt;/code&gt;  条件表达式可以通过布尔操作符  &lt;code&gt;and&lt;/code&gt; ， &lt;code&gt;or&lt;/code&gt;  和 &lt;code&gt;not&lt;/code&gt;  实现多重条件判断。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[38]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if 2 &amp;gt; 1 and not 2 &amp;gt; 3:
    print(&#39;Correct Judgement!&#39;)

# Correct Judgement!
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;2-if-else-语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-if-else-语句&#34;&gt;#&lt;/a&gt; 2. if - else 语句&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; expression&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    expr_true_suite&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    expr_false_suite&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;Python 提供与 if 搭配使用的 else，如果 if 语句的条件表达式结果布尔值为假，那么程序将执行 else 语句后的代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[39]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;temp = input(&amp;quot;猜一猜小姐姐想的是哪个数字？&amp;quot;)
guess = int(temp) # input 函数将接收的任何数据类型都默认为 str。
if guess == 666:
    print(&amp;quot;你太了解小姐姐的心思了！&amp;quot;)
    print(&amp;quot;哼，猜对也没有奖励！&amp;quot;)
else:
    print(&amp;quot;猜错了，小姐姐现在心里想的是666！&amp;quot;)
print(&amp;quot;游戏结束，不玩儿啦！&amp;quot;)
猜一猜小姐姐想的是哪个数字？666
你太了解小姐姐的心思了！
哼，猜对也没有奖励！
游戏结束，不玩儿啦！
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;if&lt;/code&gt;  语句支持嵌套，即在一个 &lt;code&gt;if&lt;/code&gt;  语句中嵌入另一个 &lt;code&gt;if&lt;/code&gt;  语句，从而构成不同层次的选择结构。&lt;/p&gt;
&lt;p&gt;【例子】Python 使用缩进而不是大括号来标记代码块边界，因此要特别注意 &lt;code&gt;else&lt;/code&gt;  的悬挂问题。&lt;/p&gt;
&lt;p&gt;[40]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hi = 6
if hi &amp;gt; 2:
    if hi &amp;gt; 7:
        print(&#39;好棒!好棒!&#39;)
else:
    print(&#39;切~&#39;)

# 无输出
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[41]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;temp = input(&amp;quot;猜一猜小姐姐想的是哪个数字？&amp;quot;)
guess = int(temp)
if guess &amp;gt; 8:
    print(&amp;quot;大了，大了&amp;quot;)
else:
    if guess == 8:
        print(&amp;quot;你太了解小姐姐的心思了！&amp;quot;)
        print(&amp;quot;哼，猜对也没有奖励！&amp;quot;)
    else:
        print(&amp;quot;小了，小了&amp;quot;)
print(&amp;quot;游戏结束，不玩儿啦！&amp;quot;)
猜一猜小姐姐想的是哪个数字？8
你太了解小姐姐的心思了！
哼，猜对也没有奖励！
游戏结束，不玩儿啦！
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-if-elif-else-语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-if-elif-else-语句&#34;&gt;#&lt;/a&gt; 3. if - elif - else 语句&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; expression1&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    expr1_true_suite&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;elif&lt;/span&gt; expression2&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    expr2_true_suite&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;elif&lt;/span&gt; expressionN&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    exprN_true_suite&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    expr_false_suite&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;elif 语句即为 else if，用来检查多个表达式是否为真，并在为真时执行特定代码块中的代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[42]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;temp = input(&#39;请输入成绩:&#39;)
source = int(temp)
if 100 &amp;gt;= source &amp;gt;= 90:
    print(&#39;A&#39;)
elif 90 &amp;gt; source &amp;gt;= 80:
    print(&#39;B&#39;)
elif 80 &amp;gt; source &amp;gt;= 60:
    print(&#39;C&#39;)
elif 60 &amp;gt; source &amp;gt;= 0:
    print(&#39;D&#39;)
else:
    print(&#39;输入错误！&#39;)
请输入成绩:99
A
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-assert-关键词&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-assert-关键词&#34;&gt;#&lt;/a&gt; 4. assert 关键词&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;assert&lt;/code&gt;  这个关键词我们称之为 “断言”，当这个关键词后边的条件为 False 时，程序自动崩溃并抛出 &lt;code&gt;AssertionError&lt;/code&gt;  的异常。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[ ]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;my_list = [&#39;lsgogroup&#39;]
my_list.pop(0)
assert len(my_list) &amp;gt; 0

# AssertionError
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】在进行单元测试时，可以用来在程序中置入检查点，只有条件为 True 才能让程序正常工作。&lt;/p&gt;
&lt;p&gt;[ ]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;assert 3 &amp;gt; 7

# AssertionError
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;循环语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#循环语句&#34;&gt;#&lt;/a&gt; 循环语句&lt;/h1&gt;
&lt;h2 id=&#34;1-while-循环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-while-循环&#34;&gt;#&lt;/a&gt; 1. while 循环&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;while&lt;/code&gt;  语句最基本的形式包括一个位于顶部的布尔表达式，一个或多个属于 &lt;code&gt;while&lt;/code&gt;  代码块的缩进语句。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; 布尔表达式&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    代码块&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;while&lt;/code&gt;  循环的代码块会一直循环执行，直到布尔表达式的值为布尔假。&lt;/p&gt;
&lt;p&gt;如果布尔表达式不带有 &lt;code&gt;&amp;lt;、&amp;gt;、==、！=、in、not in&lt;/code&gt;  等运算符，仅仅给出数值之类的条件，也是可以的。当 &lt;code&gt;while&lt;/code&gt;  后写入一个非零整数时，视为真值，执行循环体；写入 &lt;code&gt;0&lt;/code&gt;  时，视为假值，不执行循环体。也可以写入 &lt;code&gt;str、list&lt;/code&gt;  或任何序列，长度非零则视为真值，执行循环体；否则视为假值，不执行循环体。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[44]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;count = 0
while count &amp;lt; 3:
    temp = input(&amp;quot;猜一猜小姐姐想的是哪个数字？&amp;quot;)
    guess = int(temp)
    if guess &amp;gt; 8:
        print(&amp;quot;大了，大了&amp;quot;)
    else:
        if guess == 8:
            print(&amp;quot;你太了解小姐姐的心思了！&amp;quot;)
            print(&amp;quot;哼，猜对也没有奖励！&amp;quot;)
            count = 3
        else:
            print(&amp;quot;小了，小了&amp;quot;)
    count = count + 1
print(&amp;quot;游戏结束，不玩儿啦！&amp;quot;)
猜一猜小姐姐想的是哪个数字？8
你太了解小姐姐的心思了！
哼，猜对也没有奖励！
游戏结束，不玩儿啦！
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】布尔表达式返回 0，循环终止。&lt;/p&gt;
&lt;p&gt;[45]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;string = &#39;abcd&#39;
while string:
    print(string)
    string = string[1:]

# abcd
# bcd
# cd
# d
abcd
bcd
cd
d
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;2-while-else-循环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-while-else-循环&#34;&gt;#&lt;/a&gt; 2. while - else 循环&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; 布尔表达式&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    代码块&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    代码块&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;当 &lt;code&gt;while&lt;/code&gt;  循环正常执行完的情况下，执行 &lt;code&gt;else&lt;/code&gt;  输出，如果 &lt;code&gt;while&lt;/code&gt;  循环中执行了跳出循环的语句，比如  &lt;code&gt;break&lt;/code&gt; ，将不执行 &lt;code&gt;else&lt;/code&gt;  代码块的内容。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[46]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;count = 0
while count &amp;lt; 5:
    print(&amp;quot;%d is  less than 5&amp;quot; % count)
    count = count + 1
else:
    print(&amp;quot;%d is not less than 5&amp;quot; % count)
    
# 0 is  less than 5
# 1 is  less than 5
# 2 is  less than 5
# 3 is  less than 5
# 4 is  less than 5
# 5 is not less than 5
0 is  less than 5
1 is  less than 5
2 is  less than 5
3 is  less than 5
4 is  less than 5
5 is not less than 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[47]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;count = 0
while count &amp;lt; 5:
    print(&amp;quot;%d is  less than 5&amp;quot; % count)
    count = 6
    break
else:
    print(&amp;quot;%d is not less than 5&amp;quot; % count)

# 0 is  less than 5
0 is  less than 5
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;3-for-循环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-for-循环&#34;&gt;#&lt;/a&gt; 3. for 循环&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;for&lt;/code&gt;  循环是迭代循环，在 Python 中相当于一个通用的序列迭代器，可以遍历任何有序序列，如 &lt;code&gt;str、list、tuple&lt;/code&gt;  等，也可以遍历任何可迭代对象，如 &lt;code&gt;dict&lt;/code&gt; 。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; 迭代变量 &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; 可迭代对象&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    代码块&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;每次循环，迭代变量被设置为可迭代对象的当前元素，提供给代码块使用。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[48]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for i in &#39;ILoveLSGO&#39;:
    print(i, end=&#39; &#39;)  # 不换行输出

# I L o v e L S G O
I L o v e L S G O 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[49]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;member = [&#39;张三&#39;, &#39;李四&#39;, &#39;刘德华&#39;, &#39;刘六&#39;, &#39;周润发&#39;]
for each in member:
    print(each)

# 张三
# 李四
# 刘德华
# 刘六
# 周润发

for i in range(len(member)):
    print(member[i])

# 张三
# 李四
# 刘德华
# 刘六
# 周润发
张三
李四
刘德华
刘六
周润发
张三
李四
刘德华
刘六
周润发
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[50]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dic = &amp;#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&amp;#125;

for key, value in dic.items():
    print(key, value, sep=&#39;:&#39;, end=&#39; &#39;)
    
# a:1 b:2 c:3 d:4 
a:1 b:2 c:3 d:4 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[51]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dic = &amp;#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&amp;#125;

for key in dic.keys():
    print(key, end=&#39; &#39;)
    
# a b c d 
a b c d 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[52]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dic = &amp;#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&amp;#125;

for value in dic.values():
    print(value, end=&#39; &#39;)
    
# 1 2 3 4
1 2 3 4 
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;4-for-else-循环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-for-else-循环&#34;&gt;#&lt;/a&gt; 4. for - else 循环&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; 迭代变量 &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; 可迭代对象&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    代码块&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    代码块&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;当 &lt;code&gt;for&lt;/code&gt;  循环正常执行完的情况下，执行 &lt;code&gt;else&lt;/code&gt;  输出，如果 &lt;code&gt;for&lt;/code&gt;  循环中执行了跳出循环的语句，比如  &lt;code&gt;break&lt;/code&gt; ，将不执行 &lt;code&gt;else&lt;/code&gt;  代码块的内容，与 &lt;code&gt;while - else&lt;/code&gt;  语句一样。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[53]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for num in range(10, 20):  # 迭代 10 到 20 之间的数字
    for i in range(2, num):  # 根据因子迭代
        if num % i == 0:  # 确定第一个因子
            j = num / i  # 计算第二个因子
            print(&#39;%d 等于 %d * %d&#39; % (num, i, j))
            break  # 跳出当前循环
    else:  # 循环的 else 部分
        print(num, &#39;是一个质数&#39;)

# 10 等于 2 * 5
# 11 是一个质数
# 12 等于 2 * 6
# 13 是一个质数
# 14 等于 2 * 7
# 15 等于 3 * 5
# 16 等于 2 * 8
# 17 是一个质数
# 18 等于 2 * 9
# 19 是一个质数
10 等于 2 * 5
11 是一个质数
12 等于 2 * 6
13 是一个质数
14 等于 2 * 7
15 等于 3 * 5
16 等于 2 * 8
17 是一个质数
18 等于 2 * 9
19 是一个质数
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;5-range-函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-range-函数&#34;&gt;#&lt;/a&gt; 5. range () 函数&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;start&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; stop&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; step&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;这个 BIF（Built-in functions）有三个参数，其中用中括号括起来的两个表示这两个参数是可选的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;step=1&lt;/code&gt;  表示第三个参数的默认值是 1。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;range&lt;/code&gt;  这个 BIF 的作用是生成一个从 &lt;code&gt;start&lt;/code&gt;  参数的值开始到 &lt;code&gt;stop&lt;/code&gt;  参数的值结束的数字序列，该序列包含 &lt;code&gt;start&lt;/code&gt;  的值但不包含 &lt;code&gt;stop&lt;/code&gt;  的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[54]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for i in range(2, 9):  # 不包含9
    print(i)

# 2
# 3
# 4
# 5
# 6
# 7
# 8
2
3
4
5
6
7
8
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[55]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for i in range(1, 10, 2):
    print(i)

# 1
# 3
# 5
# 7
# 9
1
3
5
7
9
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;6-enumerate函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-enumerate函数&#34;&gt;#&lt;/a&gt; 6. enumerate () 函数&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin&#34;&gt;enumerate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;sequence&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;start&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;sequence：一个序列、迭代器或其他支持迭代对象。&lt;/li&gt;
&lt;li&gt;start：下标起始位置。&lt;/li&gt;
&lt;li&gt;返回 enumerate (枚举) 对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[56]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;seasons = [&#39;Spring&#39;, &#39;Summer&#39;, &#39;Fall&#39;, &#39;Winter&#39;]
lst = list(enumerate(seasons))
print(lst)
# [(0, &#39;Spring&#39;), (1, &#39;Summer&#39;), (2, &#39;Fall&#39;), (3, &#39;Winter&#39;)]
lst = list(enumerate(seasons, start=1))  # 下标从 1 开始
print(lst)
# [(1, &#39;Spring&#39;), (2, &#39;Summer&#39;), (3, &#39;Fall&#39;), (4, &#39;Winter&#39;)]
[(0, &#39;Spring&#39;), (1, &#39;Summer&#39;), (2, &#39;Fall&#39;), (3, &#39;Winter&#39;)]
[(1, &#39;Spring&#39;), (2, &#39;Summer&#39;), (3, &#39;Fall&#39;), (4, &#39;Winter&#39;)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;enumerate()&lt;/code&gt;  与 for 循环的结合使用。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; a &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;enumerate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;A&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    do something &lt;span class=&#34;token keyword&#34;&gt;with&lt;/span&gt; a&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;用  &lt;code&gt;enumerate(A)&lt;/code&gt;  不仅返回了  &lt;code&gt;A&lt;/code&gt;  中的元素，还顺便给该元素一个索引值 (默认从 0 开始)。此外，用  &lt;code&gt;enumerate(A, j)&lt;/code&gt;  还可以确定索引起始值为  &lt;code&gt;j&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[57]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;languages = [&#39;Python&#39;, &#39;R&#39;, &#39;Matlab&#39;, &#39;C++&#39;]
for language in languages:
    print(&#39;I love&#39;, language)
print(&#39;Done!&#39;)
# I love Python
# I love R
# I love Matlab
# I love C++
# Done!


for i, language in enumerate(languages, 2):
    print(i, &#39;I love&#39;, language)
print(&#39;Done!&#39;)
# 2 I love Python
# 3 I love R
# 4 I love Matlab
# 5 I love C++
# Done!
I love Python
I love R
I love Matlab
I love C++
Done!
2 I love Python
3 I love R
4 I love Matlab
5 I love C++
Done!
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;7-break-语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7-break-语句&#34;&gt;#&lt;/a&gt; 7. break 语句&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;break&lt;/code&gt;  语句可以跳出当前所在层的循环。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[59]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import random
secret = random.randint(1, 10) #[1,10]之间的随机数

while True:
    temp = input(&amp;quot;猜一猜小姐姐想的是哪个数字？&amp;quot;)
    guess = int(temp)
    if guess &amp;gt; secret:
        print(&amp;quot;大了，大了&amp;quot;)
    else:
        if guess == secret:
            print(&amp;quot;你太了解小姐姐的心思了！&amp;quot;)
            print(&amp;quot;哼，猜对也没有奖励！&amp;quot;)
            break
        else:
            print(&amp;quot;小了，小了&amp;quot;)
print(&amp;quot;游戏结束，不玩儿啦！&amp;quot;)
猜一猜小姐姐想的是哪个数字？8
你太了解小姐姐的心思了！
哼，猜对也没有奖励！
游戏结束，不玩儿啦！
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;8-continue-语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8-continue-语句&#34;&gt;#&lt;/a&gt; 8. continue 语句&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;continue&lt;/code&gt;  终止本轮循环并开始下一轮循环。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[60]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for i in range(10):
    if i % 2 != 0:
        print(i)
        continue
    i += 2
    print(i)

# 2
# 1
# 4
# 3
# 6
# 5
# 8
# 7
# 10
# 9
2
1
4
3
6
5
8
7
10
9
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;9-pass-语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#9-pass-语句&#34;&gt;#&lt;/a&gt; 9. pass 语句&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pass&lt;/code&gt;  语句的意思是 “不做任何事”，如果你在需要有语句的地方不写任何语句，那么解释器会提示出错，而  &lt;code&gt;pass&lt;/code&gt;  语句就是用来解决这些问题的。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;a_func&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# SyntaxError: unexpected EOF while parsing&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;【例子】&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;a_func&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;pass&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;pass&lt;/code&gt;  是空语句，不做任何操作，只起到占位的作用，其作用是为了保持程序结构的完整性。尽管 &lt;code&gt;pass&lt;/code&gt;  语句不做任何操作，但如果暂时不确定要在一个位置放上什么样的代码，可以先放置一个 &lt;code&gt;pass&lt;/code&gt;  语句，让代码可以正常运行。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;10-推导式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10-推导式&#34;&gt;#&lt;/a&gt; 10. 推导式&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;列表推导式&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; expr &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; value &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; collection &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; condition&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[61]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = [-4, -2, 0, 2, 4]
y = [a * 2 for a in x]
print(y)
# [-8, -4, 0, 4, 8]
[-8, -4, 0, 4, 8]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[63]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = [i ** 2 for i in range(1, 10)]
print(x)
# [1, 4, 9, 16, 25, 36, 49, 64, 81]
[1, 4, 9, 16, 25, 36, 49, 64, 81]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[64]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = [(i, i ** 2) for i in range(6)]
print(x)

# [(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]
[(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[65]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = [i for i in range(100) if (i % 2) != 0 and (i % 3) == 0]
print(x)

# [3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93, 99]
[3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93, 99]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[66]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a = [(i, j) for i in range(0, 3) for j in range(0, 3)]
print(a)

# [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]
[(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[67]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = [[i, j] for i in range(0, 3) for j in range(0, 3)]
print(x)
# [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]

x[0][0] = 10
print(x)
# [[10, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
[[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
[[10, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[68]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a = [(i, j) for i in range(0, 3) if i &amp;lt; 1 for j in range(0, 3) if j &amp;gt; 1]
print(a)

# [(0, 2)]
[(0, 2)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;元组推导式&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; expr &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; value &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; collection &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; condition&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[69]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a = (x for x in range(10))
print(a)

# &amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x0000025BE511CC48&amp;gt;

print(tuple(a))

# (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
&amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x0000014CEC2E28B8&amp;gt;
(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;字典推导式&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; key_expr&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; value_expr &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; value &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; collection &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; condition&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[70]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;b = &amp;#123;i: i % 2 == 0 for i in range(10) if i % 3 == 0&amp;#125;
print(b)
# &amp;#123;0: True, 3: False, 6: True, 9: False&amp;#125;
&amp;#123;0: True, 3: False, 6: True, 9: False&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;集合推导式&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#123; expr for value in collection [if condition] &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[71]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;c = &amp;#123;i for i in [1, 2, 3, 4, 5, 5, 6, 4, 3, 2, 1]&amp;#125;
print(c)
# &amp;#123;1, 2, 3, 4, 5, 6&amp;#125;
&amp;#123;1, 2, 3, 4, 5, 6&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;其它&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;next(iterator[, default])&lt;/code&gt;  Return the next item from the iterator. If default is given and the iterator is exhausted, it is returned instead of raising StopIteration.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[72]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;e = (i for i in range(10))
print(e)
# &amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x0000007A0B8D01B0&amp;gt;

print(next(e))  # 0
print(next(e))  # 1

for each in e:
    print(each, end=&#39; &#39;)

# 2 3 4 5 6 7 8 9
&amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x0000014CEC389C78&amp;gt;
0
1
2 3 4 5 6 7 8 9 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[73]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;s = sum([i for i in range(101)])
print(s)  # 5050
s = sum((i for i in range(101)))
print(s)  # 5050
5050
5050
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;异常处理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#异常处理&#34;&gt;#&lt;/a&gt; 异常处理&lt;/h1&gt;
&lt;p&gt;异常就是运行期检测到的错误。计算机语言针对可能出现的错误定义了异常类型，某种错误引发对应的异常时，异常处理程序将被启动，从而恢复程序的正常运行。&lt;/p&gt;
&lt;h2 id=&#34;1-python-标准异常总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-python-标准异常总结&#34;&gt;#&lt;/a&gt; 1. Python 标准异常总结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;BaseException：所有异常的 &lt;strong&gt;基类&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Exception：常规异常的 &lt;strong&gt;基类&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;StandardError：所有的内建标准异常的基类&lt;/li&gt;
&lt;li&gt;ArithmeticError：所有数值计算异常的基类&lt;/li&gt;
&lt;li&gt;FloatingPointError：浮点计算异常&lt;/li&gt;
&lt;li&gt;OverflowError：数值运算超出最大限制&lt;/li&gt;
&lt;li&gt;ZeroDivisionError：除数为零&lt;/li&gt;
&lt;li&gt;AssertionError：断言语句（assert）失败&lt;/li&gt;
&lt;li&gt;AttributeError：尝试访问未知的对象属性&lt;/li&gt;
&lt;li&gt;EOFError：没有内建输入，到达 EOF 标记&lt;/li&gt;
&lt;li&gt;EnvironmentError：操作系统异常的基类&lt;/li&gt;
&lt;li&gt;IOError：输入 / 输出操作失败&lt;/li&gt;
&lt;li&gt;OSError：操作系统产生的异常（例如打开一个不存在的文件）&lt;/li&gt;
&lt;li&gt;WindowsError：系统调用失败&lt;/li&gt;
&lt;li&gt;ImportError：导入模块失败的时候&lt;/li&gt;
&lt;li&gt;KeyboardInterrupt：用户中断执行&lt;/li&gt;
&lt;li&gt;LookupError：无效数据查询的基类&lt;/li&gt;
&lt;li&gt;IndexError：索引超出序列的范围&lt;/li&gt;
&lt;li&gt;KeyError：字典中查找一个不存在的关键字&lt;/li&gt;
&lt;li&gt;MemoryError：内存溢出（可通过删除对象释放内存）&lt;/li&gt;
&lt;li&gt;NameError：尝试访问一个不存在的变量&lt;/li&gt;
&lt;li&gt;UnboundLocalError：访问未初始化的本地变量&lt;/li&gt;
&lt;li&gt;ReferenceError：弱引用试图访问已经垃圾回收了的对象&lt;/li&gt;
&lt;li&gt;RuntimeError：一般的运行时异常&lt;/li&gt;
&lt;li&gt;NotImplementedError：尚未实现的方法&lt;/li&gt;
&lt;li&gt;SyntaxError：语法错误导致的异常&lt;/li&gt;
&lt;li&gt;IndentationError：缩进错误导致的异常&lt;/li&gt;
&lt;li&gt;TabError：Tab 和空格混用&lt;/li&gt;
&lt;li&gt;SystemError：一般的解释器系统异常&lt;/li&gt;
&lt;li&gt;TypeError：不同类型间的无效操作&lt;/li&gt;
&lt;li&gt;ValueError：传入无效的参数&lt;/li&gt;
&lt;li&gt;UnicodeError：Unicode 相关的异常&lt;/li&gt;
&lt;li&gt;UnicodeDecodeError：Unicode 解码时的异常&lt;/li&gt;
&lt;li&gt;UnicodeEncodeError：Unicode 编码错误导致的异常&lt;/li&gt;
&lt;li&gt;UnicodeTranslateError：Unicode 转换错误导致的异常&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;异常体系内部有层次关系，Python 异常体系中的部分关系如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20200710131404548.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;2-python标准警告总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-python标准警告总结&#34;&gt;#&lt;/a&gt; 2. Python 标准警告总结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Warning：警告的基类&lt;/li&gt;
&lt;li&gt;DeprecationWarning：关于被弃用的特征的警告&lt;/li&gt;
&lt;li&gt;FutureWarning：关于构造将来语义会有改变的警告&lt;/li&gt;
&lt;li&gt;UserWarning：用户代码生成的警告&lt;/li&gt;
&lt;li&gt;PendingDeprecationWarning：关于特性将会被废弃的警告&lt;/li&gt;
&lt;li&gt;RuntimeWarning：可疑的运行时行为 (runtime behavior) 的警告&lt;/li&gt;
&lt;li&gt;SyntaxWarning：可疑语法的警告&lt;/li&gt;
&lt;li&gt;ImportWarning：用于在导入模块过程中触发的警告&lt;/li&gt;
&lt;li&gt;UnicodeWarning：与 Unicode 相关的警告&lt;/li&gt;
&lt;li&gt;BytesWarning：与字节或字节码相关的警告&lt;/li&gt;
&lt;li&gt;ResourceWarning：与资源使用相关的警告&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;3-try-except-语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-try-except-语句&#34;&gt;#&lt;/a&gt; 3. try - except 语句&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    检测范围&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;except&lt;/span&gt; Exception&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; reason&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    出现异常后的处理代码&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;try 语句按照如下方式工作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先，执行 &lt;code&gt;try&lt;/code&gt;  子句（在关键字 &lt;code&gt;try&lt;/code&gt;  和关键字 &lt;code&gt;except&lt;/code&gt;  之间的语句）&lt;/li&gt;
&lt;li&gt;如果没有异常发生，忽略 &lt;code&gt;except&lt;/code&gt;  子句， &lt;code&gt;try&lt;/code&gt;  子句执行后结束。&lt;/li&gt;
&lt;li&gt;如果在执行 &lt;code&gt;try&lt;/code&gt;  子句的过程中发生了异常，那么 &lt;code&gt;try&lt;/code&gt;  子句余下的部分将被忽略。如果异常的类型和 &lt;code&gt;except&lt;/code&gt;  之后的名称相符，那么对应的 &lt;code&gt;except&lt;/code&gt;  子句将被执行。最后执行 &lt;code&gt;try - except&lt;/code&gt;  语句之后的代码。&lt;/li&gt;
&lt;li&gt;如果一个异常没有与任何的 &lt;code&gt;except&lt;/code&gt;  匹配，那么这个异常将会传递给上层的 &lt;code&gt;try&lt;/code&gt;  中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[2]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;try:
    f = open(&#39;test.txt&#39;)
    print(f.read())
    f.close()
except OSError:
    print(&#39;打开文件出错&#39;)

# 打开文件出错
打开文件出错
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[3]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;try:
    f = open(&#39;test.txt&#39;)
    print(f.read())
    f.close()
except OSError as error:
    print(&#39;打开文件出错\n原因是：&#39; + str(error))

# 打开文件出错
# 原因是：[Errno 2] No such file or directory: &#39;test.txt&#39;
打开文件出错
原因是：[Errno 2] No such file or directory: &#39;test.txt&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;一个 &lt;code&gt;try&lt;/code&gt;  语句可能包含多个 &lt;code&gt;except&lt;/code&gt;  子句，分别来处理不同的特定的异常。最多只有一个分支会被执行。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[4]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;try:
    int(&amp;quot;abc&amp;quot;)
    s = 1 + &#39;1&#39;
    f = open(&#39;test.txt&#39;)
    print(f.read())
    f.close()
except OSError as error:
    print(&#39;打开文件出错\n原因是：&#39; + str(error))
except TypeError as error:
    print(&#39;类型出错\n原因是：&#39; + str(error))
except ValueError as error:
    print(&#39;数值出错\n原因是：&#39; + str(error))

# 数值出错
# 原因是：invalid literal for int() with base 10: &#39;abc&#39;
数值出错
原因是：invalid literal for int() with base 10: &#39;abc&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[5]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dict1 = &amp;#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;v&#39;: 22&amp;#125;
try:
    x = dict1[&#39;y&#39;]
except LookupError:
    print(&#39;查询错误&#39;)
except KeyError:
    print(&#39;键错误&#39;)
else:
    print(x)

# 查询错误
查询错误
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;try-except-else&lt;/code&gt;  语句尝试查询不在 &lt;code&gt;dict&lt;/code&gt;  中的键值对，从而引发了异常。这一异常准确地说应属于 &lt;code&gt;KeyError&lt;/code&gt; ，但由于 &lt;code&gt;KeyError&lt;/code&gt;  是 &lt;code&gt;LookupError&lt;/code&gt;  的子类，且将 &lt;code&gt;LookupError&lt;/code&gt;  置于 &lt;code&gt;KeyError&lt;/code&gt;  之前，因此程序优先执行该 &lt;code&gt;except&lt;/code&gt;  代码块。所以，使用多个 &lt;code&gt;except&lt;/code&gt;  代码块时，必须坚持对其规范排序，要从最具针对性的异常到最通用的异常。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[6]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dict1 = &amp;#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;v&#39;: 22&amp;#125;
try:
    x = dict1[&#39;y&#39;]
except KeyError:
    print(&#39;键错误&#39;)
except LookupError:
    print(&#39;查询错误&#39;)
else:
    print(x)

# 键错误
键错误
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【例子】一个  &lt;code&gt;except&lt;/code&gt;  子句可以同时处理多个异常，这些异常将被放在一个括号里成为一个元组。&lt;/p&gt;
&lt;p&gt;[7]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;try:
    s = 1 + &#39;1&#39;
    int(&amp;quot;abc&amp;quot;)
    f = open(&#39;test.txt&#39;)
    print(f.read())
    f.close()
except (OSError, TypeError, ValueError) as error:
    print(&#39;出错了！\n原因是：&#39; + str(error))

# 出错了！
# 原因是：unsupported operand type(s) for +: &#39;int&#39; and &#39;str&#39;
出错了！
原因是：unsupported operand type(s) for +: &#39;int&#39; and &#39;str&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;4-try-except-finally-语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-try-except-finally-语句&#34;&gt;#&lt;/a&gt; 4. try - except - finally 语句&lt;/h2&gt;
&lt;p&gt;try: 检测范围 except Exception [as reason]: 出现异常后的处理代码 finally: 无论如何都会被执行的代码&lt;/p&gt;
&lt;p&gt;不管 &lt;code&gt;try&lt;/code&gt;  子句里面有没有发生异常， &lt;code&gt;finally&lt;/code&gt;  子句都会执行。&lt;/p&gt;
&lt;p&gt;【例子】如果一个异常在 &lt;code&gt;try&lt;/code&gt;  子句里被抛出，而又没有任何的 &lt;code&gt;except&lt;/code&gt;  把它截住，那么这个异常会在 &lt;code&gt;finally&lt;/code&gt;  子句执行后被抛出。&lt;/p&gt;
&lt;p&gt;[10]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def divide(x, y):
    try:
        result = x / y
        print(&amp;quot;result is&amp;quot;, result)
    except ZeroDivisionError:
        print(&amp;quot;division by zero!&amp;quot;)
    finally:
        print(&amp;quot;executing finally clause&amp;quot;)


divide(2, 1)
# result is 2.0
# executing finally clause
divide(2, 0)
# division by zero!
# executing finally clause
divide(&amp;quot;2&amp;quot;, &amp;quot;1&amp;quot;)
# executing finally clause
# TypeError: unsupported operand type(s) for /: &#39;str&#39; and &#39;str&#39;
result is 2.0
executing finally clause
division by zero!
executing finally clause
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;5-try-except-else-语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-try-except-else-语句&#34;&gt;#&lt;/a&gt; 5. try - except - else 语句&lt;/h2&gt;
&lt;p&gt;如果在 &lt;code&gt;try&lt;/code&gt;  子句执行时没有发生异常，Python 将执行 &lt;code&gt;else&lt;/code&gt;  语句后的语句。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    检测范围&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;except&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    出现异常后的处理代码&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    如果没有异常执行这块代码&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;使用 &lt;code&gt;except&lt;/code&gt;  而不带任何异常类型，这不是一个很好的方式，我们不能通过该程序识别出具体的异常信息，因为它捕获所有的异常。&lt;/p&gt;
&lt;p&gt;try: 检测范围 except (Exception1 [, Exception2 [,…ExceptionN]]]): 发生以上多个异常中的一个，执行这块代码 else: 如果没有异常执行这块代码&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[12]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;try:
    fh = open(&amp;quot;testfile.txt&amp;quot;, &amp;quot;w&amp;quot;)
    fh.write(&amp;quot;这是一个测试文件，用于测试异常!!&amp;quot;)
except IOError:
    print(&amp;quot;Error: 没有找到文件或读取文件失败&amp;quot;)
else:
    print(&amp;quot;内容写入文件成功&amp;quot;)
    fh.close()

# 内容写入文件成功
内容写入文件成功
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意： &lt;code&gt;else&lt;/code&gt;  语句的存在必须以 &lt;code&gt;except&lt;/code&gt;  语句的存在为前提，在没有 &lt;code&gt;except&lt;/code&gt;  语句的 &lt;code&gt;try&lt;/code&gt;  语句中使用 &lt;code&gt;else&lt;/code&gt;  语句，会引发语法错误。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;6-raise语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-raise语句&#34;&gt;#&lt;/a&gt; 6. raise 语句&lt;/h2&gt;
&lt;p&gt;Python 使用 &lt;code&gt;raise&lt;/code&gt;  语句抛出一个指定的异常。&lt;/p&gt;
&lt;p&gt;【例子】&lt;/p&gt;
&lt;p&gt;[13]:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;try:
    raise NameError(&#39;HiThere&#39;)
except NameError:
    print(&#39;An exception flew by!&#39;)
    
# An exception flew by!
An exception flew by!
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <updated>2021-01-26T05:39:02.000Z</updated>
    </entry>
    <entry>
        <id>https://alanosy.github.io/2021/01/26/2020-1-26/</id>
        <title>2020-1-26</title>
        <link rel="alternate" href="https://alanosy.github.io/2021/01/26/2020-1-26/"/>
        <content type="html">&lt;p&gt;2020-1-26&lt;br&gt;
 开发出了 Hexo 站点&lt;/p&gt;
</content>
        <updated>2021-01-26T02:55:39.000Z</updated>
    </entry>
    <entry>
        <id>https://alanosy.github.io/2021/01/26/%E5%85%B3%E4%BA%8E%E6%88%91%E4%BB%AC/</id>
        <title>关于我们</title>
        <link rel="alternate" href="https://alanosy.github.io/2021/01/26/%E5%85%B3%E4%BA%8E%E6%88%91%E4%BB%AC/"/>
        <content type="html">&lt;p&gt;本主题作者： Ruri Shimotsuki @優萌初華&lt;br&gt;
本站主题链接： &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=&#34;&gt;https://shoka.lostyu.me&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;此站站主：Alan&lt;br&gt;
 临近高考记录一下学习生涯&lt;br&gt;
和自己的一些兴趣爱好&lt;br&gt;
联系邮箱：Alanos@aliyun.com&lt;br&gt;
 微信:fignet&lt;br&gt;
QQ:9077584&lt;/p&gt;
&lt;p&gt;版权声明： 本站所有文章除特别声明外，均采用 (CC) BY-NC-SA 许可协议。转载请注明出处！&lt;/p&gt;
</content>
        <updated>2021-01-26T02:26:31.000Z</updated>
    </entry>
    <entry>
        <id>https://alanosy.github.io/2021/01/26/%E7%89%B9%E6%AE%8A%E5%8A%9F%E8%83%BD/</id>
        <title>特殊功能</title>
        <link rel="alternate" href="https://alanosy.github.io/2021/01/26/%E7%89%B9%E6%AE%8A%E5%8A%9F%E8%83%BD/"/>
        <content type="html">&lt;p&gt;links 链接块&lt;br&gt;
本功能参考 NexT，基于 Hexo Tag 功能，用来建立友链或其他网址链接功能。&lt;/p&gt;
&lt;p&gt;文章中的使用格式：&lt;/p&gt;
&lt;p&gt;使用 links 标签块，包围 yml 语法书写的内容，字段包括&lt;br&gt;
 site	站点名称	必填&lt;br&gt;
 owner	管理员名字	可选，默认为 site 的值&lt;br&gt;
 url		站点链接	必填&lt;br&gt;
 desc	站点描述	可选，默认为 url 的值&lt;br&gt;
 image	站点图片	可选，默认为 images/404.png&lt;br&gt;
color	方块颜色	可选，默认为 #666&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;--swig￼0--&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;举个栗子：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;--swig￼1--&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;霜月琉璃&#34; style=&#34;--block-color:#e9546b;&#34;&gt;&lt;span class=&#34;exturl image&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=&#34; data-background-image=&#34;https://cdn.jsdelivr.net/gh/amehime/shoka@latest/images/avatar.jpg&#34;&gt;&lt;/span&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;span class=&#34;exturl title&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=&#34;&gt;優萌初華&lt;/span&gt;
          &lt;p class=&#34;desc&#34;&gt;琉璃的医学 &amp; 编程笔记&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;item&#34; title=&#34;霜月琉璃&#34;&gt;&lt;span class=&#34;exturl image&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=&#34; data-background-image=&#34;//cdn.jsdelivr.net/gh/Alanosy/Alanosy.github.io@latest/images/avatar.jpg&#34;&gt;&lt;/span&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;span class=&#34;exturl title&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=&#34;&gt;優萌初華&lt;/span&gt;
          &lt;p class=&#34;desc&#34;&gt;https://shoka.lostyu.me&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;item&#34; title=&#34;優萌初華&#34; style=&#34;--block-color:#9d5b8b;&#34;&gt;&lt;span class=&#34;exturl image&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=&#34; data-background-image=&#34;//cdn.jsdelivr.net/gh/Alanosy/Alanosy.github.io@latest/images/404.png&#34;&gt;&lt;/span&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;span class=&#34;exturl title&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=&#34;&gt;優萌初華&lt;/span&gt;
          &lt;p class=&#34;desc&#34;&gt;琉璃的医学 &amp; 编程笔记&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;以上标签块里的内容，还可以保存到一个 yml 文件中，然后使用 linksfile 标签。&lt;br&gt;
其中， path 位于 &lt;root&gt;/source 目录下。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;--swig￼11--&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;举个栗子：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;--swig￼12--&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;code 代码块&lt;/p&gt;
&lt;p&gt;使用 markdown-it-prism 进行代码高亮，支持显示行号、行高亮 mark 、命令行提示符 command 、代码块标题。&lt;/p&gt;
&lt;p&gt;基本格式： [language] [title] [url] [link text] [mark] [command]&lt;/p&gt;
&lt;p&gt;选项	描述	默认值&lt;br&gt;
 language&lt;/p&gt;
&lt;p&gt;支持的语言戳此&lt;br&gt;
如果不需要代码高亮，但希望显示代码块样式，则设为 raw&lt;br&gt;
 留空或设为 info ，将不显示代码高亮和代码块样式&lt;br&gt;
 null&lt;/p&gt;
&lt;p&gt;title	代码块的标题文字	null&lt;br&gt;
url	代码块标题右侧显示的链接	null&lt;br&gt;
link text	上述链接显示的标题	link&lt;br&gt;
mark&lt;/p&gt;
&lt;p&gt;行高亮显示，格式为 mark: 行号，行号开始 - 行号结束，其他行号 。&lt;br&gt;
例如 mark:1,4-7,10 ，将高亮显示第 1、4、5、6、7、10 行&lt;/p&gt;
&lt;p&gt;null&lt;/p&gt;
&lt;p&gt;command&lt;/p&gt;
&lt;p&gt;命令行提示符，格式为 command:(“提示内容”: 行号，行号 ||“提示内容”: 行号开始 - 行号结束)&lt;br&gt;
 例如 command:(&amp;quot;[root@localhost] $&amp;quot;:1,9-10||&amp;quot;[admin@remotehost] #&amp;quot;:4-6)&lt;/p&gt;
&lt;p&gt;null&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;```java 行高亮 https://shoka.lostyu.me 参考链接 mark:1,6-7&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;import&lt;/span&gt; java.util.Scanner&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Scanner &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; new Scanner &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;System.in&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;// 输入 Scan 之后，按下键盘 Alt + “/” 键，Eclipse 下自动补全。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;System.out.println &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;in.nextLine &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;System.out.println &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Hello&#34;&lt;/span&gt; + &lt;span class=&#34;token string&#34;&gt;&#34;world.&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;命令行提示符&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[root@localhost] $&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;pwd&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;/usr/home/chris/bin&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;ls&lt;/span&gt; -la&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[admin@remotehost] #&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;total &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[admin@remotehost] #&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;drwxr-xr-x   &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; chris  chris     &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; Jan &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;16&lt;/span&gt;:48 &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[admin@remotehost] #&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;drwxr--r-x  &lt;span class=&#34;token number&#34;&gt;45&lt;/span&gt; chris  chris     &lt;span class=&#34;token number&#34;&gt;92&lt;/span&gt; Feb &lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;:10 &lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-rwxr-xr-x   &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; chris  chris    &lt;span class=&#34;token number&#34;&gt;444&lt;/span&gt; Aug &lt;span class=&#34;token number&#34;&gt;25&lt;/span&gt;  &lt;span class=&#34;token number&#34;&gt;2013&lt;/span&gt; backup&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-rwxr-xr-x   &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; chris  chris    &lt;span class=&#34;token number&#34;&gt;642&lt;/span&gt; Jan &lt;span class=&#34;token number&#34;&gt;17&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;:42 deploy&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[root@localhost] $&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt; -A&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[root@localhost] $&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; commit -m &lt;span class=&#34;token string&#34;&gt;&#34;update&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; push&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;import&lt;/span&gt; java.util.Scanner&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Scanner &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; new Scanner&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;System.in&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;// 输入 Scan 之后，按下键盘 Alt + “/” 键，Eclipse 下自动补全。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;System.out.println&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;in.nextLine&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;System.out.println&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Hello&#34;&lt;/span&gt; + &lt;span class=&#34;token string&#34;&gt;&#34; world.&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;pwd&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;/usr/home/chris/bin&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;ls&lt;/span&gt; -la&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;total &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;drwxr-xr-x   &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; chris  chris     &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; Jan &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;16&lt;/span&gt;:48 &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;drwxr--r-x  &lt;span class=&#34;token number&#34;&gt;45&lt;/span&gt; chris  chris     &lt;span class=&#34;token number&#34;&gt;92&lt;/span&gt; Feb &lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;:10 &lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-rwxr-xr-x   &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; chris  chris    &lt;span class=&#34;token number&#34;&gt;444&lt;/span&gt; Aug &lt;span class=&#34;token number&#34;&gt;25&lt;/span&gt;  &lt;span class=&#34;token number&#34;&gt;2013&lt;/span&gt; backup&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-rwxr-xr-x   &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; chris  chris    &lt;span class=&#34;token number&#34;&gt;642&lt;/span&gt; Jan &lt;span class=&#34;token number&#34;&gt;17&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;:42 deploy&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt; -A&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; commit -m &lt;span class=&#34;token string&#34;&gt;&#34;update&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; push&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;quiz 练习题与答案&lt;br&gt;
这个功能是用来显示练习题的。&lt;br&gt;
需要在 Front Matter 中添加 quiz: true ，以正确显示题型标签。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;---&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;title: 练习题与答案&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;quiz: &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;---&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;. 编译时多态主要指运算符重载与函数重载，而运行时多态主要指虚函数。 &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.quiz .true&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;. 有基类 &lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;SHAPE&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt;，派生类 &lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;CIRCLE&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt;，声明如下变量：  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.quiz .multi&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ``&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;cpp&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    SHAPE shape1,*p1&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    CIRCLE circle1,*q1&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt;`&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    下列哪些项是 “派生类对象替换基类对象”。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    - &lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt;p1&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;circle1&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.correct&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    - &lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt;q1&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;shape1&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    - &lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt;shape1&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;circle1&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.correct&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    - &lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt;circle1&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;shape1&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.options&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; - :heavy_check_mark: 令基类对象的指针指向派生类对象&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; - :x: 派生类指针指向基类的引用&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; - :heavy_check_mark: 派生类对象给基类对象赋值&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; - :x: 基类对象给派生类对象赋值&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.options&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;. 下列叙述正确的是 &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.gap&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; 。 &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.quiz&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    - 虚函数只能定义成无参函数&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    - 虚函数不能有返回值&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    - 能定义虚构造函数&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    - A、B、C 都不对 &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.correct&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.options&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;. 如果定义 &lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt;int &lt;span class=&#34;token assign-left variable&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; double &lt;span class=&#34;token assign-left variable&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6.4&lt;/span&gt;, &lt;span class=&#34;token assign-left variable&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8.9&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;，则表达式 &lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt;f+int &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;e/3*int &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;f+g&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;/2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;%4` 的值为 &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;9.4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.gap&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;。 &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.quiz .fill&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; 注意运算顺序和数据类型&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8.4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.mistake&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;hr&gt;
&lt;h2 id=&#34;title-练习题与答案quiz-true&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#title-练习题与答案quiz-true&#34;&gt;#&lt;/a&gt; title: 练习题与答案&lt;br&gt;
 quiz: true&lt;/h2&gt;
&lt;ol&gt;
&lt;li class=&#34;quiz true&#34;&gt;
&lt;p&gt;编译时多态主要指运算符重载与函数重载，而运行时多态主要指虚函数。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&#34;quiz multi&#34;&gt;
&lt;p&gt;有基类  &lt;code&gt;SHAPE&lt;/code&gt; ，派生类  &lt;code&gt;CIRCLE&lt;/code&gt; ，声明如下变量： &lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;SHAPE shape1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;p1&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;CIRCLE circle1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;q1&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;下列哪些项是 “派生类对象替换基类对象”。&lt;/p&gt;
&lt;ul class=&#34;options&#34;&gt;
&lt;li class=&#34;correct&#34;&gt;&lt;code&gt;p1=&amp;amp;circle1;&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;q1=&amp;amp;shape1;&lt;/code&gt;&lt;/li&gt;
&lt;li class=&#34;correct&#34;&gt;&lt;code&gt;shape1=circle1;&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;circle1=shape1;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul class=&#34;options&#34;&gt;
&lt;li&gt;✔️ 令基类对象的指针指向派生类对象&lt;/li&gt;
&lt;li&gt;❌ 派生类指针指向基类的引用&lt;/li&gt;
&lt;li&gt;✔️ 派生类对象给基类对象赋值&lt;/li&gt;
&lt;li&gt;❌ 基类对象给派生类对象赋值&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li class=&#34;quiz&#34;&gt;
&lt;p&gt;下列叙述正确的是 &lt;span class=&#34;gap&#34;&gt;&lt;/span&gt; 。&lt;/p&gt;
&lt;ul class=&#34;options&#34;&gt;
&lt;li&gt;虚函数只能定义成无参函数&lt;/li&gt;
&lt;li&gt;虚函数不能有返回值&lt;/li&gt;
&lt;li&gt;能定义虚构造函数&lt;/li&gt;
&lt;li class=&#34;correct&#34;&gt;A、B、C 都不对&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class=&#34;quiz fill&#34;&gt;
&lt;p&gt;如果定义  &lt;code&gt;int e=8; double f=6.4, g=8.9;&lt;/code&gt; ，则表达式  &lt;code&gt;f+int (e/3*int (f+g)/2)%4&lt;/code&gt;  的值为 &lt;span class=&#34;gap&#34;&gt;9.4&lt;/span&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意运算顺序和数据类型&lt;br&gt;
&lt;span class=&#34;mistake&#34;&gt; 8.4&lt;/span&gt;&lt;br&gt;
 有基类 SHAPE ，派生类 CIRCLE ，声明如下变量：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;SHAPE shape1,*p1&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;CIRCLE circle1,*q1&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;使用说明&lt;br&gt;
本功能基于 markdown-it-bracketed-spans 和 markdown-it-attrs&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;标签	含义&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.quiz&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;	选择题&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.quiz .multi&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;	多选题&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.quiz .true&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;	正确的判断题&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.quiz .false&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;	错误的判断题&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.quiz .fill&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;	填空题&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.gap&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;	空白下划线&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;答案内容&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.gap&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;	答案内容带下划线&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.options&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;	ABCDE 选项&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.correct&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;	选择题的正确选项&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;	答案解析&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8.4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.mistake&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;	错题备注&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;#emoji 绘文字&lt;/p&gt;
&lt;p&gt;本功能基于 markdown-it-emoji ，所有标签参考戳此&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;:kissing_heart:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;:ring:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;:notes:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;effects 文字特效&lt;br&gt;
本功能基于 markdown-it-ins 、 markdown-it-bracketed-spans 和 markdown-it-attrs&lt;/p&gt;
&lt;p&gt;本主题风格颜色通用样式：default、primary、success、info、warning、danger&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;++ 下划线 ++&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;++ 波浪线 ++&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.wavy&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;++ 着重点 ++&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.dot&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;++ 紫色下划线 ++&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.primary&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;++ 绿色波浪线 ++&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.wavy .success&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;++ 黄色着重点 ++&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.dot .warning&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;~~ 删除线～～&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;~~ 红色删除线～～&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.danger&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; 荧光高亮 &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;赤橙黄绿青蓝紫&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.rainbow&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;红色&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.red&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;粉色&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.pink&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;橙色&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.orange&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;红色&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.yellow&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;绿色&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.green&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;靛青&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.aqua&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;蓝色&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.blue&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;紫色&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.purple&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;灰色&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.grey&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;快捷键 &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;Ctrl&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.kbd&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; + &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;C&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.kbd .red&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;H~2~0&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;29&lt;/span&gt;^th^&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;++ 下划线 ++&lt;br&gt;
++ 波浪线 ++{.wavy}&lt;br&gt;
++ 着重点 ++{.dot}&lt;br&gt;
++ 紫色下划线 ++{.primary}&lt;br&gt;
++ 绿色波浪线 ++{.wavy .success}&lt;br&gt;
++ 黄色着重点 ++{.dot .warning}&lt;br&gt;
~~ 删除线～～&lt;br&gt;
~~ 红色删除线～～{.danger}&lt;br&gt;
== 荧光高亮 ==&lt;br&gt;
&lt;span class=&#34;rainbow&#34;&gt; 赤橙黄绿青蓝紫&lt;/span&gt;&lt;br&gt;
&lt;span class=&#34;red&#34;&gt;红色&lt;/span&gt;&lt;br&gt;
&lt;span class=&#34;pink&#34;&gt;粉色&lt;/span&gt;&lt;br&gt;
&lt;span class=&#34;orange&#34;&gt;橙色&lt;/span&gt;&lt;br&gt;
&lt;span class=&#34;yellow&#34;&gt;红色&lt;/span&gt;&lt;br&gt;
&lt;span class=&#34;green&#34;&gt;绿色&lt;/span&gt;&lt;br&gt;
&lt;span class=&#34;aqua&#34;&gt;靛青&lt;/span&gt;&lt;br&gt;
&lt;span class=&#34;blue&#34;&gt;蓝色&lt;/span&gt;&lt;br&gt;
&lt;span class=&#34;purple&#34;&gt;紫色&lt;/span&gt;&lt;br&gt;
&lt;span class=&#34;grey&#34;&gt;灰色&lt;/span&gt;&lt;br&gt;
快捷键 &lt;span class=&#34;kbd&#34;&gt;Ctrl&lt;/span&gt; + &lt;span class=&#34;kbd red&#34;&gt;C&lt;/span&gt;&lt;br&gt;
H&lt;sub&gt;2&lt;/sub&gt;0&lt;br&gt;
29&lt;sup&gt;th&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;spoiler 隐藏文字&lt;br&gt;
本功能基于 markdown-it-spoiler 和 markdown-it-attrs&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt; 黑幕黑幕黑幕黑幕黑幕黑幕！！： 鼠标滑过显示内容&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt; 模糊模糊模糊模糊模糊模糊！！&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.bulr&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; ： 选中文字显示内容&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;!! 黑幕黑幕黑幕黑幕黑幕黑幕！！： 鼠标滑过显示内容&lt;br&gt;
！！模糊模糊模糊模糊模糊模糊！！{.bulr} ： 选中文字显示内容&lt;/p&gt;
&lt;p&gt;#label 标签块&lt;br&gt;
本功能基于 markdown-it-bracketed-spans 和 markdown-it-attrs&lt;br&gt;
 有以下颜色可选&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;default&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.label&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;primary&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.label .primary&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;info&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.label .info&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;:heavy_check_mark:success&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.label .success&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;warning&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.label .warning&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;:broken_heart:danger&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.label .danger&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;span class=&#34;label&#34;&gt;default&lt;/span&gt;&lt;br&gt;
&lt;span class=&#34;label primary&#34;&gt;primary&lt;/span&gt;&lt;br&gt;
&lt;span class=&#34;label info&#34;&gt;info&lt;/span&gt;&lt;br&gt;
&lt;span class=&#34;label success&#34;&gt;✔️success&lt;/span&gt;&lt;br&gt;
&lt;span class=&#34;label warning&#34;&gt;warning&lt;/span&gt;&lt;br&gt;
&lt;span class=&#34;label danger&#34;&gt;💔danger&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;note 提醒块&lt;br&gt;
本功能基于 markdown-it-container&lt;br&gt;
 标签为：&lt;/p&gt;
&lt;p&gt;开始行	:::[风格颜色]&lt;br&gt;
 结束行&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;:::default&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;默认默认&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;:::&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;:::primary&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;基本基本&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;:::&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;:::info&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;提示提示&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;:::&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;:::success&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;成功成功&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;:::&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;:::warning&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;警告警告&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;:::&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;:::danger&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;危险危险&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;:::&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;:::danger no-icon&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;危险危险&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;:::&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;默认默认&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;基本基本&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;提示提示&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note success&#34;&gt;
&lt;p&gt;成功成功&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note warning&#34;&gt;
&lt;p&gt;警告警告&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note danger&#34;&gt;
&lt;p&gt;危险危险&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note danger no-icon&#34;&gt;
&lt;p&gt;危险危险&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;tab 标签卡&lt;br&gt;
本功能基于 markdown-it-container&lt;br&gt;
 标签为：&lt;/p&gt;
&lt;p&gt;开始行	;;;[同一 ID] [标签名称]&lt;br&gt;
 结束行	;;;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;id1 卡片 &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;这里是卡片 &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; 的内容&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;** 加粗 **&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;success&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.label .success&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;--swig￼3--&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;id1 卡片 &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;这里是卡片 &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; 的内容&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;:::danger&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;危险危险&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;:::&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;- 第一行&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;- 第二行&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;id2 ②号标签卡片 &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;这里是卡片 &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; 的内容&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;id2 ②号标签卡片 &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;这里是卡片 &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; 的内容&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;div class=&#34;tab&#34; data-id=&#34;id1&#34; data-title=&#34;卡片 1&#34;&gt;
&lt;p&gt;这里是卡片 1 的内容&lt;br&gt;
 ** 加粗 **&lt;br&gt;
&lt;span class=&#34;label success&#34;&gt;success&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;霜月琉璃&#34; style=&#34;--block-color:#e9546b;&#34;&gt;&lt;span class=&#34;exturl image&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=&#34; data-background-image=&#34;https://cdn.jsdelivr.net/gh/amehime/shoka@latest/images/avatar.jpg&#34;&gt;&lt;/span&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;span class=&#34;exturl title&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=&#34;&gt;優萌初華&lt;/span&gt;
          &lt;p class=&#34;desc&#34;&gt;琉璃的医学 &amp; 编程笔记&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;tab&#34; data-id=&#34;id1&#34; data-title=&#34;卡片 2&#34;&gt;
&lt;p&gt;这里是卡片 2 的内容&lt;/p&gt;
&lt;div class=&#34;note danger&#34;&gt;
&lt;p&gt;危险危险&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;第一行&lt;/li&gt;
&lt;li&gt;第二行&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;tab&#34; data-id=&#34;id2&#34; data-title=&#34;②号标签卡片 1&#34;&gt;
&lt;p&gt;这里是卡片 1 的内容&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;tab&#34; data-id=&#34;id2&#34; data-title=&#34;②号标签卡片 2&#34;&gt;
&lt;p&gt;这里是卡片 2 的内容&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;#collapse 折叠块&lt;br&gt;
本功能基于 markdown-it-container&lt;br&gt;
 标签为：&lt;/p&gt;
&lt;p&gt;开始行	+++[风格颜色] [标题文字]&lt;br&gt;
 结束行	+++&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;+++ 默认默认 这里是一段文字&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;++ 下划线 ++&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;+++&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;+++primary 紫色&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;:::info&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;参考信息&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;:::&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;- 第一行&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;- 第二行&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;+++&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;+++info  蓝色&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;id3 卡片 &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;这里是卡片 &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; 的内容&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;id3 卡片 &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;这里是卡片 &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; 的内容&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;+++&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;+++success 绿色&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;--swig￼5--&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;+++&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;+++warning 黄色&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt; 警告警告警告警告警告！！&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.bulr&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;label&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.label .success&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;+++&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;+++danger 红色&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;danger&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.label .danger&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;+++&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;details&gt;&lt;summary&gt;默认默认 这里是一段文字&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;++ 下划线 ++&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;primary&#34;&gt;&lt;summary&gt;紫色&lt;/summary&gt;&lt;div&gt;
&lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;参考信息&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;第一行&lt;/li&gt;
&lt;li&gt;第二行&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;info&#34;&gt;&lt;summary&gt;蓝色&lt;/summary&gt;&lt;div&gt;
&lt;div class=&#34;tab&#34; data-id=&#34;id3&#34; data-title=&#34;卡片 1&#34;&gt;
&lt;p&gt;这里是卡片 1 的内容&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;tab&#34; data-id=&#34;id3&#34; data-title=&#34;卡片 2&#34;&gt;
&lt;p&gt;这里是卡片 2 的内容&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;绿色&lt;/summary&gt;&lt;div&gt;
&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;優萌初華&#34; style=&#34;--block-color:#e9546b;&#34;&gt;&lt;span class=&#34;exturl image&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=&#34; data-background-image=&#34;//cdn.jsdelivr.net/gh/Alanosy/Alanosy.github.io@latest/images/404.png&#34;&gt;&lt;/span&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;span class=&#34;exturl title&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=&#34;&gt;優萌初華&lt;/span&gt;
          &lt;p class=&#34;desc&#34;&gt;https://shoka.lostyu.me&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;warning&#34;&gt;&lt;summary&gt;黄色&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;!! 警告警告警告警告警告！！{.bulr}&lt;br&gt;
&lt;span class=&#34;label success&#34;&gt;label&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;details class=&#34;danger&#34;&gt;&lt;summary&gt;红色&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;&lt;span class=&#34;label danger&#34;&gt;danger&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;p&gt;taskList 待办事项&lt;br&gt;
本功能基于 markdown-it-task-checkbox 。&lt;br&gt;
可以利用 markdown-it-attrs 添加风格颜色，只可以给 ul 标签添加，需要新建两行。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;- &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; 这是一个小叉叉&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;- &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; 这是一个红色勾勾&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.danger&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;- &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; 未完成&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;- &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; 完成&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;.primary&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;- &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; 未完成&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;- &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; 默认颜色&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul class=&#34;task-list danger&#34;&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_0&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_0&#34;&gt; 这是一个小叉叉&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_1&#34; checked=&#34;true&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_1&#34;&gt; 这是一个红色勾勾&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&#34;task-list primary&#34;&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_2&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_2&#34;&gt; 未完成&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_3&#34; checked=&#34;true&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_3&#34;&gt; 完成&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&#34;task-list&#34;&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_4&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_4&#34;&gt; 未完成&lt;/label&gt;&lt;/li&gt;
&lt;li class=&#34;task-list-item&#34;&gt;&lt;input type=&#34;checkbox&#34; id=&#34;cbx_5&#34; checked=&#34;true&#34; disabled=&#34;true&#34;&gt;&lt;label for=&#34;cbx_5&#34;&gt; 默认颜色&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;furigana 文字注音&lt;br&gt;
原本用于日语汉字假名注音，但别的注音也可以。&lt;br&gt;
为了兼容性，采用 markdown-it-ruby 的基本格式： &lt;ruby&gt;文字&lt;rp&gt;【&lt;/rp&gt;&lt;rt&gt;注音&lt;/rt&gt;&lt;rp&gt;】&lt;/rp&gt;&lt;/ruby&gt; ，并且为了兼容表格，将分隔符由 | 换成了 ^ 。&lt;br&gt;
注音分隔基于 furigana-markdown-it 显示说明看这里&lt;/p&gt;
&lt;p&gt;&lt;ruby&gt;取&lt;rp&gt;【&lt;/rp&gt;&lt;rt&gt;と&lt;/rt&gt;&lt;rp&gt;】&lt;/rp&gt;り&lt;rt&gt;&lt;/rt&gt;返&lt;rp&gt;【&lt;/rp&gt;&lt;rt&gt;かえ&lt;/rt&gt;&lt;rp&gt;】&lt;/rp&gt;す&lt;rt&gt;&lt;/rt&gt;&lt;/ruby&gt;	取とり返かえす&lt;br&gt;
&lt;ruby&gt;可愛&lt;rp&gt;【&lt;/rp&gt;&lt;rt&gt;かわい&lt;/rt&gt;&lt;rp&gt;】&lt;/rp&gt;い&lt;rt&gt;&lt;/rt&gt;犬&lt;rp&gt;【&lt;/rp&gt;&lt;rt&gt;いぬ&lt;/rt&gt;&lt;rp&gt;】&lt;/rp&gt;&lt;/ruby&gt;	可愛かわいい犬いぬ&lt;br&gt;
&lt;ruby&gt;可&lt;rp&gt;【&lt;/rp&gt;&lt;rt&gt;か&lt;/rt&gt;&lt;rp&gt;】&lt;/rp&gt;愛&lt;rp&gt;【&lt;/rp&gt;&lt;rt&gt;わい&lt;/rt&gt;&lt;rp&gt;】&lt;/rp&gt;い&lt;rt&gt;&lt;/rt&gt;犬&lt;rp&gt;【&lt;/rp&gt;&lt;rt&gt;いぬ&lt;/rt&gt;&lt;rp&gt;】&lt;/rp&gt;&lt;/ruby&gt;	可か愛わいい犬いぬ&lt;br&gt;
&lt;ruby&gt;アクセラレータ&lt;rp&gt;【&lt;/rp&gt;&lt;rt&gt;accelerator&lt;/rt&gt;&lt;rp&gt;】&lt;/rp&gt;&lt;/ruby&gt;	アクセラレータ accelerator&lt;br&gt;
&lt;ruby&gt;accelerator&lt;rp&gt;【&lt;/rp&gt;&lt;rt&gt;アクセラレータ&lt;/rt&gt;&lt;rp&gt;】&lt;/rp&gt;&lt;/ruby&gt;	accelerator アクセラレータ&lt;br&gt;
&lt;ruby&gt;食&lt;rp&gt;【&lt;/rp&gt;&lt;rt&gt;た&lt;/rt&gt;&lt;rp&gt;】&lt;/rp&gt;べる&lt;rt&gt;&lt;/rt&gt;&lt;/ruby&gt;	食たべる&lt;br&gt;
&lt;ruby&gt;食べる&lt;rp&gt;【&lt;/rp&gt;&lt;rt&gt;たべる&lt;/rt&gt;&lt;rp&gt;】&lt;/rp&gt;&lt;/ruby&gt;	食べるたべる&lt;br&gt;
&lt;ruby&gt;あ&lt;rt&gt;●&lt;/rt&gt;い&lt;rt&gt;●&lt;/rt&gt;う&lt;rt&gt;●&lt;/rt&gt;え&lt;rt&gt;●&lt;/rt&gt;お&lt;rt&gt;●&lt;/rt&gt;&lt;/ruby&gt;	あ●い●う●え●お●&lt;br&gt;
&lt;ruby&gt;あ&lt;rt&gt;❤&lt;/rt&gt;い&lt;rt&gt;❤&lt;/rt&gt;う&lt;rt&gt;❤&lt;/rt&gt;え&lt;rt&gt;❤&lt;/rt&gt;お&lt;rt&gt;❤&lt;/rt&gt;&lt;/ruby&gt;	あ❤い❤う❤え❤お❤&lt;br&gt;
&lt;ruby&gt;常用账号&lt;rp&gt;【&lt;/rp&gt;&lt;rt&gt;contact&lt;/rt&gt;&lt;rp&gt;】&lt;/rp&gt;&lt;/ruby&gt;	常用账号&lt;/p&gt;
&lt;p&gt;media 多媒体&lt;br&gt;
本功能基于 Hexo Tag 功能，使用 media 标签，目前可选择两种类型，即 audio 和 video 。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;--swig￼7--&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;--swig￼8--&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;标签包绕一段 yml 格式的内容，格式与背景音乐的配置类似。&lt;/p&gt;
&lt;p&gt;亦可以直接使用网易云、虾米、QQ 音乐的播放列表、单曲。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;--swig￼9--&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;--swig￼10--&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;math 数学公式&lt;br&gt;
本功能基于 markdown-it-katex&lt;br&gt;
 在 Front Matter 中添加 math: true 以支持 KaTex&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;---&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;title: 数学公式显示&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;math: &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;---&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;行内公式：$&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;sqrt &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;3x-1&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;+&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;+x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;^2$&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;独立块显示：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;begin &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;array&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;c&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;nabla &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;times &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;vec &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;mathbf &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;B&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; -&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;, &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;frac1c&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;, &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;frac &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;partial&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;vec &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;mathbf &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;E&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;partial t&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;frac &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;pi&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;c&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;vec &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;mathbf &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;    &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;nabla &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;cdot &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;vec &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;mathbf &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;E&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;pi &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;rho &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;nabla &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;times &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;vec &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;mathbf &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;E&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;, +&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;, &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;frac1c&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;, &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;frac &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;partial&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;vec &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;mathbf &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;B&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;partial t&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;vec &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;mathbf &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;nabla &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;cdot &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;vec &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;mathbf &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;B&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;end &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;array&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$$&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;mermaid 流程图&lt;br&gt;
本功能基于 markdown-it-mermaid&lt;br&gt;
 在 Front Matter 中添加 mermaid: true 以支持 Mermaid&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;---&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;title: 流程图显示&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mermaid: &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;---&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;```mermaid&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;graph LR&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    A &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;Square Rect&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; -- Link text --&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; B &lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;((&lt;/span&gt;Circle&lt;span class=&#34;token punctuation&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    A --&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; C &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Round Rect&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    B --&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; D &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;Rhombus&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    C --&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; D&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;pre class=&#34;mermaid&#34;&gt;&lt;svg id=&#34;mermaid-1611648556765&#34; width=&#34;100%&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; height=&#34;563&#34; style=&#34;max-width: 498px;&#34; viewBox=&#34;-50 -10 498 563&#34;&gt;&lt;g&gt;&lt;/g&gt;&lt;g&gt;&lt;line id=&#34;actor0&#34; x1=&#34;75&#34; y1=&#34;5&#34; x2=&#34;75&#34; y2=&#34;552&#34; class=&#34;actor-line&#34; stroke-width=&#34;0.5px&#34; stroke=&#34;#999&#34;&gt;&lt;/line&gt;&lt;rect x=&#34;0&#34; y=&#34;0&#34; fill=&#34;#eaeaea&#34; stroke=&#34;#666&#34; width=&#34;150&#34; height=&#34;65&#34; rx=&#34;3&#34; ry=&#34;3&#34; class=&#34;actor&#34;&gt;&lt;/rect&gt;&lt;text x=&#34;75&#34; y=&#34;32.5&#34; dominant-baseline=&#34;central&#34; alignment-baseline=&#34;central&#34; class=&#34;actor&#34; style=&#34;text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, sans-serif;&#34;&gt;&lt;tspan x=&#34;75&#34; dy=&#34;0&#34;&gt;Alice&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;g&gt;&lt;line id=&#34;actor1&#34; x1=&#34;323&#34; y1=&#34;5&#34; x2=&#34;323&#34; y2=&#34;552&#34; class=&#34;actor-line&#34; stroke-width=&#34;0.5px&#34; stroke=&#34;#999&#34;&gt;&lt;/line&gt;&lt;rect x=&#34;248&#34; y=&#34;0&#34; fill=&#34;#eaeaea&#34; stroke=&#34;#666&#34; width=&#34;150&#34; height=&#34;65&#34; rx=&#34;3&#34; ry=&#34;3&#34; class=&#34;actor&#34;&gt;&lt;/rect&gt;&lt;text x=&#34;323&#34; y=&#34;32.5&#34; dominant-baseline=&#34;central&#34; alignment-baseline=&#34;central&#34; class=&#34;actor&#34; style=&#34;text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, sans-serif;&#34;&gt;&lt;tspan x=&#34;323&#34; dy=&#34;0&#34;&gt;Bob&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;defs&gt;&lt;marker id=&#34;arrowhead&#34; refX=&#34;5&#34; refY=&#34;2&#34; markerWidth=&#34;6&#34; markerHeight=&#34;4&#34; orient=&#34;auto&#34;&gt;&lt;path d=&#34;M 0,0 V 4 L6,2 Z&#34;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;defs&gt;&lt;marker id=&#34;crosshead&#34; markerWidth=&#34;15&#34; markerHeight=&#34;8&#34; orient=&#34;auto&#34; refX=&#34;16&#34; refY=&#34;4&#34;&gt;&lt;path fill=&#34;black&#34; stroke=&#34;#000000&#34; stroke-width=&#34;1px&#34; d=&#34;M 9,2 V 6 L16,4 Z&#34; style=&#34;stroke-dasharray: 0, 0;&#34;&gt;&lt;/path&gt;&lt;path fill=&#34;none&#34; stroke=&#34;#000000&#34; stroke-width=&#34;1px&#34; d=&#34;M 0,1 L 6,7 M 6,1 L 0,7&#34; style=&#34;stroke-dasharray: 0, 0;&#34;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;defs&gt;&lt;marker id=&#34;sequencenumber&#34; refX=&#34;15&#34; refY=&#34;15&#34; markerWidth=&#34;60&#34; markerHeight=&#34;40&#34; orient=&#34;auto&#34;&gt;&lt;circle cx=&#34;15&#34; cy=&#34;15&#34; r=&#34;6&#34;&gt;&lt;/circle&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;text x=&#34;199&#34; y=&#34;125&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;middle&#34; alignment-baseline=&#34;middle&#34; class=&#34;messageText&#34; dy=&#34;1em&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;Hello Bob, how are you?&lt;/text&gt;&lt;line x1=&#34;75&#34; y1=&#34;158&#34; x2=&#34;323&#34; y2=&#34;158&#34; class=&#34;messageLine0&#34; stroke-width=&#34;2&#34; stroke=&#34;none&#34; marker-end=&#34;url(#arrowhead)&#34; style=&#34;fill: none;&#34;&gt;&lt;/line&gt;&lt;text x=&#34;199&#34; y=&#34;218&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;middle&#34; alignment-baseline=&#34;middle&#34; class=&#34;messageText&#34; dy=&#34;1em&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;Not so good :(&lt;/text&gt;&lt;line x1=&#34;323&#34; y1=&#34;251&#34; x2=&#34;75&#34; y2=&#34;251&#34; class=&#34;messageLine0&#34; stroke-width=&#34;2&#34; stroke=&#34;none&#34; marker-end=&#34;url(#arrowhead)&#34; style=&#34;fill: none;&#34;&gt;&lt;/line&gt;&lt;text x=&#34;199&#34; y=&#34;311&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;middle&#34; alignment-baseline=&#34;middle&#34; class=&#34;messageText&#34; dy=&#34;1em&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;Feeling fresh like a daisy&lt;/text&gt;&lt;line x1=&#34;323&#34; y1=&#34;344&#34; x2=&#34;75&#34; y2=&#34;344&#34; class=&#34;messageLine0&#34; stroke-width=&#34;2&#34; stroke=&#34;none&#34; marker-end=&#34;url(#arrowhead)&#34; style=&#34;fill: none;&#34;&gt;&lt;/line&gt;&lt;g&gt;&lt;line x1=&#34;65&#34; y1=&#34;168&#34; x2=&#34;333&#34; y2=&#34;168&#34; class=&#34;loopLine&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;333&#34; y1=&#34;168&#34; x2=&#34;333&#34; y2=&#34;354&#34; class=&#34;loopLine&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;65&#34; y1=&#34;354&#34; x2=&#34;333&#34; y2=&#34;354&#34; class=&#34;loopLine&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;65&#34; y1=&#34;168&#34; x2=&#34;65&#34; y2=&#34;354&#34; class=&#34;loopLine&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;65&#34; y1=&#34;266&#34; x2=&#34;333&#34; y2=&#34;266&#34; class=&#34;loopLine&#34; style=&#34;stroke-dasharray: 3, 3;&#34;&gt;&lt;/line&gt;&lt;polygon points=&#34;65,168 115,168 115,181 106.6,188 65,188&#34; class=&#34;labelBox&#34;&gt;&lt;/polygon&gt;&lt;text x=&#34;90&#34; y=&#34;181&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;middle&#34; alignment-baseline=&#34;middle&#34; class=&#34;labelText&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;alt&lt;/text&gt;&lt;text x=&#34;224&#34; y=&#34;186&#34; text-anchor=&#34;middle&#34; class=&#34;loopText&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;&lt;tspan x=&#34;224&#34;&gt;[is sick]&lt;/tspan&gt;&lt;/text&gt;&lt;text x=&#34;199&#34; y=&#34;284&#34; text-anchor=&#34;middle&#34; class=&#34;loopText&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;[is well]&lt;/text&gt;&lt;/g&gt;&lt;text x=&#34;199&#34; y=&#34;414&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;middle&#34; alignment-baseline=&#34;middle&#34; class=&#34;messageText&#34; dy=&#34;1em&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;Thanks for asking&lt;/text&gt;&lt;line x1=&#34;323&#34; y1=&#34;447&#34; x2=&#34;75&#34; y2=&#34;447&#34; class=&#34;messageLine0&#34; stroke-width=&#34;2&#34; stroke=&#34;none&#34; marker-end=&#34;url(#arrowhead)&#34; style=&#34;fill: none;&#34;&gt;&lt;/line&gt;&lt;g&gt;&lt;line x1=&#34;65&#34; y1=&#34;364&#34; x2=&#34;333&#34; y2=&#34;364&#34; class=&#34;loopLine&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;333&#34; y1=&#34;364&#34; x2=&#34;333&#34; y2=&#34;457&#34; class=&#34;loopLine&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;65&#34; y1=&#34;457&#34; x2=&#34;333&#34; y2=&#34;457&#34; class=&#34;loopLine&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;65&#34; y1=&#34;364&#34; x2=&#34;65&#34; y2=&#34;457&#34; class=&#34;loopLine&#34;&gt;&lt;/line&gt;&lt;polygon points=&#34;65,364 115,364 115,377 106.6,384 65,384&#34; class=&#34;labelBox&#34;&gt;&lt;/polygon&gt;&lt;text x=&#34;90&#34; y=&#34;377&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;middle&#34; alignment-baseline=&#34;middle&#34; class=&#34;labelText&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;opt&lt;/text&gt;&lt;text x=&#34;224&#34; y=&#34;382&#34; text-anchor=&#34;middle&#34; class=&#34;loopText&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;&lt;tspan x=&#34;224&#34;&gt;[Extra response]&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;g&gt;&lt;line x1=&#34;55&#34; y1=&#34;75&#34; x2=&#34;343&#34; y2=&#34;75&#34; class=&#34;loopLine&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;343&#34; y1=&#34;75&#34; x2=&#34;343&#34; y2=&#34;467&#34; class=&#34;loopLine&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;55&#34; y1=&#34;467&#34; x2=&#34;343&#34; y2=&#34;467&#34; class=&#34;loopLine&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;55&#34; y1=&#34;75&#34; x2=&#34;55&#34; y2=&#34;467&#34; class=&#34;loopLine&#34;&gt;&lt;/line&gt;&lt;polygon points=&#34;55,75 105,75 105,88 96.6,95 55,95&#34; class=&#34;labelBox&#34;&gt;&lt;/polygon&gt;&lt;text x=&#34;80&#34; y=&#34;88&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;middle&#34; alignment-baseline=&#34;middle&#34; class=&#34;labelText&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;loop&lt;/text&gt;&lt;text x=&#34;224&#34; y=&#34;93&#34; text-anchor=&#34;middle&#34; class=&#34;loopText&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;&lt;tspan x=&#34;224&#34;&gt;[Daily query]&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;g&gt;&lt;rect x=&#34;0&#34; y=&#34;487&#34; fill=&#34;#eaeaea&#34; stroke=&#34;#666&#34; width=&#34;150&#34; height=&#34;65&#34; rx=&#34;3&#34; ry=&#34;3&#34; class=&#34;actor&#34;&gt;&lt;/rect&gt;&lt;text x=&#34;75&#34; y=&#34;519.5&#34; dominant-baseline=&#34;central&#34; alignment-baseline=&#34;central&#34; class=&#34;actor&#34; style=&#34;text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, sans-serif;&#34;&gt;&lt;tspan x=&#34;75&#34; dy=&#34;0&#34;&gt;Alice&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;g&gt;&lt;rect x=&#34;248&#34; y=&#34;487&#34; fill=&#34;#eaeaea&#34; stroke=&#34;#666&#34; width=&#34;150&#34; height=&#34;65&#34; rx=&#34;3&#34; ry=&#34;3&#34; class=&#34;actor&#34;&gt;&lt;/rect&gt;&lt;text x=&#34;323&#34; y=&#34;519.5&#34; dominant-baseline=&#34;central&#34; alignment-baseline=&#34;central&#34; class=&#34;actor&#34; style=&#34;text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, sans-serif;&#34;&gt;&lt;tspan x=&#34;323&#34; dy=&#34;0&#34;&gt;Bob&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;---
title: 流程图显示
mermaid: true
---

```mermaid
graph LR
    A [Square Rect] -- Link text --&amp;gt; B ((Circle))
    A --&amp;gt; C (Round Rect)
    B --&amp;gt; D &amp;#123;Rhombus&amp;#125;
    C --&amp;gt; D
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;mermaid&#34;&gt;&lt;svg id=&#34;mermaid-1611648557542&#34; width=&#34;100%&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; height=&#34;563&#34; style=&#34;max-width: 498px;&#34; viewBox=&#34;-50 -10 498 563&#34;&gt;&lt;g&gt;&lt;/g&gt;&lt;g&gt;&lt;line id=&#34;actor0&#34; x1=&#34;75&#34; y1=&#34;5&#34; x2=&#34;75&#34; y2=&#34;552&#34; class=&#34;actor-line&#34; stroke-width=&#34;0.5px&#34; stroke=&#34;#999&#34;&gt;&lt;/line&gt;&lt;rect x=&#34;0&#34; y=&#34;0&#34; fill=&#34;#eaeaea&#34; stroke=&#34;#666&#34; width=&#34;150&#34; height=&#34;65&#34; rx=&#34;3&#34; ry=&#34;3&#34; class=&#34;actor&#34;&gt;&lt;/rect&gt;&lt;text x=&#34;75&#34; y=&#34;32.5&#34; dominant-baseline=&#34;central&#34; alignment-baseline=&#34;central&#34; class=&#34;actor&#34; style=&#34;text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, sans-serif;&#34;&gt;&lt;tspan x=&#34;75&#34; dy=&#34;0&#34;&gt;Alice&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;g&gt;&lt;line id=&#34;actor1&#34; x1=&#34;323&#34; y1=&#34;5&#34; x2=&#34;323&#34; y2=&#34;552&#34; class=&#34;actor-line&#34; stroke-width=&#34;0.5px&#34; stroke=&#34;#999&#34;&gt;&lt;/line&gt;&lt;rect x=&#34;248&#34; y=&#34;0&#34; fill=&#34;#eaeaea&#34; stroke=&#34;#666&#34; width=&#34;150&#34; height=&#34;65&#34; rx=&#34;3&#34; ry=&#34;3&#34; class=&#34;actor&#34;&gt;&lt;/rect&gt;&lt;text x=&#34;323&#34; y=&#34;32.5&#34; dominant-baseline=&#34;central&#34; alignment-baseline=&#34;central&#34; class=&#34;actor&#34; style=&#34;text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, sans-serif;&#34;&gt;&lt;tspan x=&#34;323&#34; dy=&#34;0&#34;&gt;Bob&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;defs&gt;&lt;marker id=&#34;arrowhead&#34; refX=&#34;5&#34; refY=&#34;2&#34; markerWidth=&#34;6&#34; markerHeight=&#34;4&#34; orient=&#34;auto&#34;&gt;&lt;path d=&#34;M 0,0 V 4 L6,2 Z&#34;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;defs&gt;&lt;marker id=&#34;crosshead&#34; markerWidth=&#34;15&#34; markerHeight=&#34;8&#34; orient=&#34;auto&#34; refX=&#34;16&#34; refY=&#34;4&#34;&gt;&lt;path fill=&#34;black&#34; stroke=&#34;#000000&#34; stroke-width=&#34;1px&#34; d=&#34;M 9,2 V 6 L16,4 Z&#34; style=&#34;stroke-dasharray: 0, 0;&#34;&gt;&lt;/path&gt;&lt;path fill=&#34;none&#34; stroke=&#34;#000000&#34; stroke-width=&#34;1px&#34; d=&#34;M 0,1 L 6,7 M 6,1 L 0,7&#34; style=&#34;stroke-dasharray: 0, 0;&#34;&gt;&lt;/path&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;defs&gt;&lt;marker id=&#34;sequencenumber&#34; refX=&#34;15&#34; refY=&#34;15&#34; markerWidth=&#34;60&#34; markerHeight=&#34;40&#34; orient=&#34;auto&#34;&gt;&lt;circle cx=&#34;15&#34; cy=&#34;15&#34; r=&#34;6&#34;&gt;&lt;/circle&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;text x=&#34;199&#34; y=&#34;125&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;middle&#34; alignment-baseline=&#34;middle&#34; class=&#34;messageText&#34; dy=&#34;1em&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;Hello Bob, how are you?&lt;/text&gt;&lt;line x1=&#34;75&#34; y1=&#34;158&#34; x2=&#34;323&#34; y2=&#34;158&#34; class=&#34;messageLine0&#34; stroke-width=&#34;2&#34; stroke=&#34;none&#34; marker-end=&#34;url(#arrowhead)&#34; style=&#34;fill: none;&#34;&gt;&lt;/line&gt;&lt;text x=&#34;199&#34; y=&#34;218&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;middle&#34; alignment-baseline=&#34;middle&#34; class=&#34;messageText&#34; dy=&#34;1em&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;Not so good :(&lt;/text&gt;&lt;line x1=&#34;323&#34; y1=&#34;251&#34; x2=&#34;75&#34; y2=&#34;251&#34; class=&#34;messageLine0&#34; stroke-width=&#34;2&#34; stroke=&#34;none&#34; marker-end=&#34;url(#arrowhead)&#34; style=&#34;fill: none;&#34;&gt;&lt;/line&gt;&lt;text x=&#34;199&#34; y=&#34;311&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;middle&#34; alignment-baseline=&#34;middle&#34; class=&#34;messageText&#34; dy=&#34;1em&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;Feeling fresh like a daisy&lt;/text&gt;&lt;line x1=&#34;323&#34; y1=&#34;344&#34; x2=&#34;75&#34; y2=&#34;344&#34; class=&#34;messageLine0&#34; stroke-width=&#34;2&#34; stroke=&#34;none&#34; marker-end=&#34;url(#arrowhead)&#34; style=&#34;fill: none;&#34;&gt;&lt;/line&gt;&lt;g&gt;&lt;line x1=&#34;65&#34; y1=&#34;168&#34; x2=&#34;333&#34; y2=&#34;168&#34; class=&#34;loopLine&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;333&#34; y1=&#34;168&#34; x2=&#34;333&#34; y2=&#34;354&#34; class=&#34;loopLine&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;65&#34; y1=&#34;354&#34; x2=&#34;333&#34; y2=&#34;354&#34; class=&#34;loopLine&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;65&#34; y1=&#34;168&#34; x2=&#34;65&#34; y2=&#34;354&#34; class=&#34;loopLine&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;65&#34; y1=&#34;266&#34; x2=&#34;333&#34; y2=&#34;266&#34; class=&#34;loopLine&#34; style=&#34;stroke-dasharray: 3, 3;&#34;&gt;&lt;/line&gt;&lt;polygon points=&#34;65,168 115,168 115,181 106.6,188 65,188&#34; class=&#34;labelBox&#34;&gt;&lt;/polygon&gt;&lt;text x=&#34;90&#34; y=&#34;181&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;middle&#34; alignment-baseline=&#34;middle&#34; class=&#34;labelText&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;alt&lt;/text&gt;&lt;text x=&#34;224&#34; y=&#34;186&#34; text-anchor=&#34;middle&#34; class=&#34;loopText&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;&lt;tspan x=&#34;224&#34;&gt;[is sick]&lt;/tspan&gt;&lt;/text&gt;&lt;text x=&#34;199&#34; y=&#34;284&#34; text-anchor=&#34;middle&#34; class=&#34;loopText&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;[is well]&lt;/text&gt;&lt;/g&gt;&lt;text x=&#34;199&#34; y=&#34;414&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;middle&#34; alignment-baseline=&#34;middle&#34; class=&#34;messageText&#34; dy=&#34;1em&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;Thanks for asking&lt;/text&gt;&lt;line x1=&#34;323&#34; y1=&#34;447&#34; x2=&#34;75&#34; y2=&#34;447&#34; class=&#34;messageLine0&#34; stroke-width=&#34;2&#34; stroke=&#34;none&#34; marker-end=&#34;url(#arrowhead)&#34; style=&#34;fill: none;&#34;&gt;&lt;/line&gt;&lt;g&gt;&lt;line x1=&#34;65&#34; y1=&#34;364&#34; x2=&#34;333&#34; y2=&#34;364&#34; class=&#34;loopLine&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;333&#34; y1=&#34;364&#34; x2=&#34;333&#34; y2=&#34;457&#34; class=&#34;loopLine&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;65&#34; y1=&#34;457&#34; x2=&#34;333&#34; y2=&#34;457&#34; class=&#34;loopLine&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;65&#34; y1=&#34;364&#34; x2=&#34;65&#34; y2=&#34;457&#34; class=&#34;loopLine&#34;&gt;&lt;/line&gt;&lt;polygon points=&#34;65,364 115,364 115,377 106.6,384 65,384&#34; class=&#34;labelBox&#34;&gt;&lt;/polygon&gt;&lt;text x=&#34;90&#34; y=&#34;377&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;middle&#34; alignment-baseline=&#34;middle&#34; class=&#34;labelText&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;opt&lt;/text&gt;&lt;text x=&#34;224&#34; y=&#34;382&#34; text-anchor=&#34;middle&#34; class=&#34;loopText&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;&lt;tspan x=&#34;224&#34;&gt;[Extra response]&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;g&gt;&lt;line x1=&#34;55&#34; y1=&#34;75&#34; x2=&#34;343&#34; y2=&#34;75&#34; class=&#34;loopLine&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;343&#34; y1=&#34;75&#34; x2=&#34;343&#34; y2=&#34;467&#34; class=&#34;loopLine&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;55&#34; y1=&#34;467&#34; x2=&#34;343&#34; y2=&#34;467&#34; class=&#34;loopLine&#34;&gt;&lt;/line&gt;&lt;line x1=&#34;55&#34; y1=&#34;75&#34; x2=&#34;55&#34; y2=&#34;467&#34; class=&#34;loopLine&#34;&gt;&lt;/line&gt;&lt;polygon points=&#34;55,75 105,75 105,88 96.6,95 55,95&#34; class=&#34;labelBox&#34;&gt;&lt;/polygon&gt;&lt;text x=&#34;80&#34; y=&#34;88&#34; text-anchor=&#34;middle&#34; dominant-baseline=&#34;middle&#34; alignment-baseline=&#34;middle&#34; class=&#34;labelText&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;loop&lt;/text&gt;&lt;text x=&#34;224&#34; y=&#34;93&#34; text-anchor=&#34;middle&#34; class=&#34;loopText&#34; style=&#34;font-family: &amp;quot;trebuchet ms&amp;quot;, verdana, arial; font-size: 16px; font-weight: 400;&#34;&gt;&lt;tspan x=&#34;224&#34;&gt;[Daily query]&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;g&gt;&lt;rect x=&#34;0&#34; y=&#34;487&#34; fill=&#34;#eaeaea&#34; stroke=&#34;#666&#34; width=&#34;150&#34; height=&#34;65&#34; rx=&#34;3&#34; ry=&#34;3&#34; class=&#34;actor&#34;&gt;&lt;/rect&gt;&lt;text x=&#34;75&#34; y=&#34;519.5&#34; dominant-baseline=&#34;central&#34; alignment-baseline=&#34;central&#34; class=&#34;actor&#34; style=&#34;text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, sans-serif;&#34;&gt;&lt;tspan x=&#34;75&#34; dy=&#34;0&#34;&gt;Alice&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;g&gt;&lt;rect x=&#34;248&#34; y=&#34;487&#34; fill=&#34;#eaeaea&#34; stroke=&#34;#666&#34; width=&#34;150&#34; height=&#34;65&#34; rx=&#34;3&#34; ry=&#34;3&#34; class=&#34;actor&#34;&gt;&lt;/rect&gt;&lt;text x=&#34;323&#34; y=&#34;519.5&#34; dominant-baseline=&#34;central&#34; alignment-baseline=&#34;central&#34; class=&#34;actor&#34; style=&#34;text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, sans-serif;&#34;&gt;&lt;tspan x=&#34;323&#34; dy=&#34;0&#34;&gt;Bob&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/pre&gt;</content>
        <updated>2021-01-26T01:27:48.000Z</updated>
    </entry>
    <entry>
        <id>https://alanosy.github.io/2021/01/25/Linux%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</id>
        <title>Linux搭建博客</title>
        <link rel="alternate" href="https://alanosy.github.io/2021/01/25/Linux%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
        <content type="html">&lt;p&gt;Hexo 简介&lt;br&gt;
 Hexo 是一款基于 Node.js 的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在 GitHub 和 Gitee 上，是搭建博客的首选框架。大家可以进入 hexo 官网进行详细查看，因为 Hexo 的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看&lt;/p&gt;
&lt;p&gt;安装 Git&lt;br&gt;
Git 是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ &lt;span class=&#34;token function&#34;&gt;apt-get&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; -y&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;安装 nodejs&lt;br&gt;
Hexo 是基于 nodeJS 编写的，所以需要安装一下 nodeJs 和里面的 npm 工具&lt;/p&gt;
&lt;p&gt;wp-block-code&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ &lt;span class=&#34;token function&#34;&gt;apt-get&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; nodejs &lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; -y&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;安装完后，输入命令&lt;/p&gt;
&lt;p&gt;wp-block-code&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ node -v&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;wp-block-code&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ &lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; -v&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;检查是否安装成功&lt;/p&gt;
&lt;p&gt;更换 npm 源为淘宝源&lt;/p&gt;
&lt;p&gt;wp-block-code&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ &lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; config &lt;span class=&#34;token builtin class-name&#34;&gt;set&lt;/span&gt; registry https://registry.npm.taobao.org&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;安装 hexo&lt;br&gt;
 前面 git 和 nodejs 安装好后，就可以安装 hexo 了，先创建一个文件夹 filename，然后 cd 到这个文件夹下&lt;/p&gt;
&lt;p&gt;输入命令&lt;/p&gt;
&lt;p&gt;wp-block-code&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ &lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; -g hexo-cli&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;输入命令&lt;/p&gt;
&lt;p&gt;wp-block-code&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo -v&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;查看版本信息&lt;/p&gt;
&lt;p&gt;初始化 hexo&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;wp-block-code&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo init filename&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;文件名随意定义&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;wp-block-code&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ &lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; filename //进入这个文件夹&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;wp-block-code&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ &lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ &lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;folder&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#说明：将操作位置转移到将要存放项目的文件夹目录（便于区分，我的项目文件夹名为 hexo,~/root/hexo 以下将使用这个文件夹）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo init &lt;span class=&#34;token comment&#34;&gt;#说明：自动在文件夹（hexo1）中创建项目所需的文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ &lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#说明：安装依赖包&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo generate &lt;span class=&#34;token comment&#34;&gt;#说明：构建，会在 hexo1 中创建 public 文件夹&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;执行完以上命令后，会多出以下文件和文件夹&lt;br&gt;
例如&lt;br&gt;
新建完成后，指定文件夹目录下有：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;_config.yml：站点的配置文件，需要备份&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;themes：主题文件夹，需要备份&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;source：博客文章的 .md 文件，需要备份&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;scaffolds：文章的模板，需要备份&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;package.json：安装包的名称，需要备份&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.gitignore：限定在 push 时哪些文件可以忽略，需要备份&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.git：主题和站点都有，标志这是一个 &lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; 项目，不需要备份&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;node_modules：是安装包的目录，在执行 &lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; 的时候会重新生成，不需要备份&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;public：是 hexo g 生成的静态网页，不需要备份&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.deploy_git：同上，hexo g 也会生成，不需要备份&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;db.json：文件，不需要备份&lt;br&gt;
输入命令&lt;br&gt;
 wp-block-code&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo g&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;输入命令&lt;br&gt;
 wp-block-code&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo s&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;打开 hexo 的服务&lt;br&gt;
在浏览器输入&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ http://localhost:4000&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;就可以看到你生成的博客&lt;br&gt;
使用 ctrl+c 停止服务&lt;br&gt;
 Hexo+Github&lt;br&gt;
GitHub 创建个人仓库&lt;br&gt;
注册登录 github 官网，点击右上角加号，点击 New repository，新建仓库&lt;br&gt;
创建一个和用户名相同的仓库，即 http://xxxx.github.io，其中 xxx 是 github 的用户名&lt;br&gt;
点击 create repository&lt;br&gt;
Git 初始化设置&lt;br&gt;
输入命令&lt;br&gt;
 wp-block-code&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ &lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; config --global user.name &lt;span class=&#34;token string&#34;&gt;&#34;yourname&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;wp-block-code&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ &lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; config --global user.email &lt;span class=&#34;token string&#34;&gt;&#34;youremail&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;yourname 是 github 用户名，youremail 是注册 github 的邮箱&lt;br&gt;
 wp-block-code&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ &lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; config user.name&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;wp-block-code&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ &lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; config user.email&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;检查是否正确，输入命令&lt;br&gt;
生成 SSH 添加到 GitHub&lt;br&gt;
 输入命令，创建 SSH, 一路回车&lt;br&gt;
 wp-block-code&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ ssh-keygen -t rsa -C &lt;span class=&#34;token string&#34;&gt;&#34;youremail&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;查看 SSH KEY，输入命令&lt;br&gt;
 wp-block-code&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ &lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; ~/.ssh/id_rsa.pub&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;复制 id_rsa.pub 里面的全部内容&lt;br&gt;
在 github 的 setting 中，找到 SSH keys 的设置选项，点击 New SSH key，粘贴 id_rsa.pub 里面的全部内容&lt;br&gt;
输入命令&lt;br&gt;
 wp-block-code&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ &lt;span class=&#34;token function&#34;&gt;ssh&lt;/span&gt; -T git@github.com&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;查看是否连接成功&lt;br&gt;
打开站点配置文件 _config.yml，修改添加以下内容&lt;br&gt;
 wp-block-code&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;deploy:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  type: &lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  repo: git@github.com:yourgithubname/yourgithubname.github.io.git&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  branch: master&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;安装 deploy-git ，也就是部署的命令，这样才能用命令部署到 github&lt;br&gt;
wp-block-code&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ &lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; hexo-deployer-git --save&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;输入命令&lt;br&gt;
 wp-block-code&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h &lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo clean 第一次安装不用清缓存&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo clean &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;　hexo g -d 　缩写&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo g &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; hexo generate 生成静态文件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo generate -deploy 生成静态文件后立即部署网站&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;打开下面的网址&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ http://yourname.github.io&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;就可看到和&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xvY2FsaG9zdDo0MDAw&#34;&gt; http://localhost:4000&lt;/span&gt;&lt;br&gt;
 一样的了！&lt;br&gt;
关联 Git 仓库&lt;br&gt;
 wp-block-code&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ &lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; clone https://github.com/你的用户名/你的用户名.github.io.git&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;执行之后会在当前目录生成’&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS02cXF2N2kxNG9mb3N5cmIuZ2l0aHViLmlv&#34;&gt;你的用户名.github.io&lt;/span&gt;’的文件夹，这是关联 github 仓库的文件夹，需要上传的文件都会移动到这里&lt;br&gt;
更多精彩内容请点击 hexo 官网&lt;br&gt;
 (附上我的博客链接)&lt;br&gt;
Hexo+Gitee&lt;br&gt;
Gitee 创建个人仓库&lt;br&gt;
打开码云官网，注册登陆，创建项目，点击右上角加号，新建仓库&lt;br&gt;
开启 Gitee Pages&lt;br&gt;
 点击启动&lt;br&gt;
启动后，点击蓝色链接打开网址&lt;br&gt;
初始化 Git 设置&lt;br&gt;
输入命令&lt;br&gt;
 wp-block-code&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ &lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; config --global user.name &lt;span class=&#34;token string&#34;&gt;&#34;这里输入你的Gitee注册名&#34;&lt;/span&gt;// 按回车&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ &lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; config --global user.email &lt;span class=&#34;token string&#34;&gt;&#34;这里输你的Gitee邮箱&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;生成 SSH 密钥文件&lt;br&gt;
 wp-block-code&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ ssh-keygen -t rsa -C &lt;span class=&#34;token string&#34;&gt;&#34;你的Gitee注册邮箱&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ // 可不输入，三个回车&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;复制粘贴到码云&lt;br&gt;
配置 _config.yml&lt;br&gt;
 点击复制克隆 / 下载里面的 https 的内容&lt;br&gt;
修改添加_config.yml 以下内容&lt;br&gt;
 wp-block-code&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h &lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;url: Gitee Pages 服务，网站地址： https://空间名.gitee.io/仓库名&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;粘贴&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;root: /仓库名/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;wp-block-code&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;deploy:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  type: &lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  repo: https://gitee.com/空间名/仓库名&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;粘贴&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  branch: master&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;基础配置可以参考官方文档的配置说明&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h &lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ wp-block-code&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo clean &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;　hexo g -d 　缩写 清缓存&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo g &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; hexo generate 生成静态文件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo generate -deploy 生成静态文件后立即部署网站自动上传到gitee&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;打开 Gitee Pages 服务 ，每次上传或改动，都要点击 “更新” 打开网址访问&lt;/p&gt;
</content>
        <updated>2021-01-25T05:58:22.000Z</updated>
    </entry>
</feed>
